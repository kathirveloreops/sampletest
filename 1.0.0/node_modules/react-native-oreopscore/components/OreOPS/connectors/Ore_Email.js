import axios from 'axios';
import connections from '../../../../../connector/Ore_Connections';

// Method for return object from response data
const OreResponse = (status, statuscode, data, error) => {
    return new Promise(function (resolve) {
        resolve({ status: status, statuscode: statuscode, data: data, error: error });
    });
}

// Method for Sending Email
const SendEmail = async (conname, email, subject, body, ishtml = true, CC = "", BCC = "", Attachments = [{}]) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        if (!email) {
            return OreResponse(false, 206, [], "Email Required Ex: example@oreops.com");
        }
        if (!subject) {
            return OreResponse(false, 206, [], "Subject Required");
        }
        if (!body) {
            return OreResponse(false, 206, [], "Body Required");
        }
        let TYPE = 'POST';
        let URL = connections.OreCommURL + 'SendEmail';
        let PARAMS = {
            pnConnType: 160,
            Email: email,
            Subject: subject,
            Body: body,
            IsHtml: ishtml,
            CC: CC,
            BCC: BCC,
            Attachments: Attachments,
            Credential: config
            //Credential: JSON.stringify(config)
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }

        const response = await axios.post(URL, PARAMS, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

export default { SendEmail }