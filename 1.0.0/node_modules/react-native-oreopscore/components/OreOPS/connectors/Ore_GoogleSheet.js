import axios from 'axios';
import connections from '../../../../../connector/Ore_Connections';

// Method for return object from response data
const OreResponse = (status, statuscode, data, error) => {
    return new Promise(function (resolve) {
        resolve({ status: status, statuscode: statuscode, data: data, error: error });
    });
}

// Method for adding record to googlesheet 
const AddRecSet = async (conname, sheetname, rangefrom, rangeto, data) => {
    try {
        //data = "['Hello!', 'This', 'was', 'insertd', 'via']"
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        if (!rangefrom) {
            return OreResponse(false, 206, [], "rangefrom Required");
        }
        if (!rangeto) {
            return OreResponse(false, 206, [], "rangeto Required");
        }
        if (!data) {
            return OreResponse(false, 206, [], "data Required");
        }
        let TYPE = 'POST';
        let URL = connections.OreCommURL + 'AddRecSet';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "{'sheetid':'" + config.sheetid + "'}",
            psQuery: "{'SheetName':'" + sheetname + "','RangeFrom':'" + rangefrom + "','RangeTo':'" + rangeto + "'}",
            psData: data
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }
        const response = await axios.post(URL, PARAMS, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for Getting Record from Googlesheet
const GetRecSet = async (conname, sheetname, rangefrom, rangeto, condition = '[]') => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], config + ": configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        if (!rangefrom) {
            return OreResponse(false, 206, [], "rangefrom Required");
        }
        if (!rangeto) {
            return OreResponse(false, 206, [], "rangeto Required");
        }
        let TYPE = 'GET';
        let URL = connections.OreCommURL + 'GetRecSet';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "",
            psQuery: { "sheetid": config.sheetid, "sheetname": sheetname, "rangefrom": rangefrom, "rangeto": rangeto, "condition": JSON.stringify(condition) }
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }

        const response = await axios.get(URL, { params: PARAMS }, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for Deleting Record from Googlesheet
const DeleteRecSet = async (conname, sheetname, rangefrom, rangeto, data) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        if (!rangefrom) {
            return OreResponse(false, 206, [], "rangefrom Required");
        }
        if (!rangeto) {
            return OreResponse(false, 206, [], "rangeto Required");
        }
        if (!data) {
            return OreResponse(false, 206, [], "data Required");
        }
        let TYPE = 'POST';
        let URL = connections.OreCommURL + 'DeleteRecSet';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "",
            psQuery: {
                "sheetid": config.sheetid,
                "sheetname": sheetname,
                "rangefrom": rangefrom,
                "rangeto": rangeto,
                "condition": JSON.stringify(data)
            },
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }

        const response = await axios.post(URL, PARAMS, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for Updating record to googlesheet 
const UpdateRecSet = async (conname, sheetname, rangefrom, rangeto, condition = [], data = []) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        if (!rangefrom) {
            return OreResponse(false, 206, [], "rangefrom Required");
        }
        if (!rangeto) {
            return OreResponse(false, 206, [], "rangeto Required");
        }
        if (!condition) {
            return OreResponse(false, 206, [], "condition Required");
        }
        if (!data) {
            return OreResponse(false, 206, [], "data Required");
        }
        let TYPE = 'POST';
        let URL = connections.OreCommURL + 'UpdateRecSet';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "",
            psQuery: {
                sheetid: config.sheetid,
                sheetname: sheetname,
                rangefrom: rangefrom,
                rangeto: rangeto,
                column: "",
                condition: JSON.stringify(condition)
            },
            psData: data
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }
        const response = await axios.post(URL, PARAMS, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for updating single record to googlesheet
const UpdateRecSetSingle = async (conname, sheetname, rangefrom, rangeto, column, condition = [], data = []) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        if (!rangefrom) {
            return OreResponse(false, 206, [], "rangefrom Required");
        }
        if (!rangeto) {
            return OreResponse(false, 206, [], "rangeto Required");
        }
        if (!column) {
            return OreResponse(false, 206, [], "column Required");
        }
        if (!condition) {
            return OreResponse(false, 206, [], "condition Required");
        }
        if (!data) {
            return OreResponse(false, 206, [], "data Required");
        }
        let TYPE = 'POST';
        let URL = connections.OreCommURL + 'UpdateRecSetSingle';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "",
            psQuery: {
                sheetid: config.sheetid,
                sheetname: sheetname,
                rangefrom: rangefrom,
                rangeto: rangeto,
                column: column,
                condition: JSON.stringify(condition)
            },
            psData: data
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: POST");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }
        const response = await axios.post(URL, PARAMS, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for getting sheetname from googlesheet
const GetTables = async (conname) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], config + ": configuration not exist");
        }
        let TYPE = 'GET';
        let URL = connections.OreCommURL + 'GetTables';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "{'sheetid':'" + config.sheetid + "'}"
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: GET");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }

        const response = await axios.get(URL, { params: PARAMS }, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

// Method for sheet header names from googlesheet
const GetTableHeaders = async (conname, sheetname) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], "configuration not exist");
        }
        if (!sheetname) {
            return OreResponse(false, 206, [], "sheetname Required");
        }
        let TYPE = 'GET';
        let URL = connections.OreCommURL + 'GetTablesHeader';
        let PARAMS = {
            pnConnType: 20,
            psCredential: "",
            psQuery: { "sheetid": config.sheetid, "sheetname": sheetname }
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: GET");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }

        const response = await axios.get(URL, { params: PARAMS }, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

export default { AddRecSet, GetRecSet, DeleteRecSet, UpdateRecSet, UpdateRecSetSingle, GetTables, GetTableHeaders }