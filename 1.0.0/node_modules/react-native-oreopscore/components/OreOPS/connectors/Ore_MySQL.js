import axios from 'axios';
import connections from '../../../../../connector/Ore_Connections';

// Method for returning object from response data
const OreResponse = (status, statuscode, data, error) => {
    return new Promise(function (resolve) {
        resolve({ status: status, statuscode: statuscode, data: data, error: error });
    });
}

// Method for getting data from MySQL
const GetRecSet = async (conname, query) => {
    try {
        let config = connections.GetConnectorConfig(conname);
        if (!config) {
            return OreResponse(false, 206, [], conname + ": configuration not exist");
        }
        let TYPE = 'GET';
        let URL = connections.OreCommURL + 'GetRecSet';
        let PARAMS = {
            pnConnType: 120,
            psCredential: config,
            psQuery: { "table": "", "data": query, "key": "", "value": "", "find": "" }
        }
        let HEADERS = {};
        if (!TYPE) {
            return OreResponse(false, 206, [], "TYPE Required Ex: GET");
        }
        if (!URL) {
            return OreResponse(false, 206, [], "URL Required");
        }
        const response = await axios.get(URL, { params: PARAMS }, { headers: HEADERS });
        let result = response.data;
        result = result[0];
        if (result.Status) {
            return OreResponse(true, result.Status, result.Data, []);
        }
        else {
            return OreResponse(false, result.Status, [], result.ErrorLog);
        }
    }
    catch (err) {
        return OreResponse(false, 404, [], err.toString());
    }
}

export default { GetRecSet }