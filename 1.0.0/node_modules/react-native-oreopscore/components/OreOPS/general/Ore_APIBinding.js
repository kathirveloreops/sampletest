import React, { Component } from 'react';
import axios from 'axios'
import Orefuncs from './Ore_GlobalMethods'
import { Alert } from 'react-native';
import mssql from '../connectors/Ore_MsSQL';
import mysql from '../connectors/Ore_MySQL';
import conndata from '../../../../../connector/Ore_Connections';
import OreDatabinding from '../../../../../databinding/databinding';
import ModelEngine from 'react-native-oreopscore/components/OreOPS/general/Ore_ModelEngine';

const OreApibinding = {
  // Updating datasource to screen style JSON
  SetDataSource(contrlid, data, ScreenName) {
    window[ScreenName].setState({ StyleJSON: data });
  },

  // Setting Data from API to controls
  SetApiData(contrlid, stateValue, varname) {
    varname = varname.replace("#", "");
    if (contrlid != "form") {
      var _screenStyles = stateValue.StyleJSON;
      if (_screenStyles[contrlid] == undefined) { return }
      var controltype = _screenStyles[contrlid].type;
      if (controltype == "listview") {
        var lsdata = stateValue[varname];
        Orefuncs.orelistbind(contrlid, lsdata, stateValue);
        return false;
      }
    }
    if (contrlid == "form") {
      var _screenStyle = stateValue.StyleJSON;
      var lsdata = stateValue[varname];
      var _controlStyle = [];
      var lsdatfield;
      var tifOptions = Object.keys(_screenStyle).map(function (key) {
        if (_screenStyle[key] != undefined) {
          if (key != "APIJSON" && key != "CONNECTORJSON")
            var lsctrlname = _screenStyle[key].Default.txtctrlname;
          lsdatfield = _screenStyle[key]["Property"];
          if (lsdatfield == undefined)
            return false;
          lsdatfield = lsdatfield['datafield'];
          if (lsdatfield != "" && lsdatfield != undefined) {
            var Apidetails = lsdata;
            if (Apidetails != undefined) {
              Apidetails = Apidetails[0];
              Apidetails = Apidetails[lsdatfield]
              Orefuncs.SetValue(lsctrlname, stateValue, Apidetails);
            }
          }
        }
      });
    }
    else {
      var _screenStyle = stateValue.StyleJSON;
      var _controlStyle = _screenStyle[contrlid];
      var lsdta
      lsdta = _controlStyle['Property']['name1'];
      if (lsdta == undefined) {
        lsdta = _controlStyle['Property']['name'];
      }
      var lsnamefield = lsdta[0].name;
      var lsvaluefield = lsdta[0].value;
      _controlStyle['Property']['namefield'] = lsnamefield;
      _controlStyle['Property']['valuefield'] = lsvaluefield;
      _controlStyle['Property']['name'] = stateValue[varname];
      if (stateValue[varname].length > 0) {
        var selectedvalue = stateValue[varname][0][lsvaluefield];
        _controlStyle['Property']['selected'] = selectedvalue;
      }
      this.SetDataSource(contrlid, _screenStyle, stateValue.pagename);
    }
  },

  // Binding data to Msql,Mssql and Direct Connector
  async Databind(contrlid, code, stateValue, type) {
    if (contrlid != "Page") {
      var _screenStyles = stateValue.StyleJSON;
      if (_screenStyles[contrlid] == undefined) { return }
      var controltype = _screenStyles[contrlid].type;
      var namefield, valuefield, imageField, heading, content, rightHeading;
      try {
        var currentapi = stateValue.StyleJSON.APIJSON;
        if (type == "DC") {
          currentapi = stateValue.StyleJSON.CONNECTORJSON;
          var Apidetails = currentapi.filter(function (item) {
            return item.ctrlid == contrlid;
          })
          var conntype = Apidetails[0].directconn.conntype ? Apidetails[0].directconn.conntype : "";
          var conname = Apidetails[0].directconn.conncode;
          var queryval = Apidetails[0].directconn.queryval;
          if (controltype == "Picker" || controltype == "radio") {
            namefield = Apidetails[0].directconn.text ? Apidetails[0].directconn.text : "";
            valuefield = Apidetails[0].directconn.value ? Apidetails[0].directconn.value : "";
          }
          else if (controltype == "listview") {
            imageField = Apidetails[0].directconn.imageField;
            heading = Apidetails[0].directconn.heading;
            content = Apidetails[0].directconn.content;
            rightHeading = Apidetails[0].directconn.rightHeading;
          }
          if (conntype.toUpperCase() == "MSSQL") {
            mssql.GetRecSet(conname, queryval).then(res => {
              var Datasourcedata;
              Datasourcedata = JSON.parse(res.data);
              const Datasource = Datasourcedata;
              var _screenStyle = stateValue.StyleJSON;
              var _controlStyle = _screenStyle[contrlid];
              if (_controlStyle) {
                if (controltype == "Picker" || controltype == "radio") {
                  _controlStyle['Property']['namefield'] = namefield;
                  _controlStyle['Property']['valuefield'] = valuefield;
                  _controlStyle['Property']['name'] = Datasource;
                  if (Datasource.length > 0) {
                    var selectedvalue = Datasource[0][valuefield];
                    _controlStyle['Property']['selected'] = selectedvalue;
                  }
                }
                else if (controltype == "listview") {
                  _controlStyle['Property']['imageField'] = imageField;
                  _controlStyle['Property']['heading'] = heading;
                  _controlStyle['Property']['content'] = content;
                  _controlStyle['Property']['rightHeading'] = rightHeading;
                  _controlStyle['Property']['data'] = Datasource;
                }
                this.SetDataSource(contrlid, _screenStyle, stateValue.pagename);
              }
            });

          }
          else if (conntype.toUpperCase() == "MYSQL") {
            mysql.GetRecSet(conname, queryval).then(res => {
              var Datasourcedata;
              Datasourcedata = JSON.parse(res.data);
              const Datasource = Datasourcedata;
              var _screenStyle = stateValue.StyleJSON;
              var _controlStyle = _screenStyle[contrlid];
              if (_controlStyle) {
                if (controltype == "Picker" || controltype == "radio") {
                  _controlStyle['Property']['namefield'] = namefield;
                  _controlStyle['Property']['valuefield'] = valuefield;
                  _controlStyle['Property']['name'] = Datasource;
                  if (Datasource.length > 0) {
                    var selectedvalue = Datasource[0][valuefield];
                    _controlStyle['Property']['selected'] = selectedvalue;
                  }
                }
                else if (controltype == "listview") {
                  _controlStyle['Property']['imageField'] = imageField;
                  _controlStyle['Property']['heading'] = heading;
                  _controlStyle['Property']['content'] = content;
                  _controlStyle['Property']['rightHeading'] = rightHeading;
                  _controlStyle['Property']['data'] = Datasource;
                }
                this.SetDataSource(contrlid, _screenStyle, stateValue.pagename);
              }
            });
          }
        }
        else {
          currentapi = stateValue.StyleJSON.APIJSON;
          var Datasource = [];
          var Apidetails = currentapi.filter(function (item) {
            return item.controlid == contrlid;
          })

          if (Apidetails.length == 0) {
            if (code != undefined || code != "") {
              Apidetails = currentapi.filter(function (item) {
                return item.code == code;
              })
            }
          }
          if (Apidetails.length > 0) {
            Datasource = await GetRequestData(Apidetails, stateValue);
            if (Datasource.data != undefined) { Datasource = Datasource.data }
            var _screenStyle = stateValue.StyleJSON;
            var _controlStyle = _screenStyle[contrlid];
            if (controltype == "Picker" || controltype == "radio") {
              namefield = Apidetails[0].namefield;
              valuefield = Apidetails[0].valuefield;
            }
            else if (controltype == "listview") {
              imageField = Apidetails[0].imageField;
              heading = Apidetails[0].heading;
              content = Apidetails[0].content;
              rightHeading = Apidetails[0].rightHeading;
            }
            var _screenStyle = stateValue.StyleJSON;
            var _controlStyle = _screenStyle[contrlid];
            if (_controlStyle) {
              if (controltype == "Picker" || controltype == "radio") {
                _controlStyle['Property']['namefield'] = namefield;
                _controlStyle['Property']['valuefield'] = valuefield;
                _controlStyle['Property']['name'] = Datasource;
                if (Datasource.length > 0) {
                  var selectedvalue = Datasource[0][valuefield];
                  _controlStyle['Property']['selected'] = selectedvalue;
                }
              }
              else if (controltype == "listview") {
                _controlStyle['Property']['imageField'] = imageField;
                _controlStyle['Property']['heading'] = heading;
                _controlStyle['Property']['content'] = content;
                _controlStyle['Property']['rightHeading'] = rightHeading;
                _controlStyle['Property']['data'] = Datasource;
              }
              this.SetDataSource(contrlid, _screenStyle, stateValue.pagename);
            }
          }
        }
      }
      catch (e) {
        alert(e);
      }
    }
    else {
      try {
        var currentapi = stateValue.StyleJSON.APIJSON;
        var Apidetails = currentapi.filter(function (item) {
          return item.code == 50000;
        })
        if (Apidetails.length > 0) {
          Datasource = await GetRequestData(Apidetails, stateValue);
        }
        return Datasource;
      }
      catch (e) {
        alert(e);
      }
    }
  },

  // Hitting API Request
  async RequestAPI(TYPE, URL, Params, Headers) {
    if (!TYPE) {
      return { status: false, data: "TYPE Required Ex: GET/POST" }
    }
    if (!URL) {
      return { status: false, data: "URL Required" }
    }
    let params = {};
    let headers = {};
    if (Params) {
      params = Params;
    }
    if (Headers) {
      var dict = {};
      Headers.forEach(element => {
        let name = element['name'];
        dict[name] = element['value'];
        if (name.toUpperCase() == "AUTHORIZATION") {
          axios.defaults.headers.common['Authorization'] = element['value'];
        }
      });
      headers = dict;
    }
    if (TYPE.toUpperCase() === "GET") {
      const response = await axios.get(URL, { params: params }, { headers: headers });
      return { status: true, statuscode: response.status, data: response.data };
    }
    else if (TYPE.toUpperCase() === "POST") {
      const response = await axios.post(URL, params, { headers: headers });
      return { status: true, statuscode: response.status, data: response.data };
    }
  },
  async GetValue(State) {
    OreDatabinding.getValue(State);
  },
  async SetValue(State) {
    OreDatabinding.setValue(State);
  },
  SchemaValidation(State, modelname, jsondata) {
    //console.log(modelname);
    //console.log(jsondata);
    var schema = State.state.datamodal.schema[modelname];
    //console.log("modelname: " + modelname + ";schema:" + JSON.stringify(schema));
    var result = ModelEngine.ValidateSchema(jsondata, schema);
    //console.log("SchemaValidation: " + modelname + ";result:" + JSON.stringify(result));
    if (result.status) {
      return true;
    }
    else {
      var errmsg = JSON.stringify({ status: result.status, model: modelname, message: result.message, error: result.data });
      Alert.alert("Model Validation", errmsg);
      return false;
    }
  },
  async AutoBind(State) {
    //console.log("AutoBind");
    var controls = State.state.StyleJSON;
    //console.log(controls);
    for (const [key, value] of Object.entries(controls)) {
      if (value.Property) {
        var autobind = value.Property.autobind ? value.Property.autobind : false;
        if (autobind) {
          //console.log(property);
          var controlname = value.Default.txtctrlname;
          OreApibinding.SetDataBinding(State, controlname);
        }
      }
    }
  },
  async SetDataBinding(State, controlname) {
    //console.log("SetDataBinding");
    var controldata = State.state.StyleJSON[controlname];
    var modalcode = controldata.Property.datamodelbinding.split('#')[0];
    //console.log(modalcode);
    const localjson = GetJSONData(modalcode);
    //console.log(localjson);    
    if (localjson && localjson.length > 0) {
      OreApibinding.SetDataBindLocal(State, controlname, localjson);
    }
    else {
      conndata.APIData.forEach(item => {
        var propscrt = JSON.parse(item.propscrt);
        //console.log(propscrt);
        propscrt.forEach(element => {
          if (element.responsedatamodel === modalcode) {
            console.log(element.mserialno);
            var objcode = item.objcode;
            var mserialno = element.mserialno;
            OreApibinding.SetDataBindNew(State, objcode, mserialno, controlname);
          }
        });
      });
    }
  },
  async SetDataBindLocal(State, controlname, jsondata) {
    var controldata = State.state.StyleJSON[controlname];
    controldata = controldata.Property;
    const modalname = GetDataModalData(controldata.datamodelbinding.split('#')[0], State);
    //console.log("-===========================");
    //console.log(modalname);
    if (!OreApibinding.SchemaValidation(State, modalname, jsondata)) return false;
    State.state.datamodal.models[modalname] = jsondata;
    State.setState({ datamodal: State.state.datamodal });
    OreDatabinding.setDataModel(State, controlname, modalname);
  },
  async SetDataBindNew(State, objcode, mserialno, controlname) {
    //console.log("SetDataBindNew call");   
    //console.log(State, objcode, mserialno, controlname);
    var controldata = State.state.StyleJSON[controlname];
    controldata = controldata.Property;
    var namefield = controldata.nameField;
    var valuefield = controldata.valueField;
    var datamodalbinding = GetDataModalData(controldata.datamodelbinding.split('#')[0], State);
    //console.log(State, objcode, mserialno, controlname);
    //console.log(State.state.datamodal.models);    
    var apidata = conndata.APIData.filter(function (item) { return item.objcode == objcode })[0];
    apidata = JSON.parse(apidata.propscrt);
    apidata = apidata.filter(function (item) { return item.mserialno == mserialno })[0];
    var datamodelrequest = GetDataModalData(apidata.requestdatamodel, State);
    var datamodelresponse = GetDataModalData(apidata.responsedatamodel, State);
    //console.log("1");
    //console.log(datamodelresponse);
    //console.log(datamodelresponse);
    var Params = GetParamData(apidata.requestjson, State);
    //console.log(Params);
    var TYPE = apidata.methodtype.toUpperCase();
    var URL = apidata.baseurl + '/' + apidata.methodname;
    var Headers = apidata.header;
    if (!TYPE) {
      return { status: false, data: "TYPE Required Ex: GET/POST" }
    }
    if (!URL) {
      return { status: false, data: "URL Required" }
    }
    let params = {};
    let headers = {};
    if (Params) {
      params = Params;
    }
    if (Headers) {
      var dict = {};
      Headers.forEach(element => {
        let name = element['name'];
        dict[name] = element['value'];
        if (name.toUpperCase() == "AUTHORIZATION") {
          axios.defaults.headers.common['Authorization'] = element['value'];
        }
      });
      headers = dict;
    }
    // console.log(URL);
    // console.log(TYPE);
    // console.log(params);
    // console.log(Headers);

    if (TYPE.toUpperCase() === "GET") {
      var response = await axios.get(URL, { params: params }, { headers: headers });
      //console.log(response.data);
      response = GetFilterData(response.data, apidata.filterpath);
      State.state.datamodal.models[datamodelresponse] = response.data;
      State.setState({ datamodal: State.state.datamodal });
      //console.log(State.state.datamodal.models);
      //onsole.log(controlname, datamodalbinding);
      OreDatabinding.setDataModel(State, controlname, datamodalbinding);
      return { status: true, statuscode: response.status, data: response.data };
    }
    else if (TYPE.toUpperCase() === "POST") {
      var response = await axios.post(URL, params, { headers: headers });
      //console.log(datamodelresponse);
      response = GetFilterData(response.data, apidata.filterpath);
      State.state.datamodal.models[datamodelresponse] = response.data;
      State.setState({ datamodal: State.state.datamodal });
      OreDatabinding.setDataModel(State, controlname, datamodalbinding);
      return { status: true, statuscode: response.status, data: response.data };
    }
  },
  async RequestAPINew(State, objcode, mserialno) {
    //console.log("RequestAPINew call");   
    OreDatabinding.getValue(State);
    //console.log(State.state.datamodal.models);    
    var apidata = conndata.APIData.filter(function (item) { return item.objcode == objcode })[0];
    apidata = JSON.parse(apidata.propscrt);
    apidata = apidata.filter(function (item) { return item.mserialno == mserialno })[0];
    var datamodelresponse = GetDataModalData(apidata.responsedatamodel, State);
    //  console.log("1");
    //  console.log(apidata);
    //  console.log(datamodelresponse);
    var Params = GetParamData(apidata.requestjson, State);
    var TYPE = apidata.methodtype.toUpperCase();
    var URL = apidata.baseurl + '/' + apidata.methodname;
    var Headers = apidata.header;
    if (!TYPE) {
      return { status: false, data: "TYPE Required Ex: GET/POST" }
    }
    if (!URL) {
      return { status: false, data: "URL Required" }
    }
    let params = {};
    let headers = {};
    if (Params) {
      params = Params;
    }
    if (Headers) {
      var dict = {};
      Headers.forEach(element => {
        let name = element['name'];
        dict[name] = element['value'];
        if (name.toUpperCase() == "AUTHORIZATION") {
          axios.defaults.headers.common['Authorization'] = element['value'];
        }
      });
      headers = dict;
    }
    // console.log("========start=========");
    // console.log(URL);
    // console.log(TYPE);
    // console.log(params);
    // console.log(Headers);

    if (TYPE.toUpperCase() === "GET") {
      var response = await axios.get(URL, { params: params }, { headers: headers });
      //console.log(response.data);
      response = GetFilterData(response.data, apidata.filterpath);
      State.state.datamodal.models[datamodelresponse] = response.data;
      State.setState({ datamodal: State.state.datamodal });
      OreDatabinding.setValue(State);
      return { status: true, statuscode: response.status, data: response.data };
    }
    else if (TYPE.toUpperCase() === "POST") {
      var response = await axios.post(URL, params, { headers: headers });
      //console.log(response.data);
      response = GetFilterData(response.data, apidata.filterpath);
      State.state.datamodal.models[datamodelresponse] = response.data;
      State.setState({ datamodal: State.state.datamodal });
      //console.log(State);
      OreDatabinding.setValue(State);
      //console.log(State.state.datamodal.models[datamodelresponse]);
      return { status: true, statuscode: response.status, data: response.data };
    }
  }
};

const GetJSONData = (modelcode) => {
  var retdata = null;
  //console.log("start");  
    for (var element of conndata.JSONData) {
      if (!retdata) {
        for (var models of element.models) {
          if (models.modalcode == modelcode) {
            let filterpath = models.filterpath;
            //console.log(filterpath);
            const jsondata = JSON.parse(element.jsondata)
            if (filterpath) {
              let condata = ModelEngine.ConvertSelectedJson(jsondata, filterpath);
              console.log(filterpath + "=" + JSON.stringify(condata.data));
              if (condata.status) {
                retdata = condata.data;
                break;
              }
              else {
                retdata = null;
                console.log("GetJSONData: No Records found");
                break;
              }
            }
            else {
              retdata = jsondata;
              break;
            }
          }
        }
      }
      else break;
    }    
    return retdata;  
}

const GetDataModalData = (modelcode, State) => {
  var modelname = State.state.datamodal.objects[modelcode];
  return modelname;
}

const GetFilterData = (json, filter) => {
  if (typeof (json) == "object") {
    if (filter) {
      let lsfilter = filter.replace(/["']/g, "");
      var keys = lsfilter.split('.');
      for (var i in keys) {
        let val = keys[i];
        if (val != "") {
          if (val.charAt(val.length - 1) == "]") {
            let count = val.substring(
              val.lastIndexOf("[") + 1,
              val.lastIndexOf("]")
            );
            let lval = val.slice(0, val.lastIndexOf("["));
            json = json[lval][count];
          } else {
            json = json[val];
          }
        }
      }
    }
    return { data: json };
  }
  else {
    return { data: [] };
  }
}

const GetParamData = (requestjson, State) => {
  if (requestjson.length > 0) {
    var reqObj = {};
    requestjson.forEach(element => {
      var name = element.name;
      var datatype = element.datatype;
      if (element.source.toUpperCase() === "DATA MODAL") {
        var datamodal = GetDataModalData(element.datamodal, State);
        if (datatype.toUpperCase() == "STRING") {
          var value = State.state.datamodal.models[datamodal][element.fieldname];
        }
        else if (datatype.toUpperCase() == "NUMBER") {
          var value = Number(State.state.datamodal.models[datamodal][element.fieldname]);
        }
        else if (datatype.toUpperCase() == "BOOL") {
          var value = false;
          var lsvalue = State.state.datamodal.models[datamodal][element.fieldname];
          if (lsvalue === null || lsvalue === undefined || lsvalue === "") {
            value = null;
          }
          else if (lsvalue == true || lsvalue.toUpperCase() == "TRUE") {
            value = true;
          }
          else if (lsvalue == false || lsvalue.toUpperCase() == "FALSE") {
            value = false;
          }
        }
        else if (datatype.toUpperCase() == "OBJECT") {
          var value = {};
        }
        else if (datatype.toUpperCase() == "ARRAY") {
          var value = [];
        }
        else {
          var value = null;
        }
      }
      else if (element.source.toUpperCase() === "STATIC VALUE") {
        if (datatype.toUpperCase() == "STRING") {
          var value = element.value;
        }
        else if (datatype.toUpperCase() == "NUMBER") {
          var value = Number(element.value);
        }
        else if (datatype.toUpperCase() == "BOOL") {
          var value = false;
          var lsvalue = element.value;
          if (lsvalue === null || lsvalue === undefined || lsvalue === "") {
            value = null;
          }
          else if (lsvalue == true || lsvalue.toUpperCase() == "TRUE") {
            value = true;
          }
          else if (lsvalue == false || lsvalue.toUpperCase() == "FALSE") {
            value = false;
          }
        }
        else if (datatype.toUpperCase() == "OBJECT") {
          var value = {};
        }
        else if (datatype.toUpperCase() == "ARRAY") {
          var value = [];
        }
        else {
          var value = null;
        }
      }
      reqObj[name] = value;
    });
    //console.log(reqObj);
    return reqObj;
  }
  else {
    return {};
  }
}

// API formation and Request Data
const GetRequestData = async (Apidetails, stateValue) => {
  var Datasource = [];
  var apiurl = conndata.GetAPIBaseURL(Apidetails[0].apiurl);
  var apiformations = apiurl + Apidetails[0].methodname;
  var Requestparam = JSON.parse(Apidetails[0].request);
  var requparam = {};
  if (Requestparam.length) {
    for (let k = 0; k < Requestparam.length; k++) {
      if (Requestparam[k].datatype.toUpperCase() === "JSON") {
        let subjson = {};
        Requestparam[k].children.forEach(element => {
          var key = element['name'];
          var value = "";
          var reqsrc = element['apiReqsrc'];
          if (reqsrc == "staticvalue") {
            value = element['apiReqsamval'];
          }
          else if (reqsrc == "controls") {
            value = Orefuncs.GetValue(element['apiReqcontrol'], stateValue)
            if (!value) value = "";
          }
          var pair = { [key]: value };
          subjson = { ...subjson, ...pair };
        });
        requparam = { ...requparam, ...subjson };
      }
      else {
        if (Requestparam[k].apiReqsrc == "staticvalue") {
          var pair = { [Requestparam[k].name]: Requestparam[k].apiReqsamval };
          requparam = { ...requparam, ...pair };
        }
        else if (Requestparam[k].apiReqsrc == "controls") {
          var values = Orefuncs.GetValue(Requestparam[k].apiReqcontrol, stateValue)
          var pair = { [Requestparam[k].name]: values };
          requparam = { ...requparam, ...pair };
        }
      }
    }
  }

  let HEADERS = {};
  if (Apidetails[0].header) {
    var lsHeader = JSON.parse(Apidetails[0].header);
    var dict = {};
    lsHeader.forEach(element => {
      let name = element['name'];
      dict[name] = element['value'];
      if (name.toUpperCase() == "AUTHORIZATION") {
        axios.defaults.headers.common['Authorization'] = element['value'];
      }
    });
    HEADERS = dict;
  }
  if (Apidetails[0].methodtype.toUpperCase() === "GET") {
    const response = await axios.get(apiformations, { params: requparam }, { headers: HEADERS });
    Datasource = response.data;
  }
  else if (Apidetails[0].methodtype.toUpperCase() === "POST") {
    const response = await axios.post(apiformations, requparam, { headers: HEADERS });
    Datasource = response.data;
  }
  else {
    Datasource = [];
    alert("API Request method type not found. Ex: GET/POST");
  }
  //console.log(JSON.stringify(Datasource));
  return Datasource;
}

export default OreApibinding;