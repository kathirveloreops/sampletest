/*!
 * OreOPS Mobile library v1.0.0
 * (c) - http://oreops.com/
 * License:(http://oreops.com)
 * Created Date :04-03-2020
 */
import OreAlert from 'react-native-oreopsnew/components/OreAlert';
import RuleEngine from '../ruleengine/Ore_RuleEngine';
import { AsyncStorage, NativeModules, Alert, Linking, PermissionsAndroid, Share } from 'react-native';
import { getUniqueId, getInstanceId, getInstanceIdSync, getSerialNumber, getSerialNumberSync, getAndroidId, getAndroidIdSync, getIpAddress, getDeviceId, getModel, getBrand, getSystemName, getDeviceName } from 'react-native-device-info';
import Geolocation from '@react-native-community/geolocation';
import email from 'react-native-email';
import axios from 'axios';
import SyncStorage from 'sync-storage';
import ImgToBase64 from 'react-native-image-base64';
import Moment from 'moment';
import { NavigationActions, StackActions } from 'react-navigation';
import Snackbar from 'react-native-snackbar';
// Finding Network Status 
import NetInfo from "@react-native-community/netinfo";
import RNFetchBlob from 'rn-fetch-blob';
global.internetStatus = false;
const unsubscribe = NetInfo.addEventListener(state => {
  global.internetStatus = state.isConnected;
});

let OreMessage = require('../../../../../validation/Ore_Message.json');
//import globalVal from '../global.js';
//import SendSMS from 'react-native-sms';

//Global name from IDE for each controls
const OreControlType = {
  OreTextBox: "Textarea",
  OreButton: "Button",
  OreCheckBox: "checkbox",
  OreSwitch: "switch",
  OreDatePicker: "date",
  OreText: "h1",
  OreHeader: "Header",
  OreFooter: "",
  OreImage: "IMG",
  OreIcon: "icon",
  OreRadioButton: "radio",
  OreListview: "",
  OreCardView: "",
  OrePicker: "Picker",
  OreAlert: "",
  OreFilePicker: "FilePicker",
  OreDrawer: "",
  OreQrCode: "qrcode",
  OreMap: "map",
  OreVideo: "video",
  OreHtml: "htmlviewer",
}

//Global Methods 
const Orefuncs = {
  //nanoflow calls from pages
  callnanoflow(objcode, stateval, nanojson) {
    stateval.setState({ spinner: true })
    //var reqStr = objcode.slice(objcode.indexOf('(') + 1, objcode.indexOf(')'));
    var reqStr = objcode;
    window.isforloop = "N";
    var reqObj = reqStr.split('_');
    var data = nanojson.filter(function (item) {
      return item.microcode == reqObj[1];
    })
    /*data.filter(function (item) {
      RuleEngine(item.conditions, item.actions, stateval.state, stateval)
    })*/
    window.lengthnano = data.length;
    window.i = 0;
    //data.filter(function (item) {
    let promiseArr = data.filter(function (item) {
      var s = [];
      var fr = [];
      if (item.hasOwnProperty("elseactions"))
        s = item.elseactions;
      if (item.hasOwnProperty("forloopaction"))
        fr = item.forloopaction;
      if (item.hasOwnProperty('activeStatus')) {
        if (item.activeStatus == 1) {
          RuleEngine(item.conditions, item.actions, stateval.state, stateval, s, fr)
        }
      }
      else
        RuleEngine(item.conditions, item.actions, stateval.state, stateval, s, fr)
      // RuleEngine(item.conditions, item.actions, stateval.state, stateval, s, fr)
    })
    // return the promise to array
    Promise.all(promiseArr).then(function (resultsArray) {
      setTimeout(() => {
        stateval.setState({ spinner: false })
      }, 50);
      // do something after the loop finishes
    }).catch(function (err) {
      //TODO
    })
  },

  // Control Validation Method
  Validate(lsvalidationtype, ctrlname, code, stateval) {
    var isvalid = true;
    if (lsvalidationtype == "form") {
      var currentstates = stateval.state;
      var _screenStyle = stateval.StyleJSON;
      var tifOptions = Object.keys(_screenStyle).map(function (key) {
        if (_screenStyle[key] != undefined && isvalid == true) {
          if (key != "APIJSON" && key != "CONNECTORJSON") {
            var lsctrlname = _screenStyle[key].Default.txtctrlname;
            try {
              var code = _screenStyle[key].style.valMsgCode;
            } catch {
              var code = _screenStyle[key].styles.valMsgCode;
            }
            if (code == "" || code == undefined)
              return false;
            var lscode = code.split(",");
            for (var k = 0; k <= lscode.length - 1; k++) {
              if (isvalid == false)
                break;
              for (var i = 0; i <= OreMessage.length - 1; i++) {
                var controlValues = Orefuncs.GetValue(lsctrlname, currentstates)
                if (OreMessage[i].expcode == lscode[k]) {
                  var lsmatchregx = OreMessage[i].exprsion;
                  var regex = new RegExp(lsmatchregx);
                  if (!regex.test(controlValues)) {
                    var lsmsg = OreMessage[i].expmsg;
                    Snackbar.show({
                      text: lsmsg,
                      textColor: "#ffffff",
                      duration: Snackbar.LENGTH_INDEFINITE,
                      rtl: false,
                      action: {
                        text: 'OK',
                        textColor: '#f7cd00',
                        onPress: () => { },
                      },
                      backgroundColor: "#323232",
                    });
                    isvalid = false;
                    break;
                  }
                  else {
                    isvalid = true;
                    break;
                  }
                }
              }
            }
          }
        }
      });
    }
    else {
      var currentstate = stateval.state;
      var controlValue = this.GetValue(ctrlname, currentstate)
      code = code.split(",");
      for (var k = 0; k <= code.length - 1; k++) {
        if (isvalid == false)
          break;
        for (var i = 0; i <= OreMessage.length - 1; i++) {
          if (OreMessage[i].expcode == code[k]) {
            var lsmatchregx = OreMessage[i].exprsion;
            var regex = new RegExp(lsmatchregx);
            if (!regex.test(controlValue)) {
              var lsmsg = OreMessage[i].expmsg;
              Snackbar.show({
                text: lsmsg,
                textColor: "#ffffff",
                duration: Snackbar.LENGTH_INDEFINITE,
                rtl: false,
                action: {
                  text: 'OK',
                  textColor: '#f7cd00',
                  onPress: () => { },
                },
                backgroundColor: "#323232",
              });
              isvalid = false
              break;
            }
            else {
              isvalid = true;
              break;
            }
          }
        }
      }
    }
    return isvalid;
  },

  // CallBack Method
  Runcallback(data, activestate, gractivepage) {
    data.filter(function (item) {
      var s = []
      if (item.hasOwnProperty("elseactions"))
        s = item.elseactions;
      if (item.hasOwnProperty('activeStatus')) {
        if (item.activeStatus == 1) {
          RuleEngine(item.conditions, item.actions, activestate, gractivepage, s)
        }
      }
      else
        RuleEngine(item.conditions, item.actions, activestate, gractivepage, s)

    })
  },

  //Setting Screen Style for a page 
  SetScreenStyle(ScreenName, ScreenStyle) {
    try {
      window[ScreenName].setState({ StyleJSON: ScreenStyle });
    } catch (e) {
      OreAlert.alert(e + "in Method:SetStyle ControlName:" + controlName + "");
    }
  },

  //Setting Style property for controls during runtime
  SetStyle(controlName, stateValue, newStyle) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreTextBox: case OreControlType.OreImage:
            case OreControlType.OreIcon: case OreControlType.OreSwitch:
              var _controlStylestyles = _controlStyle['styles'];
              var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
              _controlStyle['styles'] = _updatedStyle;
              this.SetScreenStyle(stateValue.pagename, _screenStyle);
              break;
            case OreControlType.OrePicker:
              var _controlStylestyles = _controlStyle['style'];
              var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
              _controlStyle['style'] = _updatedStyle;
              this.SetScreenStyle(stateValue.pagename, _screenStyle);
              break;
            case OreControlType.OreButton: case OreControlType.OreCheckBox:
              var _stringifyNewStyle = JSON.stringify(newStyle);
              var _parseNewStyle = JSON.parse(_stringifyNewStyle);
              for (var key in _parseNewStyle) {
                if (key == "color" || key == "fontSize" || key == "fontFamily" || key == "fontWeight") {
                  var _controlStylestyles = _controlStyle['textstyle'];
                  var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
                  _controlStyle['textstyle'] = _updatedStyle;
                  this.SetScreenStyle(stateValue.pagename, _screenStyle);
                }
                else {
                  var _controlStylestyles = _controlStyle['styles'];
                  var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
                  _controlStyle['styles'] = _updatedStyle;
                  this.SetScreenStyle(stateValue.pagename, _screenStyle);
                }
              }
              break;
            case OreControlType.OreRadioButton:
              var _stringifyNewStyle = JSON.stringify(newStyle);
              var _parseNewStyle = JSON.parse(_stringifyNewStyle);
              for (var key in _parseNewStyle) {
                if (key == "color" || key == "fontSize" || key == "fontFamily" || key == "fontWeight") {
                  var _controlStylestyles = _controlStyle['textStyle'];
                  var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
                  _controlStyle['textStyle'] = _updatedStyle;
                  this.SetScreenStyle(stateValue.pagename, _screenStyle);
                }
                else {
                  var _controlStylestyles = _controlStyle['viewStyle'];
                  var _updatedStyle = Object.assign({}, _controlStylestyles, newStyle);
                  _controlStyle['viewStyle'] = _updatedStyle;
                  this.SetScreenStyle(stateValue.pagename, _screenStyle);
                }
              }
              break;
          }

        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetStyle ControlName:" + controlName + "");
    }
  },

  // Getting Style value from particular control
  GetStyle(controlName, stateValue, styleName) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lsreturnText;
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreTextBox: case OreControlType.OreImage:
            case OreControlType.OreIcon: case OreControlType.OreSwitch:
              lsreturnText = _controlStyle['styles'][styleName];
              break;
            case OreControlType.OrePicker:
              lsreturnText = _controlStyle['style'][styleName];
              break;
            case OreControlType.OreButton: case OreControlType.OreCheckBox:
              if (styleName == "color" || styleName == "fontSize" || styleName == "fontFamily" || styleName == "fontWeight") {
                lsreturnText = _controlStyle['textstyle'][styleName];
              }
              else {
                lsreturnText = _controlStyle['styles'][styleName];
              }
              break;
            case OreControlType.OreRadioButton:
              if (styleName == "color" || styleName == "fontSize" || styleName == "fontFamily" || styleName == "fontWeight") {
                lsreturnText = _controlStyle['textStyle'][styleName];
              }
              else {
                lsreturnText = _controlStyle['viewStyle'][styleName];
              }
              break;
          }
          return lsreturnText;
        }
      }
      else {
        OreAlert.alert("Control Name " + controlName + " not Found");
      }
    }
    catch (e) {
      OreAlert.alert(e + " in Method:GetStyle ControlName:" + controlName + "");
    }
  },

  // Getting Text Value from particular control
  GetText(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lsreturnText;
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton:
              lsreturnText = _controlStyle['Default']['txtctrlcaption'];
              return lsreturnText;
            case OreControlType.OreTextBox:
              lsreturnText = _controlStyle['Property']['value'];
              return lsreturnText;
            case OreControlType.OreRadioButton:
              var _val = _controlStyle['Property']['selected'];
              var _nameJson = _controlStyle['Property']['name'];
              var _filteredData = _nameJson.filter(function (item) { return item.value == _val })
              var _filStringifyData = JSON.stringify(_filteredData);
              var _filParsedData = JSON.parse(_filStringifyData)[0].name
              return _filParsedData;
            case OreControlType.OrePicker:
              var _val = _controlStyle['Property']['selected'];
              var _nameJson = _controlStyle['Property']['name'];
              var a = _controlStyle['Property']['valuefield'];
              var b = _controlStyle['Property']['namefield'];
              var _filteredData = _nameJson.filter(function (item) { return item[a] == _val })
              var _filStringifyData = JSON.stringify(_filteredData);
              var _filParsedData = JSON.parse(_filStringifyData)[0][b]
              return _filParsedData;
          }
        }
        else {
          alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:GetText ControlName:" + controlName + "");
    }
  },

  // Setting Text for the particular control
  SetText(controlName, stateValue, editingText) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var editingText;
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton:
              var lspropertyStyle = _controlStyle['Default'];
              editingText = { 'txtctrlcaption': editingText.toString() };
              break;
            case OreControlType.OreTextBox:
              var lspropertyStyle = _controlStyle['Property'];
              editingText = { 'value': editingText };
              break;
            case OreControlType.OreRadioButton:
              var lspropertyStyle = _controlStyle['Property'];
              editingText = { 'namefield': editingText };
              break;
          }
          var _updatedStyle;
          _updatedStyle = Object.assign({}, lspropertyStyle, editingText);
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton:
              _controlStyle['Default'] = _updatedStyle;
              break;
            case OreControlType.OreTextBox: case OreControlType.OreRadioButton:
              _controlStyle['Property'] = _updatedStyle;
              break;
          }
          this.SetScreenStyle(stateValue.pagename, _screenStyle)
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  },


  // Disable the particular control
  SetDisable(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlpropertystyle = _controlStyle['Property'];
          var _updatedStyle = Object.assign({}, _controlpropertystyle, { "disabled": true });
          _controlStyle['Property'] = _updatedStyle;
          this.SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetDisable ControlName:" + controlName + "");
    }
  },

  // Enabling the Particular Control
  SetEnable(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlpropertystyle = _controlStyle['Property'];
          var _updatedStyle = Object.assign({}, _controlpropertystyle, { "disabled": false });
          _controlStyle['Property'] = _updatedStyle;
          this.SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + " in Method:SetEnable ControlName:" + controlName);
    }
  },

  // Setting Property value for each control properties
  SetProperty(controlName, stateValue, editingProperty) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlpropertystyle = _controlStyle['Property'];
          var _updatedStyle;
          _updatedStyle = Object.assign({}, _controlpropertystyle, editingProperty);
          _controlStyle['Property'] = _updatedStyle;
          if (controlName != "Page_Drawer") {
            this.SetScreenStyle(stateValue.pagename, _screenStyle);
          }
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetProperty ControlName:" + controlName + "");
    }
  },

  //Getting Property value for each control 
  GetProperty(controlName, stateValue, propertyName) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          if (propertyName != "" && propertyName != undefined) {
            var _controlpropertystyle = _controlStyle['Property'][propertyName];
          }
          else {
            var _controlpropertystyle = _controlStyle['Property'];
          }
          return JSON.stringify(_controlpropertystyle);
        }
      }
      else {
        OreAlert.alert("Control Name " + controlName + " not Found");
      }
    }
    catch (e) {
      alert(e + " in Method:GetProperty ControlName:" + controlName + "");
    }
  },

  //Getting Value form each control
  GetValue(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lsreturnText;
          switch (_controlStyle.type) {
            case OreControlType.OreTextBox:
              lsreturnText = _controlStyle['Property']['value'];
              return lsreturnText;
            case OreControlType.OreCheckBox:
              lsreturnText = _controlStyle['Property']['selectItem'];
              return lsreturnText;
            case OreControlType.OreRadioButton:
              lsreturnText = _controlStyle['Property']['selected'];
              return lsreturnText;
            case OreControlType.OreSwitch:
              lsreturnText = _controlStyle['Property']['Value'];
              return lsreturnText;
            case OreControlType.OreDatePicker:
              lsreturnText = _controlStyle['Property']['defaultValue'];
              return lsreturnText;
            case OreControlType.OrePicker:
              lsreturnText = _controlStyle['Property']['selected'];
              return lsreturnText;
            case OreControlType.OreText: case OreControlType.OreButton:
              lsreturnText = _controlStyle['Default']['txtctrlcaption'];
              return lsreturnText;
            case OreControlType.OreQrCode:
              lsreturnText = _controlStyle['Property']['value'];
              return lsreturnText;
            case OreControlType.OreHtml:
              lsreturnText = _controlStyle['Property']['HTMLValue'];
              return lsreturnText;
            case OreControlType.OreImage: case OreControlType.OreVideo:
              lsreturnText = _controlStyle['Property']['source'];
              return lsreturnText;
            case OreControlType.OreMap:
              lsreturnText = _controlStyle['Property']['latitude'] + "," + _controlStyle['Property']['longitude'];
              return lsreturnText;
            case OreControlType.OreHeader:
              lsreturnText = _controlStyle['Property']['title'];
              return lsreturnText;
            case OreControlType.OreFilePicker:
              lsreturnText = _controlStyle['Property']['source'];
              return lsreturnText;
          }
        }
        else {
          alert("Control Name " + controlName + " not Found")
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:GetText ControlName:" + controlName + "");
    }
  },

  //Setting value for each control
  SetValue(controlName, stateValue, editingvalue, editingvalue1) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lspropertyStyle;
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton:
              lspropertyStyle = _controlStyle['Default'];
              break;
            default:
              lspropertyStyle = _controlStyle['Property'];
          }
          var editingvalue;
          switch (_controlStyle.type) {
            case OreControlType.OreTextBox:
              if (editingvalue != "" && editingvalue != undefined) {
                editingvalue = editingvalue.toString();
              }
              editingvalue = { 'value': editingvalue };
              break;
            case OreControlType.OreCheckBox:
              if (typeof (editingvalue) == "string") {
                editingvalue = editingvalue == "true";
              }
              editingvalue = { 'selectItem': editingvalue };
              break;
            case OreControlType.OreRadioButton:
              editingvalue = { 'selected': editingvalue };
              break;
            case OreControlType.OreSwitch:
              if (typeof (editingvalue) == "string") {
                editingvalue = editingvalue == "true";
              }
              editingvalue = { 'Value': editingvalue };
              break;
            case OreControlType.OreDatePicker:
              editingvalue = { 'defaultValue': editingvalue };
              break;
            case OreControlType.OrePicker:
              editingvalue = { 'selected': editingvalue };
              break;
            case OreControlType.OreText: case OreControlType.OreButton:
              editingvalue = { 'txtctrlcaption': editingvalue.toString() };
              break;
            case OreControlType.OreQrCode:
              editingvalue = { 'value': editingvalue };
              break;
            case OreControlType.OreHtml:
              editingvalue = { 'HTMLValue': editingvalue };
              break;
            case OreControlType.OreImage: case OreControlType.OreVideo:
              editingvalue = { 'source': editingvalue };
              break;
            case OreControlType.OreMap:
              if (typeof (editingvalue) == "string") {
                editingvalue = parseFloat(editingvalue);
                editingvalue1 = parseFloat(editingvalue1);
              }
              editingvalue = { 'latitude': editingvalue, 'longitude': editingvalue1 };
              break;
            case OreControlType.OreHeader:
              editingvalue = { 'title': editingvalue };
              break;
            case OreControlType.OreFilePicker:
              editingvalue = { 'source': editingvalue };
              break;
          }
          var _updatedStyle;
          _updatedStyle = Object.assign({}, lspropertyStyle, editingvalue);
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton:
              _controlStyle['Default'] = _updatedStyle;
              break;
            default:
              _controlStyle['Property'] = _updatedStyle;
          }
          this.SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  },

  // Setting control Hide during runtime
  SetHide(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        var _styleName;
        if (_controlStyle) {
          var lscontrolStyle;
          var editingStyle;
          switch (_controlStyle.type) {
            case OreControlType.OreText:
            case OreControlType.OreButton:
            case OreControlType.OreImage:
            case OreControlType.OreSwitch:
              _styleName = "styles";
              break;
            case OreControlType.OreDatePicker:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "styles";
              }
              else {
                var lscontrolStyle1 = _controlStyle['styles'];
                var editingStyle1 = { 'display': "none" };
                _controlStyle['styles'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textStyle'];
                var editingStyle2 = { 'display': "none" };
                _controlStyle['textStyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "viewStyle";
              }
              break;
            case OreControlType.OreRadioButton: case OreControlType.OreFilePicker:
              _styleName = "viewStyle";
              break;
            case OreControlType.OrePicker:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "style";
              }
              else {
                var lscontrolStyle1 = _controlStyle['style'];
                var editingStyle1 = { 'display': "none" };
                _controlStyle['style'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textStyle'];
                var editingStyle2 = { 'display': "none" };
                _controlStyle['textStyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "viewStyle";
              }
              break;
            case OreControlType.OreTextBox:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "styles";
              }
              else {
                var lscontrolStyle1 = _controlStyle['styles'];
                var editingStyle1 = { 'display': "none" };
                _controlStyle['styles'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textstyle'];
                var editingStyle2 = { 'display': "none" };
                _controlStyle['textstyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "viewstyle";
              }
              break;
          }
          lscontrolStyle = _controlStyle[_styleName];
          editingStyle = { 'display': "none", position: "relative" };
          _controlStyle[_styleName] = Object.assign({}, lscontrolStyle, editingStyle);
          this.SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  },

  // Setting visible for hided controls during runtime
  SetVisible(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        var _styleName;
        if (_controlStyle) {
          switch (_controlStyle.type) {
            case OreControlType.OreText:
            case OreControlType.OreButton:
            case OreControlType.OreImage:
            case OreControlType.OreSwitch:
              _styleName = "styles";
              break;
            case OreControlType.OreDatePicker:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "styles";
              }
              else {
                var lscontrolStyle1 = _controlStyle['viewStyle'];
                var editingStyle1 = { 'display': "flex" };
                _controlStyle['viewStyle'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textStyle'];
                var editingStyle2 = { 'display': "flex" };
                _controlStyle['textStyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "styles";
              }
              break;
            case OreControlType.OreRadioButton: case OreControlType.OreFilePicker:
              _styleName = "viewStyle";
              break;
            case OreControlType.OrePicker:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "style";
              }
              else {
                var lscontrolStyle1 = _controlStyle['viewStyle'];
                var editingStyle1 = { 'display': "flex" };
                _controlStyle['viewStyle'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textStyle'];
                var editingStyle2 = { 'display': "flex" };
                _controlStyle['textStyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "style";
              }
              break;
            case OreControlType.OreTextBox:
              if (_controlStyle['title'] == '' || _controlStyle['title'] == undefined || _controlStyle['title'] == 'undefined') {
                _styleName = "styles";
              }
              else {
                var lscontrolStyle1 = _controlStyle['styles'];
                var editingStyle1 = { 'display': "flex" };
                _controlStyle['styles'] = Object.assign({}, lscontrolStyle1, editingStyle1);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                var lscontrolStyle2 = _controlStyle['textstyle'];
                var editingStyle2 = { 'display': "flex" };
                _controlStyle['textstyle'] = Object.assign({}, lscontrolStyle2, editingStyle2);
                this.SetScreenStyle(stateValue.pagename, _screenStyle);
                _styleName = "viewstyle";
              }
              break;
          }
          var lscontrolStyle = _controlStyle[_styleName];
          var editingStyle = { 'display': "flex", position: "absolute" };
          _controlStyle[_styleName] = Object.assign({}, lscontrolStyle, editingStyle);
          this.SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  },

  // Getting Config Values from AppConfig file
  GetConfigValues(key) {
    try {
      var _appConfigJson = require('../Ore_AppConfig.json');
      var _retvalue;
      if (_appConfigJson[key] == undefined || _appConfigJson[key] == "undefined" || _appConfigJson[key] == "") {
        _retvalue = "Key not exists in AppConfig";
      }
      else {
        _retvalue = _appConfigJson[key];
      }
      return _retvalue;
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Navigating fro one page to anoter and also you can pass parameters to next page
  NavigateTo(probsName, pageName, pageParm) {
    try {
      if (pageParm != '' && pageParm != undefined) {
        const { navigate } = probsName;
        navigate(pageName, { 'paravalue': pageParm });
      } else {
        const { navigate } = probsName;
        navigate(pageName)
      }
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Parameter values can be taken form previous page if user declared
  GetParmValue(propsName) {
    try {
      return propsName['paravalue']
    }
    catch (e) {
      OreAlert.alert(e)
    }
  },

  // Removing key values from local storage
  RemoveLocalStorage(key) {
    try {
      SyncStorage.remove(key);
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Getting overall local storage form device
  GetLocalStoragekeys() {
    try {
      const lskeys = SyncStorage.getAllKeys();
      return lskeys;
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Clearing overall local storage values from device
  ClearLocalStorage() {
    try {
      const lskeys = SyncStorage.getAllKeys();
      for (var key in lskeys) {
        Orefuncs.RemoveLocalStorage(lskeys[key]);
      }
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Navigate back to previous page
  NavigateBack(probsName) {
    try {
      const navigate = probsName;
      navigate.goBack();
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Navigating back from footer page to previous page
  FooterNavigateBack(probsName) {
    try {
      const navigate = probsName;
      navigate.dispatch(NavigationActions.back())
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Setting Local Storage values
  SetLocalStorage(key, value) {
    try {
      SyncStorage.set(key, value);
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Getting particular key value from local storage
  GetLocalStorage(key) {
    try {
      let _retvalue = SyncStorage.get(key);
      return _retvalue;
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Getting device information like device id, brand etc...
  GetDeviceInfo(key) {
    try {
      var _retValue;
      if (key == "Device_UniqueID") {
        _retValue = getUniqueId();
      }
      else if (key == "Device_ID") {
        _retValue = getDeviceId();
      }
      else if (key == "Device_Model") {
        _retValue = getModel();
      }
      else if (key == "Device_Brand") {
        _retValue = getBrand();
      }
      else if (key == "Device_Type") {
        _retValue = getSystemName();
      }
      if (_retValue == "" || _retValue == undefined) {
        alert("Key not Exists");
        return;
      }
      return _retValue;
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Getting current location from device
  GetGeolocation(options) {
    return new Promise(function (resolve, reject) {
      Geolocation.getCurrentPosition(resolve, reject, options);
    });
  },

  //Generating Random numbers
  RandomNumber(length, chars, prefix) {
    if (prefix == '' || prefix == undefined || prefix == null) {
      var mask = '';
      if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
      if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      if (chars.indexOf('#') > -1) mask += '0123456789';
      if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
      var result = '';
      for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
      return result;
    } else {
      var mask = '';
      if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
      if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      if (chars.indexOf('#') > -1) mask += '0123456789';
      if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
      var result = '';
      for (var i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
      var random = result;
      return prefix + random
    }
  },

  // Focus the particular control
  SetFocus(key) {
    try {
      key.focus();
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Sending email from device
  SendEmail(toMail, mailSubject, mailBody) {
    try {
      const to = [toMail];
      email(to, {
        subject: mailSubject,
        body: mailBody
      })
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Page Refresh Method
  SetRefresh(probsName, pageName) {
    try {
      probsName(pageName)
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Sending Whatsapp method locally
  SendWhatsapp(mobileNo, sendingMsg) {
    try {
      if (mobileNo) {
        if (sendingMsg) {
          let url = 'whatsapp://send?text=' + sendingMsg + '&phone=' + mobileNo;
          Linking.openURL(url).then((data) => {
          }).catch(() => {
            OreAlert.alert('Make sure Whatsapp installed on your device');
          });
        } else {
          OreAlert.alert('Empty Message');
        }
      } else {
        OreAlert.alert('Empty MobileNo');
      }
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  // Generating OTP number
  OTP() {
    var add = 1, max = 12 - add, n = 6;
    if (n > max) {
      return OTP(max) + OTP(n - max);
    }
    max = Math.pow(10, n + add);
    var min = max / 10;
    var number = Math.floor(Math.random() * (max - min + 1)) + min;
    return ("" + number).substring(add);
  },

  //Setting Datasource Method
  SetDataSource(contrlid, data, ScreenName) {
    console.log(data);
    window[ScreenName].setState({ StyleJSON: data });
  },

  // Binding datasource to listview
  orelistbind(contrlid, Datasource, stateValue) {
    var _screenStyle = stateValue.StyleJSON;
    var _controlStyle = _screenStyle[contrlid];
    if (_controlStyle) {
      var datafields = _controlStyle['Property']['datafield'];
      if (datafields != "") {
        var currentdataarry = datafields.split("#");
        _controlStyle['Property']['imageField'] = currentdataarry[1];
        _controlStyle['Property']['heading'] = currentdataarry[2];
        _controlStyle['Property']['content'] = currentdataarry[3];
        _controlStyle['Property']['rightHeading'] = currentdataarry[4];
        _controlStyle['Property']['data'] = Datasource;
      }
      this.SetDataSource(contrlid, _screenStyle, stateValue.pagename);
    }
  },

  // Converting image to base64
  Imagetobase64(controlid, imageurl) {
    ImgToBase64.getBase64String(imageurl).then(base64String => { Orefuncs.SetProperty(controlid, this.state, { "source": 'data:image/png;base64,' + base64String }); }).catch(err => alert(err));
  },

  // Open Drawer event from control click
  OpenDrawer(probsName) {
    try {
      probsName.openDrawer()
    }
    catch (e) {
      OreAlert.alert(e);
    }
  },

  //Setting Current Date for date picker
  SetDate(stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      var _pageJson = stateValue.StyleJSON
      var _pageJsonStringifyData = JSON.stringify(_pageJson);
      var _pageJsonParsedData = JSON.parse(_pageJsonStringifyData);
      for (var _controlName in _pageJsonParsedData) {
        var _controlType = this.GetControlType(_controlName, stateValue);
        var editingvalue;
        var servervalue;
        switch (_controlType) {
          case OreControlType.OreDatePicker:
            if (_pageJson[_controlName]["Property"]["iscurrentdate"] == true || _pageJson[_controlName]["Property"]["iscurrentdatetime"] == true || _pageJson[_controlName]["Property"]["iscurrenttime"] == true) {
              editingvalue = { "defaultValue": JSON.parse(Moment(new Date()).format(this.GetProperty(_controlName, stateValue, "format"))) };
              servervalue = { "serverValue": JSON.parse(Moment(new Date()).format(this.GetProperty(_controlName, stateValue, "serverFormat"))) };
              if (_controlName != "") {
                var _screenStyle = stateValue.StyleJSON;
                var _controlStyle = _screenStyle[_controlName];
                if (_controlStyle) {
                  var _controlpropertystyle = _controlStyle['Property'];
                  var _updatedStyle;
                  _updatedStyle = Object.assign({}, _controlpropertystyle, editingvalue);
                  _controlStyle['Property'] = _updatedStyle;
                }
              }
            }
            break;
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetDate ControlName:" + _controlName + "");
    }
  },


  // Getting control type form page
  GetControlType(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlType = _controlStyle.type;
          return _controlType;
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:GetControlType ControlName:" + controlName + "");
    }
  },

  // Getting network status from device
  isNetworkAvailable() {
    return global.internetStatus;
  },

  // Refreshing Page Style JSON
  ResetPageState(stateval) {
    stateval.setState({ StyleJSON: stateval.state.StyleJSON });
  },

  // Resetting page while navigating
  NavigatewithResetpage(probsName, pageName, pageParm) {
    if (pageParm != '' && pageParm != undefined) {
      const resetAction = StackActions.reset({
        index: 0,
        actions: [NavigationActions.navigate({ routeName: pageName }), { 'paravalue': pageParm }],
      });
      probsName.dispatch(resetAction)
    } else {
      const resetAction = StackActions.reset({
        index: 0,
        actions: [NavigationActions.navigate({ routeName: pageName })],
      });
      probsName.dispatch(resetAction)
    }
  },

  // Changing Date Format
  getDateFormat(inputdate, inputFormat, outputFormat) {
    try {
      return Moment(inputdate, inputFormat).format(outputFormat)
    } catch (e) {
      OreAlert.alert("Please check the date convertion input");
    }
  },

  // Date format conversion by getting input value from date picker control
  getDateFormatbyControl(controlid, stateValue, outputFormat) {
    try {
      var inputdate = Orefuncs.GetValue(controlid, stateValue)
      var inputFormat = Orefuncs.GetProperty(controlid, stateValue, "format")
      return Moment(inputdate, inputFormat).format(outputFormat)
    } catch (e) {
      OreAlert.alert("Please check the date convertion input");
    }
  },

  // Drawer Data Binding for Image,Heading,Content and List 
  OreDrawerBind(stateval, data, nameField, routeField, iconField) {
    try {
      if (stateval != undefined && stateval != "undefined" && stateval != "null" && stateval != null) {
        var StyleJSON = stateval.StyleJSON[stateval.pagename]
        StyleJSON['data'] = data
        StyleJSON['nameField'] = nameField
        StyleJSON['routeField'] = routeField
        StyleJSON['iconField'] = iconField
      }

    }
    catch (e) {
      OreAlert.alert(e + "in Method:OreDrawerBind");
    }
  },

  // Drawer Data Binding for Image,Heading,Content 
  OreDrawerBindHeader(stateval, image, heading, content) {
    try {
      if (stateval != undefined && stateval != "undefined" && stateval != "null" && stateval != null) {
        var StyleJSON = stateval.StyleJSON[stateval.pagename]["headerData"]
        StyleJSON['image'] = image
        StyleJSON['heading'] = heading
        StyleJSON['content'] = content
      }

    }
    catch (e) {
      OreAlert.alert(e + "in Method:OreDrawerBind");
    }
  },

  // Video play next video in perticular control
  playNext(stateval, controlName) {
    try {
      if (stateval != undefined && stateval != "undefined" && stateval != "null" && stateval != null) {
        var data = this.GetProperty(controlName, stateval.state, "data")
        var position = this.GetProperty(controlName, stateval.state, "position")
        if (data && position && position != data.length - 1) {
          stateval.state.StyleJSON[controlName]['Property']['position'] = Number(position) + 1;
          stateval.setState({ StyleJSON: stateval.state.StyleJSON });
        } else {
          stateval.state.StyleJSON[controlName]['Property']['position'] = 0;
          stateval.setState({ StyleJSON: stateval.state.StyleJSON });
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:OreDrawerBind");
    }
  },


  // Video play previous video in perticular control
  playPrevious(stateval, controlName) {
    try {
      if (stateval != undefined && stateval != "undefined" && stateval != "null" && stateval != null) {
        var data = this.GetProperty(controlName, stateval.state, "data")
        var position = this.GetProperty(controlName, stateval.state, "position")
        if (data && position && position != 0) {
          stateval.state.StyleJSON[controlName]['Property']['position'] = Number(position) - 1;
          stateval.setState({ StyleJSON: stateval.state.StyleJSON });
        } else {
          stateval.state.StyleJSON[controlName]['Property']['position'] = 0;
          stateval.setState({ StyleJSON: stateval.state.StyleJSON });
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:OreDrawerBind");
    }
  },

  // Currency Type Symbol for Listview 

  OreGetCurrencyType(code) {
    var currencyType = [{
      "name": "ruppee",
      "code": "INR",
      "symbol": "\u20B9"
    }, {
      "name": "dollar",
      "code": "USD",
      "symbol": "\u0024"
    }]

    let carts = [];
    for (let i = 0; i < currencyType.length; i++) {
      if (currencyType[i].code == code) {
        carts.push(currencyType[i]);
      }
    }
    if (carts != undefined && carts != '' && carts != []) {
      return carts[0].symbol
    }
    else {
      return currencyType[0].symbol
    }

  },

  //Method for share text to relevent apps
  shardInfo(info) {
    try {
      Share.share({
        message: info,
      }, {
      })
    } catch (e) {
      OreAlert.alert(e + "in Method:shardInfo");
      console.warn(e);
    }
  },

  //Method for downloading apk file using Reference Link (URL)
  async downloadFile(reflink, title) {
    try {
      const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE);
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        this.actualDownload(reflink, title);
      } else {
        Alert.alert('Permission Denied!', 'You need to give storage permission to download the file');
      }
    } catch (e) {
      OreAlert.alert(e + "in Method:downloadFile");
      console.warn(e);
    }
  },

  //Internal Method for downloading apk file
  actualDownload(reflink, tit) {
    const { dirs } = RNFetchBlob.fs;
    //if (tit == "" || tit == undefined || tit == "undefined") {
    RNFetchBlob.config({
      fileCache: true,
      addAndroidDownloads: {
        useDownloadManager: true,
        notification: true,
        mediaScannable: true,
        //title: `test.apk`,
        //path: `${dirs.DownloadDir}/test.apk`,
        title: tit ? tit + ".apk" : reflink + ".apk",
        //path: `${dirs.DownloadDir}/test.apk`,
        path: `${dirs.DownloadDir}/` + (tit ? tit + ".apk" : reflink + ".apk"),
      },
    })
      .fetch('GET', reflink, {})
      .then((res) => {
        console.log('The file saved to ', res.path());
      })
      .catch((e) => {
        OreAlert.alert(e + "in Method:downloadFile");
        console.log(e)
      });
  },

  //Sending local sms from mobile
  // SendSMS(mobileNo, sms) {
  //   try {
  //     SendSMS.send({
  //       body: sms,
  //       recipients: [mobileNo],
  //       successTypes: ['sent', 'queued']
  //     }, (completed, cancelled, error) => {
  //       if (completed) {
  //         alert('SMS Sent Successfully.')
  //       } else if (cancelled) {
  //         alert('SMS Sent Cancelled.');
  //       } else if (error) {
  //         alert('Some error occured.');
  //       }
  //     });

  //   }
  //   catch (e) {
  //     OreAlert.alert(e);
  //   }
  // },

  // // Getting global declared values
  // GetGlobalValues(key) {
  //   try {
  //     var _globalValue = globalVal[key];
  //     var _retvalue;
  //     if (_globalValue == undefined || _globalValue == "undefined" || _globalValue == "") {
  //       _retvalue = "Key does not Exist";       }
  //     else {
  //       _retvalue = _globalValue;
  //     }
  //     return _retvalue;
  //   }
  //   catch (e) {
  //     OreAlert.alert(e);
  //   }
  // },
}
//#endregion
export default Orefuncs;



