
const Type = {
    object: "object",
    array: "array"
}

const DataType = {
    String: "string",
    Number: "number",
    Object: "object",
    Boolean: "bool",
    Date: "date"
}

const IsJSON = (json) => {
    var response = { status: true, message: "", data: null };
    try {      
        if (typeof (json) === "string") {
            try {
                json = JSON.parse(json);
            } catch (e) {
                response.status = false;
                response.message = "Input format must be object";   
                return response;
            }
        }
        if (typeof (json) === "object") {
            response.status = true;                        
        }            
        else {
            response.status = false;
            response.message = "Invalid JSON";            
        }        
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!"
        response.data = e;
    }
    
    return response;
}


const GetType = (json) => {
    var response = { status: true, message: "", data: null };
    try {        
        if (IsJSON(json).status) {
            response.status = true;
            if (Array.isArray(json)) {
                response.message = "Success";
                response.data = Type.array;
            }
            else {
                response.message = "Success";
                response.data = Type.object;
            }
        }
        else {
            response.status = false;
            response.message = "Invalid JSON";
        }
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!"
        response.data = e;
    }        
    return response;
}

const ValidateSchema = (json, schema) => {   
    var response = { status: true, message: "", data: null };
    //console.log(typeof(json));
    //console.log(schema);
    try {
        if (IsJSON(json).status) {      
            var Validator = require('jsonschema').Validator;
            var v = new Validator();
            const valid = v.validate(json, schema)            
            
            if (valid.errors.length == 0) {
                response.status = true;
                response.message = "Schema validation success";
                response.data = null;
            }
            else {
                response.status = false;
                response.message = "Schema validation failure";
                response.data = valid.errors[0].stack;
            }         
        }
        else {
            response.status = false;
            response.message = "Invalid JSON";
        }
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!"
        response.data = e;
    }
    return response;
}

const Count = (json) => {
    var response = { status: true, message: "", data: null };
    try {       
        var type = GetType(json);
        if (type.status && type.data == Type.array) {
            response.status = true;
            response.message = "Success";
            response.data = json.length;
        }
        else {
            response.status = false;
            response.message = Type.message;
            response.data = Type.data;
        }
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

const ModelToJson = (modeltype, modeldata) => {
    var response = { status: true, message: "", data: null };
    try {
        var reqjsondata = modeldata;
        var ljsonobject = [];
        var jsonobject = {};
        //let type = modeltype == "10" ? Type.object : Type.array;
        let type = modeltype;
        for (var i in reqjsondata) {
            if (reqjsondata[i].datatype.toLowerCase() === "string") {
                //if (reqjsondata[i].valtype == "M") jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
                //else jsonobject[reqjsondata[i].name] = null;
                jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
            }
            else if (reqjsondata[i].datatype.toLowerCase() === "number") {
                //if (reqjsondata[i].valtype == "M") jsonobject[reqjsondata[i].name] = 0;
                //else jsonobject[reqjsondata[i].name] = null;
                jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
            }
            else if (reqjsondata[i].datatype.toLowerCase() === "bool") {
                var isTrueSet = (reqjsondata[i].value == 'true');
                jsonobject[reqjsondata[i].name] = isTrueSet;
            }
            else if (reqjsondata[i].datatype.toLowerCase() === "date") {
                jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
            }
            else if (reqjsondata[i].datatype.toLowerCase() === "object") {
                jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
            }
            else if (reqjsondata[i].datatype.toLowerCase() === "array") {
                jsonobject[reqjsondata[i].name] = reqjsondata[i].value;
            }
        }
        if (type == Type.array) {
            ljsonobject.push(jsonobject);
            response.data = ljsonobject;
        }
        else {
            response.data = jsonobject;
        }
        response.message = "Success";
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

const JsonToModel = (json) => {
    var response = { status: true, message: "", data: null };
    var lsjson = json;
    try {
        var retjson = null;
        var array = [];
        var json = {};
        var jsontype = Array.isArray(lsjson) ? 20 : 10;
        if (jsontype == 20) {
            lsjson = lsjson[0];
        }
        var mcode = "";
        var increment = 0;
        for (var [key, value] of Object.entries(lsjson)) {
            var datatype = "String";
            var children = [];
            if (typeof (value) == "string") {
                datatype = "String";
            }
            else if (typeof (value) == "number") {
                datatype = "Number";
            }
            else if (typeof (value) == "boolean") {
                datatype = "Bool";
            }
            else if (!value) {
                datatype = "String";
            }
            else if (typeof (value) == "object") {
                return { status: false, message: "Requested JSON not supported. Please create model manually", data: "" }
                //var jsontype = Array.isArray(value) ? 20 : 10;
                //if (jsontype == 10) datatype = "Object";
                //else datatype = "Array";
                //var submodel = {};
                //var modelname = key;
                //if (jsontype == 10) {
                //    submodel = await window.DataModal.CreateAutoDataModal(modelname, value);
                //}
                //else if (jsontype == 20 && value.length > 0) {
                //    submodel = await window.DataModal.CreateAutoDataModal(modelname, value);
                //}
                //if (submodel && submodel.status) {
                //    mcode = submodel.data;
                //}
                //else if (!submodel.status) {
                //    return submodel;
                //    //value = ""
                //    //datatype = "String";
                //}
            }
            else {
                datatype = "String";
            }
            var capName = key.charAt(0).toUpperCase() + key.slice(1);
            json = { "id": increment, "datatype": datatype, "name": key, "value": value, "valtype": "M", "children": children, displayname: capName, datamodel: mcode }
            array.push(json);
            increment += 1;
        }
        retjson = array;
        response.message = "Success";
        response.data = retjson;
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

const GetKeys = (json) => {
    var response = { status: true, message: "", data: null };
    try {       
        var keydata = Object.keys(json);           
        response.message = "Success";
        response.data = keydata;
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

const ConvertSelectedJson = (json, filter) => {    
    var response = { status: true, message: "Success", data: null };
    try {
        var retdata = null;
        if (filter) {
            let lsfilter = filter.replace(/["']/g, "");            
            if (filter === "[0]") {
                retdata = json[0];
            }
            else {
                var keys = lsfilter.split('.');                
                for (var i in keys) {
                    let val = keys[i];
                    if (val != "") {                                           
                        if (val.charAt(val.length - 1) == "]") {
                            let count = val.substring(
                                val.lastIndexOf("[") + 1,
                                val.lastIndexOf("]")
                            );                           
                            let lval = val.slice(0, val.lastIndexOf("["));
                            retdata = json[lval][count];
                        } else {                            
                            retdata = json[val];                                                        
                        }
                    }
                }
            }            
        }        
        response.data = retdata;       
    } catch (e) {
        console.log("ConvertSelectedJSON Exception: " + e);
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

const GetSize = (json) => {
    var response = { status: true, message: "", data: null };
    try {
        var size = memorySizeOf(json);
        response.message = "Success";
        response.data = size;
    } catch (e) {
        response.status = false;
        response.message = "Unknown Error!";
        response.data = e.message;
    }
    return response;
}

function memorySizeOf(obj) {
    var bytes = 0;

    function sizeOf(obj) {
        if (obj !== null && obj !== undefined) {
            switch (typeof obj) {
                case 'number':
                    bytes += 8;
                    break;
                case 'string':
                    bytes += obj.length * 2;
                    break;
                case 'boolean':
                    bytes += 4;
                    break;
                case 'object':
                    var objClass = Object.prototype.toString.call(obj).slice(8, -1);
                    if (objClass === 'Object' || objClass === 'Array') {
                        for (var key in obj) {
                            sizeOf(key);
                            if (!obj.hasOwnProperty(key)) continue;
                            sizeOf(obj[key]); 
                        }
                    } else bytes += obj.toString().length * 2;
                    break;
            }
        }
        return bytes;
    };

    function formatByteSize(bytes) {
        if (bytes < 1024) return bytes + " bytes";
        else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + " KiB";
        else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + " MiB";
        else return (bytes / 1073741824).toFixed(3) + " GiB";
    };

    return formatByteSize(sizeOf(obj));
};

export default { IsJSON, GetType, ValidateSchema, Count, ModelToJson, GetKeys, GetSize, JsonToModel, ConvertSelectedJson }