/*!
 * OreOPS Mobile library v1.0.0
 * (c) - http://oreops.com/
 * License:(http://oreops.com)
 * Created Date :04-03-2020
 */
var global = this;
var activestate = [];
var e = {};
var gractivepage;
import OreAlert from 'react-native-oreopsnew/components/OreAlert';
import Orefuncs from '../general/Ore_GlobalMethods';
import OreApibind from '../general/Ore_APIBinding';
import gsheet from '../connectors/Ore_GoogleSheet';
import mssql from '../connectors/Ore_MsSQL';
import mysql from '../connectors/Ore_MySQL';
import sms from '../connectors/Ore_SMS';
import Semail from '../connectors/Ore_Email';
import OreDataFiltering from '../general/Ore_DataFiltering';
import general from '../connectors/Ore_General';
import RNSmtpMailer from "react-native-smtp-mailer";
import connections from '../../../../../connector/Ore_Connections';
(function () {

  //Initialize smartcder event
  function initengine(cond, act, condinopert, activepage, elsact, fraction) {
    activestate = condinopert;
    gractivepage = activepage
    var standardOperators = {
      present: function (actual, target) {
        return !!actual;
      },
      blank: function (actual, target) {
        return !actual;
      },
      equalTo: function (actual, target) {
        return "" + actual === "" + target;
      },
      notEqualTo: function (actual, target) {
        return "" + actual !== "" + target;
      },
      greaterThan: function (actual, target) {
        return parseFloat(actual, 10) > parseFloat(target, 10);
      },
      greaterThanEqual: function (actual, target) {
        return parseFloat(actual, 10) >= parseFloat(target, 10);
      },
      lessThan: function (actual, target) {
        return parseFloat(actual, 10) < parseFloat(target, 10);
      },
      lessThanEqual: function (actual, target) {
        return parseFloat(actual, 10) <= parseFloat(target, 10);
      },
      includes: function (actual, target) {
        return ("" + actual).indexOf("" + target) > -1;
      },
      matchesRegex: function (actual, target) {
        var r = target.replace(/^\/|\/$/g, "");
        var regex = new RegExp(r);
        return regex.test("" + actual);
      }
    };
    var RuleEngine = global.RuleEngine = function RuleEngine(rule) {
      rule = rule || {};
      this.operators = {};
      this.actions = rule.actions || [];
      this.elseactions = rule.elseactions || [];
      this.conditions = rule.conditions || { all: [] };
      this.forloopaction = rule.forloopaction || [];
      this.addOperators(standardOperators);
    }

    RuleEngine.prototype = {
      run: function (conditionsAdapter, actionsAdapter, cb) {
        var out, error, _this = this;

        this.matches(conditionsAdapter, function (err, result) {
          out = result;
          error = err;
          // alert('result'+result)
          if (result && !err) _this.runActions(actionsAdapter, "if");
          else {
            if (result != undefined && result == false)
              _this.runActions(actionsAdapter, "else");
          }
          if (cb) cb(err, result);
        });
        if (error) throw error;
        return out;
      },

      matches: function (conditionsAdapter, cb) {
        var out, err;
        handleNode(this.conditions, conditionsAdapter, this, function (e, result) {
          if (e) {
            err = e;
            console.log("ERR", e.message, e.stack);
          }
          out = result;
          if (cb) cb(e, result);
        });
        if (err) throw err;
        if (!cb) return out;
      },

      operator: function (name) {
        return this.operators[name];
      },

      addOperators: function (newOperators) {
        var _this = this;
        for (var key in newOperators) {
          if (newOperators.hasOwnProperty(key)) {
            (function () {
              var op = newOperators[key];
              // synchronous style operator, needs to be wrapped
              if (op.length == 2) {
                _this.operators[key] = function (actual, target, cb) {
                  try {
                    var result = op(actual, target);
                    cb(null, result);
                  } catch (e) {
                    cb(e);
                  }
                };
              }
              // asynchronous style, no wrapping needed
              else if (op.length == 3) {
                _this.operators[key] = op;
              }
              else {
                throw "Operators should have an arity of 2 or 3; " + key + " has " + op.length;
              }
            })();
          }
        }
      },

      /*runActions: function (actionsAdapter) {

        for (var i = 0; i < this.actions.length; i++) {
          var actionData = this.actions[i];
          var actionName = actionData.value;
          var actionFunction = actionsAdapter[actionName]
          if (actionFunction) { actionFunction(new Finder(actionData)); }
        }
      }
    };*/
      runActions: function (actionsAdapter, block) {
        if (block == "if") {
          if ((this.hasOwnProperty('forloopaction')) && this.forloopaction.length > 0) {
            var foractionData = this.forloopaction[0];
            loopingdata = this.actions;
            var foractionName = foractionData.value;
            var foractionFunction = actionsAdapter[foractionName]
            if (foractionFunction) { foractionFunction(new Finder(foractionData)); }
          } else {
            for (var i = 0; i < this.actions.length; i++) {
              var actionData = this.actions[i];
              var actionName = actionData.value;
              var actionFunction = actionsAdapter[actionName]
              if (actionFunction) { actionFunction(new Finder(actionData)); }
            }
          }
        }
        else if (block == "else") {
          for (var i = 0; i < this.elseactions.length; i++) {
            var actionDatas = this.elseactions[i];
            var actionNames = actionDatas.value;
            var actionFunctions = actionsAdapter[actionNames]
            if (actionFunctions) { actionFunctions(new Finder(actionDatas)); }
          }
        }
        //
      }
    };

    //Json form method to perform execution
    function Finder(data) {
      this.data = data;
    }
    Finder.prototype = {
      find: function () {
        var currentNode = this.data;
        for (var i = 0; i < arguments.length; i++) {
          var name = arguments[i];
          currentNode = findByName(name, currentNode);
          if (!currentNode) { return null; }
        }
        return currentNode.value;
      }
    };

    //Filter smartcoder based on it name
    function findByName(name, node) {
      var fields = node.fields || [];
      for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        if (field.name === name) { return field; }
      }
      return null;
    }

    // if condition checking criteria method
    function handleNode(node, obj, engine, cb) {
      if (node.all || node.any || node.none) {
        handleConditionalNode(node, obj, engine, cb);
      } else {
        handleRuleNode(node, obj, engine, cb);
      }
    }

    //sub method for onditonal method
    function handleConditionalNode(node, obj, engine, cb) {
      try {
        var isAll = !!node.all;
        var isAny = !!node.any;
        var isNone = !!node.none;
        var nodes = isAll ? node.all : node.any;
        if (isNone) { nodes = node.none }
        if (nodes.length == 0) {
          return cb(null, true);
        }
        var currentNode, i = 0;
        var next = function () {
          try {
            currentNode = nodes[i];
            i++;
            if (currentNode) {
              handleNode(currentNode, obj, engine, done);
            }
            else {
              // If we have gone through all of the nodes and gotten
              // here, either they have all been true (success for `all`)
              // or all false (failure for `any`);
              var r = isNone ? true : isAll;
              cb(null, r);
            }
          } catch (e) {
            cb(e);
          }
        };

        var done = function (err, result) {
          if (err) return cb(err);
          if (isAll && !result) return cb(null, false);
          if (isAny && !!result) return cb(null, true);
          if (isNone && !!result) return cb(null, false);
          next();
        }
        next();
      } catch (e) {
        cb(e);
      }
    }
    //sub method for onditonal method
    function handleRuleNode(node, obj, engine, cb) {
      try {
        var value = obj[node.name];
        var lsctrltype;
        if (value != undefined)
          lsctrltype = value.type;
        // if (value == undefined) {
        //   var filteredNames = activestate.ParamJson.filter(function (word) {
        //     return word.vbname === node.name;
        //   });
        //   value = filteredNames[0].vbvalue;
        // } 
        if (isforloop == "N" && node.name.indexOf("=") != -1) {
          value = node.name.replace("#=", "");
          value = 'gractivepage.state.' + value
          value = eval(value);
        }
        else if (node.name.indexOf("=") != -1) {
          //if(message.indexOf("[")!=-1)
          //{
          value = node.name.replace("#=", "");
          value = "gractivepage.state." + value;
          var lsindex = eval(index);
          var lsresult = value.replace('index', lsindex);
          value = eval(lsresult)
        }
        else if (node.name.indexOf("#") != -1) {
          if (node.name.indexOf("=") != -1) {
            //if(message.indexOf("[")!=-1)
            //{
            value = node.name.replace("#=", "");
            value = "gractivepage.state." + value;
            var lsindex = eval(index);
            var lsresult = value.replace('index', lsindex);
            value = eval(lsresult)
          } else {
            value = node.name.replace("#", "").replace("=", "");
            value = "gractivepage.state." + value;
            value = eval(value);
          }
        }
        if (lsctrltype == "Picker") {
          value = value.Property.selected;
        }
        else {
          try {
            var ls = value.Default.txtctrlname;
            if (ls != undefined)
              value = Orefuncs.GetValue(ls, activestate)
          }
          catch{ }
        }
        if (value && value.call) {
          if (value.length === 1) {
            return value(function (result) {
              compareValues(result, node.operator, node.value, engine, cb);
            });
          }
          else {
            value = value()
          }
        }
        compareValues(value, node.operator, node.value, engine, cb);
      } catch (e) {
        cb(e);
      }
    }

    //compare values for if condition based on the operator
    function compareValues(actual, operator, value, engine, cb) {
      try {
        //gractivepage.setState({spinner:false});
        if (isforloop == "N" && value.indexOf("=") != -1) {
          value = value.replace("#=", "");
          value = "gractivepage.state." + value;
          value = eval(value);
        }
        else if (value.indexOf("=") != -1) {
          //if(message.indexOf("[")!=-1)
          //{
          value = value.replace("#=", "");
          value = "gractivepage.state." + value;
          var lsindex = eval(index);
          var lsresult = value.replace('index', lsindex);
          value = eval(lsresult)
        }
        else if (value.indexOf("#") != -1) {
          value = value.replace("#", "");
          value = gractivepage.state[value];
        }
        else if (value.indexOf("$") != -1) {
          value = value.replace("$", "");
          value = Orefuncs.GetValue(value, activestate);
        }
        var operatorFunction = engine.operator(operator);
        if (!operatorFunction) throw "Missing " + operator + " operator";
        operatorFunction(actual, value, cb);
      } catch (e) {
        cb(e);
      }
    }

    var engine = new RuleEngine({
      conditions: cond,
      actions: act,
      elseactions: elsact,
      forloopaction: fraction
    });

    var conditionsAdapter = condinopert.StyleJSON

    var actionsAdapter = {
      //For loop execution method
      For: function (data) {
        var lsloppdata = loopingdata;
        var lsinit = data.data.fields[0].value;
        var lsdfevalue = data.data.fields[1].value;
        var lscondoperator = data.data.fields[2].value;
        var lsdata = data.data.fields[4].value;
        var lsslicedta = "";
        if (lsdata.indexOf('#') != -1) {
          // lsdata=lsdata.replace("#=","");
          //var lsstrt=lsdata.indexOf("[");
          //lsstrt=lsstrt;
          lsslicedta = lsdata;
          lsslicedta = lsslicedta.replace("#", "");
          var lsreplcedata = "gractivepage.state." + lsslicedta;
          lsdata = lsdata.replace(lsslicedta, lsreplcedata);
          lsdata = lsdata.replace("#", "")
          var lsasign = lsdata;
          if (lsinit == "0")
            lsdata = lsdata + ".length-1";
          else
            lsdata = lsdata + ".length";
          // var lslsdata = eval(lsdata);
        }
        else {
          lsslicedta = "test";
          var lsasign = "'h'";

        }
        //var lstype=loopingdata[0].objtype;
        var lsincrment = data.data.fields[5].value;
        if (lsincrment == "increment") {
          lsincrment = lsinit + "++";

        }
        else if (lsincrment == "decrement") {
          lsincrment = lsinit + "--";
        }

        // var sublopp = 'for (var i = 0; i < loopingdata.length; i++) {var lactionData = loopingdata[i].actions[1];var lactionName = lactionData.value; var lactionFunction = actionsAdapter[lactionName]; if (lactionFunction) { lactionFunction(new Finder(lactionData),' + lsinit + ',' + lsdata + '); }}'
        var sublopp = 'loopingdata.filter(function(o){var a=[],e=[];o.hasOwnProperty("elseactions")&&(a=o.elseactions),o.hasOwnProperty("forloopaction")&&(e=o.forloopaction),s(o.conditions,o.actions,gractivepage.state,gractivepage,a,e)})';
        isforloop = "Y";
        window.lsinit;
        var formlooping = "for(" + lsinit + "=" + lsdfevalue + ";" + lsinit + lscondoperator + lsdata + ";" + lsincrment + "){if(window.isbreak=='Y')break;if(lsslicedta!=''){ window." + lsslicedta + "=" + lsasign + "; } window.index=" + lsinit + ";" + sublopp + "}";
        gractivepage.setState({ spinner: false })
        eval(formlooping);
        // isforloop = "N";
      },

      //Showalert execution method
      alert: function (data) {
        var message = data.find("message");
		
		var lsreturnval=changemultiplevalue(message)
		    OreAlert.alert(lsreturnval.toString());
			return false;
			
        if (isforloop == "N" && message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          message = 'gractivepage.state.' + message;
          message = eval(message);
          alert(message);
          return false;
        }

        if (message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          var lsindex = eval(index);
          var lsresult = message.replace('index', lsindex);
          message = eval(lsresult)
          alert(message)
          return false
        }
        // var message = data.find("message");

        var callbackvt = data.data.callbackaction;
        if (message.indexOf("#") != -1) {
          message = message.replace("#", "");
          message = gractivepage.state[message];

        }
        else if (message.indexOf("$") != -1) {
          message = message.replace("$", "");
          message = Orefuncs.GetValue(message, activestate);
        }

        else if (message.indexOf("$") != -1) {
          message = message.replace("$", "");
          message = Orefuncs.GetValue(message, activestate);
        }
        else if (message.indexOf("|") != -1) {
          var lsstartindex = message.indexOf("|");
          lsstartindex = lsstartindex + 1;
          var lslastindexof = message.lastIndexOf("|");
          var lsctrlname = message.slice(lsstartindex, lslastindexof);
          var lsdata = eval(lsctrlname);
          lsctrlname = "|" + lsctrlname + "|";
          message = message.replace(lsctrlname, lsdata);
        }
        OreAlert.alert(message.toString());
        e = {};
        e.message = message;
        //gractivepage.setState({spinner:false});
        return false;

        if (data.find("fieldId") == "direct") {
          var message = data.data.fields[0].fields[0].value;
          if (message.indexOf("#") != -1) {
            message = message.replace("#", "");
            message = gractivepage.state[message];
          }
          OreAlert.alert(message);
          return false;
        }
        var editingvalue = data.data.fields[0].fields[0].value;
        var s;
        if (editingvalue.indexOf("~") == 0) {
          var lsvalue = editingvalue.replace("~", "");
          //editingvalue="gractivepage.state."+lsvalue;
          // var lsmsg=eval(editingvalue);
          // alert();
          s = gractivepage.state[lsvalue];
          s = s.toString()
        }
        else {
          s = gractivepage.state[editingvalue];
          s = s.toString()

        }
        OreAlert.alert(s);
      },

       //Send email execution method
       email: function (data) {
         gractivepage.setState({spinner:true}); 
        var lsconnectorname = data.find("Connector");
        var lstoemailid = data.find("emailto");
        var lstosubject = data.find("emailsubject");
        var lstocontent = data.find("emailcontent");
        var lsccemail = data.find("emailcc");
        var lsbccemail = data.find("emailbcc");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;

        var regexvar = /\#(.*?)\#/gi;
        var resultMatchGroupvar = lstosubject.match(regexvar);
        if (resultMatchGroupvar != null) {
          var desiredResvar = resultMatchGroupvar.map(match => match.replace(regexvar, "$1"))
          for (var i = 0; i <= desiredResvar.length - 1; i++) {
            var hs = desiredResvar[i]
            var lsval = gractivepage.state[hs];
            //lsval=eval(lsval)
            hs = "#" + hs + "#";
            lstosubject = lstosubject.replace(hs, lsval)
          }
        }

        var regexcontrol = /\$(.*?)\$/gi;
        var resultMatchGroupcontrol = lstosubject.match(regexcontrol); // [ '[more or less]', '[more]', '[less]' ]
        if (resultMatchGroupcontrol != null) {
          var desiredRescontrol = resultMatchGroupcontrol.map(match => match.replace(regexcontrol, "$1"))
          var s; for (var i = 0; i <= desiredRescontrol.length - 1; i++) {
            var hs = desiredRescontrol[i];
            var lsval = Orefuncs.GetValue(hs, activestate)
            hs = "$" + hs + "$";
            lstosubject = lstosubject.replace(hs, lsval);
          }
        }

        var lstoloop = lstoemailid.split(",");
        var lstocid = "";
        for (var i = 0; i <= lstoloop.length - 1; i++) {
          if (isforloop == "N" && lstoloop[i].indexOf("=") != -1) {
            lstoloop[i] = lstoloop[i].replace("#=", "");
            lstoloop[i] = 'gractivepage.state.' + message;
            lstocid += eval(lstoloop[i]);
          }

          if (lstoloop[i].indexOf("=") != -1) {
            lstoloop[i] = lstoloop[i].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lstoloop[i].replace('index', lsindex);
            lstocid += eval(lsresult)
          }

          if (lstoloop[i].indexOf("#") != -1) {
            lstoloop[i] = lsccloop[i].replace("#", "");
            lstoloop[i] = gractivepage.state[lstoloop[i]];
            lstocid += lstoloop[i] + ",";
          }

          else if (lstoloop[i].indexOf("$") != -1) {
            lstoloop[i] = lstoloop[i].replace("$", "");
            lstoloop[i] = Orefuncs.GetValue(lstoloop[i], activestate);
            lstocid += lstoloop[i] + ",";
          }

          else {
            lstocid += lstoloop[i] + ",";
          }
        }
        lstocid = lstocid.substring(0, lstocid.length - 1);
        var lsccloop = lsccemail.split(",");
        var lscccid = [];
        for (var i = 0; i <= lsccloop.length - 1; i++) {

          if (isforloop == "N" && lsccloop[i].indexOf("=") != -1) {
            lsccloop[i] = lsccloop[i].replace("#=", "");
            lsccloop[i] = 'gractivepage.state.' + message;
            lscccid.push(eval(lsccloop[i]));
          }

          if (lsccloop[i].indexOf("=") != -1) {

            lsccloop[i] = lsccloop[i].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsccloop[i].replace('index', lsindex);
            //alert(lsresult)
            lscccid.push(eval(lsresult));

          }

          if (lsccloop[i].indexOf("#") != -1) {
            lsccloop[i] = lsccloop[i].replace("#", "");
            lsccloop[i] = gractivepage.state[lsccloop[i]];
            lscccid.push(lsccloop[i] + ",");
          }
          else if (lsccloop[i].indexOf("$") != -1) {
            lsccloop[i] = lsccloop[i].replace("$", "");
            lsccloop[i] = Orefuncs.GetValue(lsccloop[i], activestate);
            lscccid.push(lsccloop[i] + ",");
          }
          else {
            lscccid.push(lsccloop[i] + ",");
          }
        }
      //  lscccid = lscccid.substring(0, lscccid.length - 1);
        var lsbccloop = lsbccemail.split(",");
        var lsbcccid = [];
        for (var i = 0; i <= lsbccloop.length - 1; i++) {
          if (isforloop == "N" && lsbccloop[i].indexOf("=") != -1) {
            lsbccloop[i] = lsbccloop[i].replace("#=", "");
            lsbccloop[i] = 'gractivepage.state.' + message;
            lsbcccid.push(eval(lsbccloop[i]));
          }
          if (lsbccloop[i].indexOf("=") != -1) {
            lsbccloop[i] = lsbccloop[i].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsbccloop[i].replace('index', lsindex);
            lsbcccid.push(eval(lsresult))
          }
          if (lsbccloop[i].indexOf("#") != -1) {
            lsbccloop[i] = lsbccloop[i].replace("#", "");
            lsbccloop[i] = gractivepage.state[lsbccloop[i]];
            lsbcccid.push(lsbccloop[i] );
          }
          else if (lsbccloop[i].indexOf("$") != -1) {
            lsbccloop[i] = lsbccloop[i].replace("$", "");
            lsbccloop[i] = Orefuncs.GetValue(lsbccloop[i], activestate);
            lsbcccid.push(lsbccloop[i]);
          }
          else {
            lsbcccid.push(lsbccloop[i]);
          }
        }

        //lsbcccid = lsbcccid.substring(0, lsbcccid.length - 1);

        let config = connections.GetConnectorConfig(lsconnectorname);



       // SendEmailbySMTP(lstoemailid,lsbcccid,lscccid,lstosubject,lstocontent,config)
       
        RNSmtpMailer.sendMail({
          mailhost: config.server,
          port: config.port,    //25 or 465 or 587
          ssl: false, // optional. if false, then TLS is enabled. Its true by default in android. In iOS TLS/SSL is determined automatically, and this field doesn't affect anything
          username: config.email,
          //username: "noreply@oreops.com",
          password: config.password,
        //  fromName: "Some Name", // optional
          replyTo: lstoemailid, // optional
          recipients: lstoemailid,
         // bcc: ["bccEmail1", "bccEmail2"], // optional
         bcc: lsbcccid,
        cc:lscccid,
          subject: lstosubject,
          htmlBody: lstocontent,
         //  attachmentPaths: [
         //   //  RNFS.ExternalDirectoryPath + "/image.jpg",
         //   //  RNFS.DocumentDirectoryPath + "/test.txt",
         //   //  RNFS.DocumentDirectoryPath + "/test2.csv",
         //   //  RNFS.DocumentDirectoryPath + "/pdfFile.pdf",
         //   //  RNFS.DocumentDirectoryPath + "/zipFile.zip",
         //   //  RNFS.DocumentDirectoryPath + "/image.png"
         //  ], // optional
           attachmentNames: [
           
           ], // required in android, these are renames of original files. in ios filenames will be same as specified in path. In a ios-only application, no need to define it
        })
        .then(res => {

          gractivepage.setState({spinner:false});

          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        
         })
        .catch(err =>{ 

          gractivepage.setState({spinner:false});
          if (callbackfalse != undefined && callbackfalse.length > 0) {
            Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
          }

        });


        

      },




      //break statement execution method 
      breakstatement: function (data) {
        window.isbreak = 'Y';
      },

      //Sendsms execution method 
      sms: function (data) {
        var lsmobno = data.find("mobno");
        var lsmsg = data.find("msg");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        if (lsmsg.indexOf("#OTP" > -1)) {
          var otp = Orefuncs.OTP();
          var lsvariablename = "otp";
          gractivepage.setState({ [lsvariablename]: otp })
          lsmsg = lsmsg.replace("#OTP#", otp);
        }
        if (lsmsg.indexOf("$") != -1) {
          var lsstartindex = lsmsg.indexOf("$");
          lsstartindex = lsstartindex + 1;
          var lslastindexof = lsmsg.lastIndexOf("$");
          var lsctrlname = lsmsg.slice(lsstartindex, lslastindexof);
          lsctrlname = lsctrlname.replace("$", "");
          var _screenStyles = activestate.StyleJSON;
          if (_screenStyles[lsctrlname] == undefined) { return }
          var controltype = _screenStyles[lsctrlname].type;
          var ctrlval;
          if (controltype == "Picker")
            ctrlval = Orefuncs.GetText(lsctrlname, activestate);
          else
            ctrlval = Orefuncs.GetValue(lsctrlname, activestate);
          lsctrlname = "$" + lsctrlname + "$";
          lsmsg = lsmsg.replace(lsctrlname, ctrlval);
        }
        if (isforloop == "N" && lsmsg.indexOf("=") != -1) {
          lsmsg = lsmsg.replace("#=", "");
          lsmsg = 'gractivepage.state.' + lsmsg;
          lsmsg = eval(lsmsg);
        }

        else if (lsmsg.indexOf("=") != -1) {
          lsmsg = lsmsg.replace("#=", "");
          var lsindex = eval(index);
          var lsresult = lsmsg.replace('index', lsindex);
          lsmsg = eval(lsresult)
          lsmsg = eval(lsmsg)
        }
        if (lsmsg.indexOf("#") != -1) {
          var lsstartindex = lsmsg.indexOf("#");
          lsstartindex = lsstartindex + 1;
          var lslastindexof = lsmsg.lastIndexOf("#");
          var lsctrlname = lsmsg.slice(lsstartindex, lslastindexof);
          lsctrlname = lsctrlname.replace("#", "");
          var s = gractivepage.state[lsctrlname];
          lsctrlname = "#" + lsctrlname + "#";
          lsmsg = lsmsg.replace(lsctrlname, s);
        }
        var lsconnectorname = data.find("Connector");
        var lsmbval = GetValue(lsmobno, activestate)
        sms.SendSMS(lsconnectorname, lsmbval, lsmsg).then((response) => {
          if (response.status == true) {
            if (callbackvt != undefined && callbackvt.length > 0) {
              Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
            }
          }
          if (response.status == false) {
            if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
            }
          }
          //gractivepage.setState({spinner:false});
        });
      },

      //Google sheet update sheet row method	  
      updatesheet: function (data) {
        var lsconnectorname = data.find("Connector");
        var lssheetname = data.find("sheetname");
        //var lsrangrfrm = data.find("rangefrm");
        // var lsrangeto = data.find("rangeto");
        var lscondioln = data.find("condition");
        var lsdata = data.find("data");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction
        // var lscondioln =data.data.fields[1].fields[4].value;
        //this.alert(lsdata)
        var lscondtn;
        var lsfilter = [];
        if (lscondioln == undefined || lscondioln == "") {
          lsfilter = "";
        }
        else {
          if (lscondioln.indexOf(",") != -1) {
            lscondtn = lscondioln.split(",");
            for (var i = 0; i <= lscondtn.length - 1; i++) {
              var lscondtns = lscondtn[i].split("~");
              var lsval = "";
              if (lscondtns[1].indexOf("$") != -1) {
                lscondtns[1] = lscondtns[1].replace("$", "");
                lsval = Orefuncs.GetValue(lscondtns[1], activestate);
              }
              else if (isforloop == "N" && lscondtns[1].indexOf("=") != -1) {
                lscondtns[1] = lscondtns[1].replace("#=", "");
                lscondtns[1] = 'gractivepage.state.' + lscondtns[1];
                lsval = eval(lscondtns[1]);
              }
              else if (lscondtns[1].indexOf("=") != -1) {
                lscondtns[1] = lscondtns[1].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtns[1].replace('index', lsindex);
                lsval = eval(lsresult)
              }
              else if (lscondtns[1].indexOf("#") != -1) {
                lscondtns[1] = lscondtns[1].replace("#", "");
                lsval = gractivepage.state[lscondtns[1]];
              }
              else {
                lsval = lscondtns[1];
              }
              if (lscondtns[0].indexOf("$") != -1) {
                lscondtns[0] = lscondtns[1].replace("$", "");
                lscondtns[0] = Orefuncs.GetValue(lscondtns[0], activestate);
              }
              else if (isforloop == "N" && lscondtns[0].indexOf("=") != -1) {
                lscondtns[0] = lscondtns[0].replace("#=", "");
                lscondtns[0] = 'gractivepage.state.' + lscondtns[0];
                lscondtns[0] = eval(lscondtns[0]);
              }
              else if (lscondtns[0].indexOf("=") != -1) {
                lscondtns[0] = lscondtns[0].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtns[0].replace('index', lsindex);
                lscondtns[0] = eval(lsresult)
              }
              else if (lscondtns[0].indexOf("#") != -1) {
                lscondtns[0] = lscondtns[0].replace("#", "");
                lscondtns[0] = gractivepage.state[lscondtns[0]];
              }
              else {
                lscondtns[0] = lscondtns[0];
              }
              var ls = { where: lscondtns[0], value: lsval };
              lsfilter.push(ls)
            }
          }
          else {
            lscondtn = lscondioln.split("~");
            var lsval = "";
            if (lscondtn[1].indexOf("$") != -1) {
              lscondtn[1] = lscondtn[1].replace("$", "");
              lsval = Orefuncs.GetValue(lscondtn[1], activestate);
            }
            else if (isforloop == "N" && lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              lscondtn[1] = 'gractivepage.state.' + lscondtn[1];
              lsval = eval(lscondtn[1]);
            }
            else if (lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[1].replace('index', lsindex);
              lsval = eval(lsresult)
            }
            else if (lscondtn[1].indexOf("#") != -1) {
              var s = lscondtn[1].replace("#", "");
              lsval = gractivepage.state[s];
            }
            else {
              lsval = lscondtn[1];
            }
            if (lscondtn[0].indexOf("$") != -1) {
              lscondtn[0] = lscondtn[0].replace("$", "");
              lscondtn[0] = Orefuncs.GetValue(lscondtn[0], activestate);
            }
            else if (isforloop == "N" && lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              lscondtn[0] = 'gractivepage.state.' + lscondtn[0];
              lscondtn[0] = eval(lscondtn[0]);
            }
            else if (lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[0].replace('index', lsindex);
              lscondtn[0] = eval(lsresult)
            }
            else if (lscondtn[0].indexOf("#") != -1) {
              lscondtn[0] = lscondtn[0].replace("#", "");
              lscondtn[0] = gractivepage.state[lscondtn[0]];
            }
            else {
              lscondtn[0] = lscondtn[0];
            }
            var ls = { where: lscondtn[0], value: lsval };
            lsfilter.push(ls);
          }
        }
        var lsarrayval = [];
        lsvalue = lsdata.split(",");
        for (j = 0; j <= lsvalue.length - 1; j++) {
          if (lsvalue[j].indexOf("$") != -1) {
            lsvalue[j] = lsvalue[j].replace("$", "");
            lsarrayval.push(Orefuncs.GetValue(lsvalue[j], activestate));
          }
          else if (isforloop == "N" && lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            lsvalue[j] = 'gractivepage.state.' + lsvalue[j];
            lsarrayval.push(eval(lsvalue[j]));
          }
          else if (lscondtn[1].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsvalue[j].replace('index', lsindex);
            lsarrayval.push(eval(lsresult));
          }
          else if (lsvalue[j].indexOf("#") != -1) {
            var ls = lsvalue[j].replace("#", "");
            var s = gractivepage.state[ls];
            lsarrayval.push(s);
          }
          else {
            lsarrayval.push(lsvalue[j]);
          }
        }
        lsarrayval = JSON.stringify(lsarrayval);
        //alert(JSON.stringify(lsfilter))
        ////this.alert(lsconnectorname+lssheetname+lsrangeto+lsrangrfrm+lsfilter+lsdata)
        gsheet.UpdateRecSet(lsconnectorname, lssheetname, "A", "Z", lsfilter, lsarrayval).then((res) => {
          //alert(JSON.stringify(response));
          //gractivepage.setState({spinner:false}); 
          if (res.status == true) {
            if (callbackvt != undefined && callbackvt.length > 0) {
              Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
            }
          }
          if (res.status == false) {
            if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
            }
          }
          //gractivepage.setState({spinner:false});  
        });
      },

      //google sheet update column method  
      updatecolumn: function (data) {
        var lsconnectorname = data.find("Connector");
        var lssheetname = data.find("sheetname");
        // var lsrangrfrm = data.find("rangefrm");
        //var lsrangeto = data.find("rangeto");
        var lscolumn = data.find("column");
        var lscondioln = data.find("condition");
        var lsdata = data.find("data");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        // var lscondioln =data.data.fields[1].fields[4].value;
        var lscondtn;
        var lsfilter = [];
        if (lscondioln == undefined || lscondioln == "") {
          lsfilter = "";
        }
        else {
          if (lscondioln.indexOf(",") != -1) {
            lscondtn = lscondioln.split(",");
            for (i = 0; i <= lscondtn.length - 1; i++) {
              var lscondtns = lscondtn[i].split("~");
              var lsval = "";
              if (lscondtns[1].indexOf("$") != -1) {
                var lsctrlname = lscondtns[1].replace("$", "");
                lsval = Orefuncs.GetValue(lsctrlname, activestate);
              }
              if (isforloop == "N" && lscondtns[1].indexOf("=") != -1) {
                lscondtns[1] = lscondtns[1].replace("#=", "");
                lscondtns[1] = 'gractivepage.state.' + lscondtns[1];
                lsval = eval(lscondtns[1]);
              }
              else if (lscondtns[1].indexOf("=") != -1) {
                lscondtns[1] = lscondtns[1].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtn[1].replace('index', lsindex);
                lsval = eval(lsresult)
              }
              else if (lscondtns[1].indexOf("#") != -1) {
                lscondtns[1] = lscondtns[1].replace("#", "");
                lsval = gractivepage.state[lscondtns[1]];
              }
              else {
                lsval = lscondtns[1];
              }
              if (lscondtns[0].indexOf("$") != -1) {
                lscondtns[0] = lscondtns[1].replace("$", "");
                lscondtns[0] = Orefuncs.GetValue(lscondtns[0], activestate);
              }
              else if (isforloop == "N" && lscondtns[0].indexOf("=") != -1) {
                lscondtns[0] = lscondtns[0].replace("#=", "");
                lscondtns[0] = 'gractivepage.state.' + lscondtns[0];
                lscondtns[0] = eval(lscondtns[0]);
              }
              else if (lscondtns[0].indexOf("=") != -1) {
                lscondtns[0] = lscondtns[0].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtns[0].replace('index', lsindex);
                lscondtns[0] = eval(lsresult)
              }
              else if (lscondtns[0].indexOf("#") != -1) {
                lscondtns[0] = lscondtns[0].replace("#", "");
                lscondtns[0] = gractivepage.state[lscondtns[0]];
              }
              else {
                lscondtns[0] = lscondtns[0];
              }
              var ls = { where: lscondtns[0], value: lsval };
              lsfilter.push(ls)
            }
          }
          else {
            lscondtn = lscondioln.split("~");
            var lsval = "";
            if (lscondtn[1].indexOf("$") != -1) {
              var lsctrlname = lscondtn[1].replace("$", "");
              lsval = Orefuncs.GetValue(lsctrlname, activestate);
            }
            else if (isforloop == "N" && lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              lscondtn[1] = 'gractivepage.state.' + lscondtn[1];
              lsval = eval(lscondtn[1]);
            }
            else if (lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[1].replace('index', lsindex);
              lsval = eval(lsresult)
            }
            else if (lscondtn[1].indexOf("#") != -1) {
              var s = lscondtn[1].replace("#", "");
              lsval = gractivepage.state[s];
            }
            else {
              lsval = lscondtn[1];
            }
            if (lscondtn[0].indexOf("$") != -1) {
              lscondtn[0] = lscondtn[0].replace("$", "");
              lscondtn[0] = Orefuncs.GetValue(lscondtn[0], activestate);
            }
            else if (isforloop == "N" && lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              lscondtn[0] = 'gractivepage.state.' + lscondtn[0];
              lscondtn[0] = eval(lscondtn[0]);
            }
            else if (lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[0].replace('index', lsindex);
              lscondtn[0] = eval(lsresult)
            }
            else if (lscondtn[0].indexOf("#") != -1) {
              lscondtn[0] = lscondtn[0].replace("#", "");
              lscondtn[0] = gractivepage.state[lscondtn[0]];
            }
            else {
              lscondtn[0] = lscondtn[0];
            }
            var ls = { where: lscondtn[0], value: lsval };
            lsfilter.push(ls);
          }
        }
        var lsarrayval = [];
        lsvalue = lsdata.split(",");
        for (j = 0; j <= lsvalue.length - 1; j++) {
          if (lsvalue[j].indexOf("$") != -1) {
            lsvalue[j] = lsvalue[j].replace("$", "");
            lsarrayval.push(Orefuncs.GetValue(lsvalue[j], activestate));
          }
          if (isforloop == "N" && lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            lsvalue[j] = 'gractivepage.state.' + lsvalue[j];
            lsarrayval.push(lsvalue[j]);
          }
          else if (lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsvalue[j].replace('index', lsindex);
            lsarrayval.push(lsvalue[j]);
          }
          else if (lsvalue[j].indexOf("#") != -1) {
            var ls = lsvalue[j].replace("#", "");
            console.log(ls)
            var s = gractivepage.state[ls];
            lsarrayval.push(s);
          }
          else {
            lsarrayval.push(lsvalue[j]);
          }
        }
        lsarrayval = JSON.stringify(lsarrayval);

        gsheet.UpdateRecSetSingle(lsconnectorname, lssheetname, "A", "Z", lscolumn, lsfilter, lsarrayval).then((response) => {
          if (response.status == true) {
            if (callbackvt != undefined && callbackvt.length > 0) {
              Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
            }
          }
          if (response.status == false) {

            if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
            }
          }
          //gractivepage.setState({spinner:false});   
        });
      },

      //Google sheet delete method  
      deletesheet: function (data) {

        var lsconnectorname = data.find("Connector");
        var lssheetname = data.find("sheetname");
        var lsrangrfrm = data.find("rangefrm");
        var lsrangeto = data.find("rangeto");
        var lscondioln = data.find("condition");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        // var lscondioln =data.data.fields[1].fields[4].value;
        var lscondtn;
        var lsfilter = [];
        if (lscondioln == undefined || lscondioln == "") {
          lsfilter = "";
        }
        else {
          if (lscondioln.indexOf(",") != -1) {
            lscondtn = lscondioln.split(",");
            for (i = 0; i <= lscondtn.length - 1; i++) {
              lscondtn = lscondtn[i].split("~");
              var lsval = "";
              if (lscondtn[1].indexOf("$") != -1) {
                var lsctrlname = lscondtn[1].replace("$", "");
                lsval = GetValue(lsctrlname, activestate);
              }
              if (isforloop == "N" && lscondtn[1].indexOf("=") != -1) {
                lscondtn[1] = lscondtn[1].replace("#=", "");
                lscondtn[1] = 'gractivepage.state.' + lscondtn[1];
                lsval = eval(lscondtn[1]);
              }
              else if (lscondtn[1].indexOf("=") != -1) {
                lscondtn[1] = lscondtn[1].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtn[1].replace('index', lsindex);
                lsval = eval(lsresult)
              }
              else if (lscondtn[1].indexOf("#") != -1) {
                var s = lscondtn[1].replace("#", "");
                lsval = gractivepage.state[s];
              }
              else {
                lsval = lscondtn[1];
              }
              if (lscondtn[0].indexOf("$") != -1) {
                lscondtn[0] = lscondtn[0].replace("$", "");
                lscondtn[0] = GetValue(lscondtn[0], activestate);
              }
              else if (isforloop == "N" && lscondtn[0].indexOf("=") != -1) {
                lscondtn[0] = lscondtn[0].replace("#=", "");
                lscondtn[0] = 'gractivepage.state.' + lscondtn[0];
                lscondtn[0] = eval(lscondtn[0]);
              }
              else if (lscondtn[0].indexOf("=") != -1) {
                lscondtn[0] = lscondtn[0].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtn[0].replace('index', lsindex);
                lscondtn[0] = eval(lsresult)
              }
              else if (lscondtn[0].indexOf("#") != -1) {
                lscondtn[0] = lscondtn[0].replace("#", "");
                lscondtn[0] = gractivepage.state[lscondtn[0]];
              }
              else {
                lscondtn[0] = lscondtn[0];
              }
              var ls = { where: lscondtn[0], value: lsval };
              lsfilter.push(ls)
            }
          }
          else {
            lscondtn = lscondioln.split("~");
            var lsval = "";
            if (lscondtn[1].indexOf("$") != -1) {
              var lsctrlname = lscondtn[1].replace("$", "");
              lsval = GetValue(lsctrlname, activestate);
            }
            if (isforloop == "N" && lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              lscondtn[1] = 'gractivepage.state.' + lscondtn[1];
              lsval = eval(lscondtn[1]);
            }
            else if (lscondtn[1].indexOf("=") != -1) {
              lscondtn[1] = lscondtn[1].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[1].replace('index', lsindex);
              lsval = eval(lsresult)
            }
            else if (lscondtn[1].indexOf("#") != -1) {
              var s = lscondtn[1].replace("#", "");
              lsval = gractivepage.state[s];
            }
            else {
              lsval = lscondtn[1];
            }
            if (lscondtn[0].indexOf("$") != -1) {
              lscondtn[0] = lscondtn[0].replace("$", "");
              lscondtn[0] = GetValue(lscondtn[0], activestate);
            }
            else if (isforloop == "N" && lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              lscondtn[0] = 'gractivepage.state.' + lscondtn[0];
              lscondtn[0] = eval(lscondtn[0]);
            }
            else if (lscondtn[0].indexOf("=") != -1) {
              lscondtn[0] = lscondtn[0].replace("#=", "");
              var lsindex = eval(index);
              var lsresult = lscondtn[0].replace('index', lsindex);
              lscondtn[0] = eval(lsresult)
            }
            else if (lscondtn[0].indexOf("#") != -1) {
              lscondtn[0] = lscondtn[0].replace("#", "");
              lscondtn[0] = gractivepage.state[lscondtn[0]];
            }
            else {
              lscondtn[0] = lscondtn[0];
            }
            var ls = { where: lscondtn[0], value: lsval };
            lsfilter.push(ls);
          }
        }
        gsheet.DeleteRecSet(lsconnectorname, lssheetname, "A", "Z", lsfilter).then((response) => {
          if (response.status == true) {
            if (callbackvt != undefined && callbackvt.length > 0) {
              Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
            }
          }
          if (response.status == false) {
            if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
            }
          }
        });
      },

      //Add Global variables method  
      variables: function (data) {
        var lsvarname = data.find("varname");
        var lsdattype = data.find("datatype");
        var lsvalue = data.find("value");
        lsvarname = changevalue(lsvarname);
        var callbackvt = data.data.callbackaction;
        if (callbackvt != undefined && callbackvt.length > 0) {
          gractivepage.setState({ [lsvarname]: lsvalue }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
        }
        else
          gractivepage.setState({ [lsvarname]: lsvalue });
        //gractivepage.setState({spinner:false});
      },

      //Drawer menu open event method
      draweropen: function (data) {
        //var callbackvt= data.data.callbackaction;
        var callbackvt = data.data.callbackaction;
        Orefuncs.OpenDrawer(gractivepage.props.navigation);
        if (callbackvt != undefined && callbackvt.length > 0) {
          Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
        }
        //gractivepage.setState({spinner:false});
      },
      //Add google sheet execution method     
      gsheet: function (data) {

        var lsconnectorname = data.find("Connector");
        var lssheetname = data.find("sheetname");
        var lsrangrfrm = data.find("rangefrm");
        var lsrangeto = data.find("rangeto");
        var lsvalue = data.find("values");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        var lsarrayval = [];
        lsvalue = lsvalue.split(",");
        for (j = 0; j <= lsvalue.length - 1; j++) {
          if (lsvalue[j].indexOf("$") != -1) {
            var s = lsvalue[j].replace("$", "");
            lsarrayval.push(Orefuncs.GetValue(s, activestate));
          }
          else if (isforloop == "N" && lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            lsvalue[j] = 'gractivepage.state.' + lsvalue[j];
            lsvalue[j] = eval(lsvalue[j]);
            lsarrayval.push(lsvalue[j]);
          }
          else if (lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsvalue[j].replace('index', lsindex);
            lsarrayval.push(lsvalue[j]);
          }
          else if (lsvalue[j].indexOf("#") != -1) {
            var ls = lsvalue[j].replace("#", "");
            var s = gractivepage.state[ls];
            lsarrayval.push(s);
          }
          else {
            lsarrayval.push(lsvalue[j]);
          }
        }
        lsarrayval = JSON.stringify(lsarrayval);

        gsheet.AddRecSet(lsconnectorname, lssheetname, lsrangrfrm, lsrangeto, lsarrayval).then(res => {
          if (res.status == true) {
            if (callbackvt != undefined && callbackvt.length > 0) {
              Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
            }
          }
          if (res.status == false) {
            if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage);
            }
          }
          //gractivepage.setState({spinner:false});
        });
      },


      // respective data returned against the method will assigned in state variable  
      assign: function (data) {
        //alert('hi')
        var lsvariablename = data.find("variable");
        var lsconetortype = data.find("GET");
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        if (lsconetortype != "get" && lsconetortype != "getprop" && lsconetortype != "date" && lsconetortype != "getapi" && lsconetortype != "time" && lsconetortype != "randamno" && lsconetortype != "info" && lsconetortype != "getstyle" && lsconetortype != "gettext" && lsconetortype != "getproperty" && lsconetortype != "getcontrolval") {
          var lsqury = data.data.fields[1].fields[1].value;
          var lsconnectorname = data.data.fields[1].fields[0].value;
        }
        //var lsconnectorname=data.find("Connector");
        //this.alert(editingvalue)
        // lsqury="select top 1* FROM Ophrys.oremprobjects "
        // this.alert(lsconnectorname+lsqury)
        if (lsconetortype == "getsql") {
          var regexvar = /\#(.*?)\#/gi;
          var resultMatchGroupvar = lsqury.match(regexvar);
          if (resultMatchGroupvar != null) {
            var desiredResvar = resultMatchGroupvar.map(match => match.replace(regexvar, "$1"))
            for (var i = 0; i <= desiredResvar.length - 1; i++) {
              var hs = desiredResvar[i]
              var lsval = gractivepage.state[hs];
              //lsval=eval(lsval)
              hs = "#" + hs + "#";
              lsqury = lsqury.replace(hs, lsval)
            }
          }
          var regexcontrol = /\$(.*?)\$/gi;
          //alert(lsqury)
          var resultMatchGroupcontrol = lsqury.match(regexcontrol); // [ '[more or less]', '[more]', '[less]' ]
          if (resultMatchGroupcontrol != null) {
            var desiredRescontrol = resultMatchGroupcontrol.map(match => match.replace(regexcontrol, "$1"))
            var s; for (var i = 0; i <= desiredRescontrol.length - 1; i++) {
              var hs = desiredRescontrol[i];
              var lsval = Orefuncs.GetValue(hs, activestate)
              hs = "$" + hs + "$";
              lsqury = lsqury.replace(hs, lsval);
            }
          }
          mssql.GetRecSet(lsconnectorname, lsqury).then(res => {
            //alert(res.status)
            if (res.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                //	alert(res.data)
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
            }
            //alert(callbackfalse)
            else if (callbackfalse != undefined && callbackfalse.length > 0) {
              Orefuncs.Runcallback(callbackfalse, activestate, gractivepage)
            }

            else {
              gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) });
            }
            //gractivepage.setState({spinner:false});          
          });
        }
        else if (lsconetortype == 'getapi') {
          //alert("call")
          var lsparam = {};
          var lstype = data.data.fields[1].fields[5].value;
          var lsurl = data.data.fields[1].fields[6].value;
          var lsparamdetails = data.data.fields[1].fields[3].value;
          var lsheaderdetails = data.data.fields[1].fields[4].value;
          var lsmethodname = data.data.fields[1].fields[1].value;
          // alert(lsparamdetails)
          if (lsparamdetails != "")
            lsparamdetails = JSON.parse(lsparamdetails);
          var callbackvt = data.data.callbackaction;
          var callbackfalse = data.data.callbackfailureaction;
          //alert(JSON.stringify(lsparamdetails))
          //gractivepage.setState({spinner:false});
          console.log(lsparamdetails)
          for (var i = 0; i <= lsparamdetails.length - 1; i++) {
            var lsname = lsparamdetails[i].getparameter;
            var value = lsparamdetails[i].getvaluefinal;
            //alert(value)
            if (isforloop == "N" && value.indexOf("=") != -1) {
              value = value.replace("#=", "");
              value = 'gractivepage.state.' + value;
              value = eval(value);
            }
            if (value.indexOf("=") != -1) {
              value = value.replace("#=", "");
              var lsindex = eval(index);
              var lsresult = value.replace('index', lsindex);
              //alert(lsresult)
              value = eval(lsresult)
            }
            if (value.indexOf("#") != -1) {
              value = value.replace("#", "");
              value = gractivepage.state[value];
              // alert("alert"+message)
            }
            else if (value.indexOf("$") != -1) {
              value = value.replace("$", "");
              value = Orefuncs.GetValue(value, activestate);
            }
            lsparam[lsname] = value;
          }
          // alert(JSON.stringify(lsheaderdetails))
          lsheaderdetails = JSON.parse(lsheaderdetails);
          if (lsheaderdetails == null || lsheaderdetails == '[]')
            lsheaderdetails = [];
          //alert(lstype+lsurl+JSON.stringify(lsparam)+JSON.stringify(lsheaderdetails))
          if (lsheaderdetails == undefined)
            lsheaderdetails = []
          lsurl = lsurl + "/" + lsmethodname;
          // alert(lsurl)
          console.log(lsparam)
          OreApibind.RequestAPI(lstype, lsurl, lsparam, lsheaderdetails).then((res) => {
            console.log(JSON.stringify(res))
            if (res.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                //	alert(JSON.stringify(res.data))
                gractivepage.setState({ [lsvariablename]: res.data }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
            }
            //alert(callbackfalse)
            else if (callbackfalse != undefined && callbackfalse.length > 0) {
              gractivepage.setState({ [lsvariablename]: res.data }, () => Orefuncs.Runcallback(callbackfalse, activestate, gractivepage))
            }
            else {
              gractivepage.setState({ [lsvariablename]: res.data });
            }
            //gractivepage.setState({spinner:false});
          });
        }
        else if (lsconetortype == "gettext") {
          //this.alert(data.data.fields[1].fields[0].value)
          var lskey = data.data.fields[1].fields[0].value;
          // this.alert(lsvariablename) 
          var callbackvt = data.data.callbackaction;
          var lsdata = Orefuncs.GetText(lskey, activestate);
          // this.alert(lsdata)
          if (callbackvt != undefined && callbackvt.length > 0) {
            // alert(lsdata)
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "getcontrolval") {
          var lskey = data.data.fields[1].fields[0].value;
          // this.alert(lsvariablename) 
          var lsdata = Orefuncs.GetValue(lskey, activestate);
          // this.alert(lsdata)
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "getproperty") {
          //this.alert(data.data.fields[1].fields[0].value)
          var lskey = data.data.fields[1].fields[0].value;
          var lskeyprop = data.data.fields[1].fields[1].value;
          var lsdata = Orefuncs.GetProperty(lskey, activestate, lskeyprop);
          // alert(JSON.stringify(callbackvt))
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "getstyle") {
          //this.alert(data.data.fields[1].fields[0].value)
          var lskey = data.data.fields[1].fields[0].value;
          var lskeyprop = data.data.fields[1].fields[1].value;
          //this.alert(lskeyprop)
          var lsdata = Orefuncs.GetStyle(lskey, activestate, lskeyprop);
          //alert("st"+lsdata)
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "info") {
          //this.alert(data.data.fields[1].fields[0].value)
          var lskey = data.data.fields[1].fields[0].value;
          var lsdata = Orefuncs.GetDeviceInfo(lskey);
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "randamno") {

          var lslength = data.data.fields[1].fields[0].value;
          var lsseries = data.data.fields[1].fields[1].value;
          var lsprefix = data.data.fields[1].fields[2].value;
          //this.alert(lslength+lsseries+lsprefix)
          var lsdata = Orefuncs.RandomNumber(lslength, lsseries, lsprefix);
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "get") {
          //this.alert(data.data.fields[1].fields[0].value)
          var lskey = data.data.fields[1].fields[0].value;
          var lsdata = Orefuncs.GetLocalStorage(lskey);
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "date") {

          //this.alert(JSON.stringify(lsparmdata))
          general.GetCurrentDate().then((response) => {
            //this.alert(response.data)
            if (response.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                gractivepage.setState({ [lsvariablename]: response.data }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
            }
            else {
              if (callbackfalse != undefined && callbackfalse.length > 0) {
                Orefuncs.Runcallback(callbackfalse, activestate, gractivepage)
              }

            }

            //gractivepage.setState({spinner:false});
          });
          //this.alert(data)

        }
        else if (lsconetortype == "time") {

          //this.alert(JSON.stringify(lsparmdata))
          general.GetCurrentTime().then((response) => {
            //this.alert(response.data)
            if (response.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                gractivepage.setState({ [lsvariablename]: response.data }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
            }
            else {
              if (callbackfalse != undefined && callbackfalse.length > 0) {
                Orefuncs.Runcallback(callbackfalse, activestate, gractivepage)
              }
            }
            //gractivepage.setState({spinner:false});
          });
          //this.alert(data)

        }
        else if (lsconetortype == "getprop") {
          var lsparmdata = gractivepage.props.navigation.state.params;
          //this.alert(JSON.stringify(lsparmdata))

          var data = Orefuncs.GetParmValue(lsparmdata);
          //this.alert(data)
          if (callbackvt != undefined && callbackvt.length > 0) {
            gractivepage.setState({ [lsvariablename]: data }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
          }
          else
            gractivepage.setState({ [lsvariablename]: lsdata });
          //gractivepage.setState({spinner:false});
        }
        else if (lsconetortype == "getmysql") {

          var regexvar = /\#(.*?)\#/gi;
          var resultMatchGroupvar = lsqury.match(regexvar);
          if (resultMatchGroupvar != null) {
            var desiredResvar = resultMatchGroupvar.map(match => match.replace(regexvar, "$1"))


            for (var i = 0; i <= desiredResvar.length - 1; i++) {
              var hs = desiredResvar[i]
              var lsval = gractivepage.state[hs];
              //lsval=eval(lsval)
              hs = "#" + hs + "#";
              lsqury = lsqury.replace(hs, lsval)

            }
          }

          var regexcontrol = /\$(.*?)\$/gi;

          var resultMatchGroupcontrol = lsqury.match(regexcontrol); // [ '[more or less]', '[more]', '[less]' ]
          if (resultMatchGroupcontrol != null) {
            var desiredRescontrol = resultMatchGroupcontrol.map(match => match.replace(regexcontrol, "$1"))
            var s; for (var i = 0; i <= desiredRescontrol.length - 1; i++) {
              var hs = desiredRescontrol[i];
              var lsval = Orefuncs.GetValue(hs, activestate)
              hs = "$" + hs + "$";
              lsqury = lsqury.replace(hs, lsval);
            }
          }

          mysql.GetRecSet(lsconnectorname, lsqury).then(res => {

            if (res.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
            }
            if (res.status == false) {
              if (callbackfalse != undefined && callbackfalse.length > 0) {
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) }, () => Orefuncs.Runcallback(callbackfalse, activestate, gractivepage))

              }
            }
            //gractivepage.setState({spinner:false});     
          });
        }
        else if (lsconetortype == "getsheet") {

          var lsconnectorname = data.data.fields[1].fields[0].value;
          var lssheetname = data.data.fields[1].fields[1].value;
          var lsrangrfrm = data.data.fields[1].fields[2].value;
          var lsrangeto = data.data.fields[1].fields[3].value;

          var lscondioln = data.data.fields[1].fields[4].value;

          var lscondtn;
          var lsfilter = [];
          if (lscondioln == undefined || lscondioln == "") {

            lsfilter = "";
          }
          else {
            if (lscondioln.indexOf(",") != -1) {
              lscondtn = lscondioln.split(",");


              for (i = 0; i <= lscondtn.length - 1; i++) {
                var lscondtns = lscondtn[i].split("~");
                var lsval = "";
                if (lscondtns[1].indexOf("$") != -1) {
                  lscondtns[1] = lscondtns[1].replace("$", "");
                  lsval = GetValue(lscondtns[1], activestate);
                }
                else if (isforloop == "N" && lscondtns[1].indexOf("=") != -1) {
                  lscondtns[1] = lscondtns[1].replace("#=", "");
                  lscondtns[1] = 'gractivepage.state.' + lscondtns[1];
                  lscondtns[1] = eval(lscondtns[1]);
                  lsval = lscondtns[1];
                }

                else if (lscondtns[1].indexOf("#=") != -1) {

                  lscondtns[1] = lscondtns[1].replace("#=", "");
                  var lsindex = eval(index);
                  var lsresult = lscondtns[1].replace('index', lsindex);
                  lsval = lsresult;

                }
                else if (lscondtns[1].indexOf("#") != -1) {
                  lscondtns[1] = lscondtns[1].replace("#", "");
                  lsval = gractivepage.state[lscondtns[1]];
                }
                else {
                  lsval = lscondtns[1];
                }
                if (lscondtns[0].indexOf("$") != -1) {

                  lscondtns[0] = lscondtns[0].replace("$", "");
                  lscondtns[0] = GetValue(lscondtns[0], activestate);

                }
                else if (isforloop == "N" && lscondtns[0].indexOf("=") != -1) {
                  lscondtns[0] = lscondtns[0].replace("#=", "");
                  lscondtns[0] = 'gractivepage.state.' + lscondtns[0];
                  lscondtns[0] = eval(lscondtns[0]);

                }

                else if (lscondtns[0].indexOf("=") != -1) {

                  lscondtns[0] = lscondtns[0].replace("#=", "");
                  var lsindex = eval(index);
                  var lsresult = lscondtns[0].replace('index', lsindex);
                  lscondtns[0] = eval(lsresult)

                }
                else if (lscondtns[0].indexOf("#") != -1) {
                  lscondtns[0] = lscondtns[0].replace("#", "");
                  lscondtns[0] = gractivepage.state[lscondtns[0]];


                }
                else {
                  lscondtns[0] = lscondtns[0];
                }

                var ls = { where: lscondtns[0], value: lsval };
                lsfilter.push(ls)
              }
            }

            else {
              lscondtn = lscondioln.split("~");
              var lsval = "";
              if (lscondtn[1].indexOf("$") != -1) {
                lscondtn[1] = lscondtn[1].replace("$", "");
                lsval = GetValue(lscondtn[1], activestate);
              }

              else if (isforloop == "N" && lscondtn[1].indexOf("=") != -1) {
                lscondtn[1] = lscondtn[1].replace("#=", "");
                lscondtn[1] = 'gractivepage.state.' + lscondtn[1];
                lscondtn[1] = eval(lscondtn[1]);
                lsval = lscondtn[1];

              }
              else if (lscondtn[1].indexOf("#=") != -1) {
                lscondtn[1] = lscondtn[1].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtn[1].replace('index', lsindex);
                lsval = lsresult;
              }
              else if (lscondtn[1].indexOf("#") != -1) {
                lscondtn[1] = lscondtn[1].replace("#", "");
                lsval = gractivepage.state[lscondtn[1]];
              }
              else {
                lsval = lscondtn[1];
              }
              if (lscondtn[0].indexOf("$") != -1) {
                lscondtn[0] = lscondtn[0].replace("$", "");
                lscondtn[0] = GetValue(lscondtn[0], activestate);
              }
              else if (isforloop == "N" && lscondtn[0].indexOf("=") != -1) {
                lscondtn[0] = lscondtn[0].replace("#=", "");
                lscondtn[0] = 'gractivepage.state.' + lscondtn[0];
                lscondtn[0] = eval(lscondtn[0]);
              }
              else if (lscondtn[0].indexOf("=") != -1) {
                lscondtn[0] = lscondtn[0].replace("#=", "");
                var lsindex = eval(index);
                var lsresult = lscondtn[0].replace('index', lsindex);
                lscondtn[0] = eval(lsresult)
              }
              else if (lscondtn[0].indexOf("#") != -1) {
                lscondtn[0] = lscondtn[0].replace("#", "");
                lscondtn[0] = gractivepage.state[lscondtn[0]];
              }
              else {
                lscondtn[0] = lscondtn[0];
              }
              var ls = { where: lscondtn[0], value: lsval };
              lsfilter.push(ls);
            }
          }
          gsheet.GetRecSet(lsconnectorname, lssheetname, "A", "Z", lsfilter).then(res => {
            if (res.status == true) {
              if (callbackvt != undefined && callbackvt.length > 0) {
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
              }
              else {
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) });
              }
            }
            if (res.status == false) {
              if (callbackfalse != undefined && callbackfalse.length > 0) {
                gractivepage.setState({ [lsvariablename]: JSON.parse(res.data) }, () => Orefuncs.Runcallback(callbackfalse, activestate, gractivepage))
              }
            }
          });
        }
      },
      //update control values executio nmethod
      update: function (data) {
        var fieldId = data.find("fieldId");
        var message = data.find("message")
        var callbackvt = data.data.callbackaction;
		
		
		
		
		
		
        if (message == "") {
          Orefuncs.SetValue(fieldId, activestate, '');
		  
        }
		else
			
			{
				
				var lsreturnval=changemultiplevalue(message)
				
			}
		
		
		
		
       /* if (isforloop == "N" && message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          message = 'gractivepage.state.' + message;
          message = eval(message);
        }
        else if (message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          var lsindex = eval(index);
          var lsresult = message.replace('index', lsindex);
          message = lsresult;
        }
        else if (message.indexOf("#") != -1) {
          message = message.replace("#", "");
          message = gractivepage.state[message];
        }
        else if (message.indexOf("$") != -1) {
          message = message.replace("$", "");
          var _screenStyles = activestate.StyleJSON;
          if (_screenStyles[message] == undefined) { return }
          var controltype = _screenStyles[message].type;
          var ctrlval;
          if (controltype == "Picker")
            message = Orefuncs.GetText(message, activestate);
          else
            message = Orefuncs.GetValue(message, activestate);
        }*/
        Orefuncs.SetValue(fieldId, activestate, lsreturnval);
        //gractivepage.setState({spinner:false});
        return false;
        if (data.find("type") == "direct") {

          var message = data.data.fields[1].fields[0].value;
          if (message.indexOf("$") != -1) {
            var _screenStyles = activestate.StyleJSON;
            if (_screenStyles[message] == undefined) { return }
            var controltype = _screenStyles[message].type;
            var ctrlval;
            if (controltype == "Picker")
              message = Orefuncs.GetText(message, activestate);
            else
              message = Orefuncs.GetValue(message, activestate);
          }
          else {
            var editingvalue = data.data.fields[1].fields[0].value;
            var s;
            if (editingvalue.indexOf("#") != -1) {
              var lsvalue = editingvalue.replace("#", "");
              s = gractivepage.state[lsvalue];
              s = s.toString()
              message = s;
            }
          }
          Orefuncs.SetValue(fieldId, activestate, message);
          return false;
        }
        var editingvalue = data.data.fields[1].fields[0].value;
        var s;
        if (editingvalue.indexOf("#") != -1) {
          var lsvalue = editingvalue.replace("#", "");
          s = gractivepage.state[lsvalue];
          s = s.toString();
          message = s;
        }
        else {
          s = gractivepage.state[editingvalue];
          s = s.toString();
          message = s;
        }
        Orefuncs.SetValue(fieldId, activestate, message);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
      },
      //set style properties against the control using this method
      setstyle: function (data) {
        var lsctrlname = data.find("control");
        var lsvarname = data.find("value");
        var callbackvt = data.data.callbackaction;
        var correctJson = lsvarname.replace(/(['"])?([a-z0-9A-Z_]+)(['"])?:/g, '"$2": ');
        correctJson = JSON.parse(correctJson);
        Orefuncs.SetStyle(lsctrlname, activestate, correctJson)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
      },
      //settext properties against the control using this method
      settext: function (data) {
        var lsctrlname = data.find("control");
        var message = data.find("value");
        var callbackvt = data.data.callbackaction;
        // var lsctrlval=orefuncs.GetValue(lsctrtTlname,activestate);
        // var message = data.find("message");
		
		var lsreturnval=changemultiplevalue(message)
		
      /*  if (isforloop == "N" && message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          message = 'gractivepage.state.' + message;
          message = eval(message);
        }
        else if (message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          var lsindex = eval(index);
          var lsresult = message.replace('index', lsindex);
          message = lsresult;
        }
        else if (message.indexOf("#") != -1) {
          message = message.replace("#", "");
          message = gractivepage.state[message];
        }
        else if (message.indexOf("$") != -1) {
          message = message.replace("$", "");
          message = Orefuncs.GetValue(message, activestate);
        }*/
        Orefuncs.SetText(lsctrlname, activestate, lsreturnval)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
        return false;
      },
      //set properties against the control using this method
      setproperty: function (data) {
        var lsctrlname = data.find("fieldId");
        var lsvarname = data.find("value");
        var callbackvt = data.data.callbackaction;
        var correctJson = lsvarname.replace(/(['"])?([a-z0-9A-Z_]+)(['"])?:/g, '"$2": ');
        correctJson = JSON.parse(correctJson);

        Orefuncs.SetProperty(lsctrlname, activestate, correctJson)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },

      //To visible control at runtime
      Show: function (data) {
        var fieldId = data.find("fieldId");
        var callbackvt = data.data.callbackaction;

        if (activestate != undefined)
          Orefuncs.SetVisible(fieldId, activestate);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      //To hide contrl at runtime    
      Hide: function (data) {
        var fieldId = data.find("fieldId");
        var callbackvt = data.data.callbackaction;

        if (activestate != undefined)
          Orefuncs.SetHide(fieldId, activestate);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);

      },
      //To disable control at runtime     
      disabled: function (data) {
        var fieldId = data.find("fieldId");
        var callbackvt = data.data.callbackaction;
        if (activestate != undefined)
          Orefuncs.SetDisable(fieldId, activestate)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      //To enable control at runtime     
      enabled: function (data) {
        var fieldId = data.find("fieldId");
        var callbackvt = data.data.callbackaction;
        if (activestate != undefined)
          Orefuncs.SetEnable(fieldId, activestate)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      //To call api which was mapped in definition for data bind control
      setapi: function (data) {
        var lsctrlname = data.find("controlname");
        var lsvarname = data.find("varnme");
        var callbackvt = data.data.callbackaction;
        OreApibind.SetApiData(lsctrlname, activestate, lsvarname)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);

      },

      //to filter JSon data based on SQL methods
      datafilter(data) {
        var message = data.data.fields[0].value;
        var callbackvt = data.data.callbackaction;
        var callbackfalse = data.data.callbackfailureaction;
        //  message=changevalue(message);
        //if(message.indexOf("#")!=-1)
        // {
        message = message.replace("#", "");
        var lsoriginvar = message;
        message = gractivepage.state[message];
        //}
        var lstype = data.data.fields[1].value;
        if (lstype == "where") {
          var lscolumnname = data.data.fields[1].fields[0].value;
          lscolumnname = changevalue(lscolumnname);
          var lsoperator = data.data.fields[1].fields[1].value;
          var lsfiltervalue = data.data.fields[1].fields[2].value;
          lsfiltervalue = changevalue(lsfiltervalue);
          var lsretunval = data.data.fields[1].fields[3].value;
          if (lsretunval != "" && lsretunval != undefined)
            lsretunval = changevalue(lsretunval);
          var lsdata = OreDataFiltering.filterdata(message, lscolumnname, lsoperator, lsfiltervalue, lsretunval);
        }
        if (lstype == "count") {
          var lsdata = OreDataFiltering.count(message);
        }
        if (lstype == "remove") {
          var lscolumnname = data.data.fields[1].fields[0].value;
          lscolumnname = changevalue(lscolumnname);
          var lsfiltervalue = data.data.fields[1].fields[1].value;
          lsfiltervalue = changevalue(lsfiltervalue);
          var lsdata = OreDataFiltering.remove(message, lscolumnname, lsfiltervalue);
        }
        if (lstype == "sum") {
          var lscolumnname = data.data.fields[1].fields[0].value;
          lscolumnname = changevalue(lscolumnname);
          var lsdata = OreDataFiltering.sum(message, lscolumnname, "");
        }
        if (lstype == "average") {
          var lscolumnname = data.data.fields[1].fields[0].value;
          lscolumnname = changevalue(lscolumnname);
          var lsdata = OreDataFiltering.average(message, lscolumnname, "");
        }
        if (callbackvt != undefined && callbackvt.length > 0) {
          gractivepage.setState({ [lsoriginvar]: lsdata }, () => Orefuncs.Runcallback(callbackvt, activestate, gractivepage))
        }
        else if (callbackfalse != undefined && callbackfalse.length > 0) {
          gractivepage.setState({ [lsoriginvar]: lsdata }, () => Orefuncs.Runcallback(callbackfalse, activestate, gractivepage))
        }
        else {
          gractivepage.setState({ [lsoriginvar]: lsdata });
        }
      },

      imageconvert: function (data) {
        var lsctrlid = data.find("controlId");
        var lsimgurl = data.find("url");
        var callbackvt = data.data.callbackaction;
        Orefuncs.Imagetobase64(lsctrlid, lsimgurl);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      //To navigate from one to another page
      navigateto: function (data) {

        var val = data.find("fieldId");

        var lsparam = data.find("param");
        var callbackvt = data.data.callbackaction;

        var lsarrayval = "";
        lsvalue = lsparam.split(",");


        for (j = 0; j <= lsvalue.length - 1; j++) {

          if (lsvalue[j].indexOf("$") != -1) {

            lsvalue[j] = lsvalue[j].replace("$", "");

            lsarrayval = GetValue(lsvalue[j], activestate);
          }
          if (isforloop == "N" && lsvalue[j].indexOf("=") != -1) {
            lsvalue[j] = lsvalue[j].replace("#=", "");
            lsvalue[j] = 'gractivepage.state.' + lsvalue[j];
            lsvaluue[j] = eval(lsvalue[j]);


          }

          else if (lsvalue[j].indexOf("=") != -1) {

            lsvalue[j] = lsvalue[j].replace("#=", "");
            var lsindex = eval(index);
            var lsresult = lsvalue[j].replace('index', lsindex);
            lsvalue[j] = lsresult;

          }
          else if (lsvalue[j].indexOf("#") != -1) {
            lsvalue[j] = lsvalue[j].replace("#", "");
            var s = gractivepage.state[lsvalue[j]];
            lsarrayval = s;

          }
          else {
            lsarrayval = lsvalue[j];
          }

        }

        Orefuncs.NavigateTo(gractivepage.props.navigation, val, lsarrayval)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);

      },

      //Assign values to localstorage	  
      setlocal: function (data) {

        var fieldId = data.find("key")


        var message = data.find("message");
        var callbackvt = data.data.callbackaction;
        if (isforloop == "N" && message.indexOf("=") != -1) {
          message = message.replace("#=", "");
          message = 'gractivepage.state.' + message;
          message = eval(message);


        }

        else if (message.indexOf("=") != -1) {

          message = message.replace("#=", "");
          var lsindex = eval(index);
          var lsresult = message.replace('index', lsindex);
          message = lsresult;

        }
        else if (message.indexOf("#") != -1) {
          message = message.replace("#", "");
          message = gractivepage.state[message];

        }
        else if (message.indexOf("$") != -1) {
          message = message.replace("$", "");
          message = Orefuncs.GetValue(message, activestate);
        }

        Orefuncs.SetLocalStorage(fieldId, message);
        //gractivepage.setState({spinner:false});
        return false;

        if (data.find("fieldId") == "direct") {
          //this.alert(JSON.stringify(data.data.fields[1]))
          var message = data.data.fields[1].fields[0].value;
          //this.alert(message)
          if (message.indexOf("#") != -1) {
            message = message.replace("#", "");
            message = gractivepage.state[message];

          }
          Orefuncs.SetLocalStorage(fieldId, message)
          return false;
        }
        var editingvalue = data.data.fields[0].fields[0].fields[0].value;

        var s;
        if (editingvalue.indexOf("~") == 0) {

          var lsvalue = editingvalue.replace("~", "");


          s = gractivepage.state[lsvalue];
          s = s.toString()
        }
        else {

          s = GetValue(editingvalue, activestate);
          // s = s.toString()

        }

        Orefuncs.SetLocalStorage(fieldId, s)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);


      },
      //Remove local storage value
      removelocal(data) {
        var lskey = data.find("key");
        var callbackvt = data.data.callbackaction;
        Orefuncs.RemoveLocalStorage(lskey);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      //Navigate back to previous page    
      navigateback: function () {

        Orefuncs.NavigateBack(gractivepage.props.navigation);

      },

      // Resetting Page State 
      resetpagestate: function () {

        Orefuncs.ResetPageState(gractivepage)

      },

      //Api binding executionmethod
      CallAPI: function (data) {
        var ctrlname = data.find("controlname");
        var callbackvt = data.data.callbackaction;
        var ctrlcode = data.find("codeval");
        var methodval = data.find("methodval");
        if (ctrlname == "") {
          OreApibind.RequestAPINew(gractivepage, ctrlcode, methodval).then(res => {
          });
        }
        else {
          //console.log(ctrlcode, methodval, ctrlname)
          OreApibind.SetDataBindNew(gractivepage, ctrlcode, methodval, ctrlname).then(res => {

          });

        }
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, gractivepage, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
      SetDataBinding: function (data) {
        var ctrlname = data.find("controlname");
        var callbackvt = data.data.callbackaction;        
        OreApibind.SetDataBinding(gractivepage, ctrlname)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, gractivepage, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },
    
      playnext:function(data){
         var ctrlname = data.find("controlId");
         Orefuncs.playNext(gractivepage,ctrlname)
      },
     playprevious:function(data){
         var ctrlname = data.find("controlId");
         Orefuncs.playPrevious(gractivepage,ctrlname)
     },

      CallModal: function (data) {
        var ctrlname = data.find("controlname");
        var callbackvt = data.data.callbackaction;      
        OreApibind.SetDataBinding(gractivepage, ctrlname)
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, gractivepage, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },

      //To execute method which was predefined against the opage
      CallMethods: function (data) {
        var s = data;
        var callbackvt = data.data.callbackaction;
        var lsfunparam = "gractivepage.";
        for (i = 0; i <= s.data.fields.length - 1; i++) {
          lsfunparam += s.data.fields[i].value + "(";
          var lsf = s.data.fields[i].fields
          for (j = 0; j <= lsf.length - 1; j++) {
            lsfunparam += "'" + s.data.fields[i].fields[j].value + "',";
          }

          lsfunparam = lsfunparam.substring(0, lsfunparam.length - 1)
        } lsfunparam += ")";

        eval(lsfunparam);
        setTimeout(function () {
          if (callbackvt != undefined && callbackvt.length > 0) {
            Orefuncs.Runcallback(callbackvt, activestate, gractivepage);
          }
        }, 500);
        //gractivepage.setState({spinner:false});
      },

    };

    engine.run(conditionsAdapter, actionsAdapter);


  }
  //Navigate to sub method
  function NavigateTo(probsName, pageName) {
    try {

      const { navigate } = probsName;

      navigate(pageName);
    }
    catch (e) {
      OreAlert.alert(e);
    }
  }


  //Sethide sub method
  function SetHide(controlName, stateValue) {
    try {

      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        var _styleName;
        if (_controlStyle) {
          var lscontrolStyle;
          var editingStyle;
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton: case OreControlType.OreTextBox: case OreControlType.OreImage: case OreControlType.OreSwitch: case OreControlType.OreDatePicker:
              _styleName = "styles";
              break;
            case OreControlType.OreRadioButton: case OreControlType.OreFilePicker:
              _styleName = "viewStyle";
              break;
            case OreControlType.OrePicker:
              _styleName = "style";
              break;
          }
          lscontrolStyle = _controlStyle[_styleName];
          editingStyle = { 'display': "none", position: "relative" };
          _controlStyle[_styleName] = Object.assign({}, lscontrolStyle, editingStyle);
          SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  }
  //#endregion

  //Sub method for setstyle
  function SetScreenStyle(ScreenName, ScreenStyle) {
    try {
      //Validte Particular screen object available or not. 
      window[ScreenName].setState({ StyleJSON: ScreenStyle });
    } catch (e) {
      OreAlert.alert(e + "in Method:SetStyle ControlName:" + controlName + "");
    }
  }

  //Control visible execution method
  function SetVisible(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        var _styleName;
        if (_controlStyle) {
          switch (_controlStyle.type) {
            case OreControlType.OreText: case OreControlType.OreButton: case OreControlType.OreTextBox: case OreControlType.OreImage: case OreControlType.OreSwitch: case OreControlType.OreDatePicker:
              _styleName = "styles";
              break;
            case OreControlType.OreRadioButton: case OreControlType.OreFilePicker:
              _styleName = "viewStyle";
              break;
            case OreControlType.OrePicker:
              _styleName = "style";
              break;
          }
          var lscontrolStyle = _controlStyle[_styleName];
          var editingStyle = { 'display': "flex", position: "absolute" };
          _controlStyle[_styleName] = Object.assign({}, lscontrolStyle, editingStyle);
          SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          OreAlert.alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  }

  //Control value get method
  function GetValue(controlName, stateValue) {
    try {
      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lsreturnText;
          switch (_controlStyle.type) {
            case OreControlType.OreTextBox:
              lsreturnText = _controlStyle['Property']['value'];
              return lsreturnText;
            case OreControlType.OreCheckBox:
              lsreturnText = _controlStyle['Property']['Value'];
              return lsreturnText;
            case OreControlType.OreRadioButton:
              lsreturnText = _controlStyle['Property']['selected'];
              return lsreturnText;
            case OreControlType.OreSwitch:
              lsreturnText = _controlStyle['Property']['Value'];
              return lsreturnText;
            case OreControlType.OreDatePicker:
              lsreturnText = _controlStyle['Property']['defaultValue'];
              return lsreturnText;
            case OreControlType.OrePicker:
              lsreturnText = _controlStyle['Property']['selected'];
              return lsreturnText;
          }
        }
        else {
          alert("Control Name " + controlName + " not Found")
        }
      }
    }
    catch (e) {
      OreAlert.alert(e + "in Method:GetText ControlName:" + controlName + "");
    }
  }
  //#endregion

  //#region 
  var OreControlType = {
    OreTextBox: "Textarea",
    OreButton: "Button",
    OreCheckBox: "checkbox",
    OreSwitch: "switch",
    OreDatePicker: "date",
    OreText: "h1",
    OreHeader: "",
    OreFooter: "",
    OreImage: "",
    OreIcon: "",
    OreRadioButton: "radio",
    OreListview: "",
    OreCardView: "",
    OrePicker: "Picker",
    OreAlert: "",
    OreFilePicker: "",
    OreDrawer: "",
  };

  
  function changemultiplevalue(lstosubject){
	  
	  var regexvar = /\#(.*?)\#/gi;
        var resultMatchGroupvar = lstosubject.match(regexvar);
        if (resultMatchGroupvar != null) {
          var desiredResvar = resultMatchGroupvar.map(match => match.replace(regexvar, "$1"))
          for (var i = 0; i <= desiredResvar.length - 1; i++) {
            var hs = desiredResvar[i]
            var lsval = gractivepage.state[hs];
            //lsval=eval(lsval)
            hs = "#" + hs + "#";
            lstosubject = lstosubject.replace(hs, lsval)
          }
        }
		
		 var regexvar = /\#=(.*?)\#/gi;
        var resultMatchGroupvar = lstosubject.match(regexvar);
        if (resultMatchGroupvar != null && isforloop == "N") {
          var desiredResvar = resultMatchGroupvar.map(match => match.replace(regexvar, "$1"))
          for (var i = 0; i <= desiredResvar.length - 1; i++) {
            var hs = desiredResvar[i]
            var lsval = gractivepage.state[hs];
            //lsval=eval(lsval)
            hs = "#" + hs + "#";
            lstosubject = lstosubject.replace(hs, lsval)
          }
        }

        var regexcontrol = /\$(.*?)\$/gi;
        var resultMatchGroupcontrol = lstosubject.match(regexcontrol); // [ '[more or less]', '[more]', '[less]' ]
        if (resultMatchGroupcontrol != null) {
          var desiredRescontrol = resultMatchGroupcontrol.map(match => match.replace(regexcontrol, "$1"))
          var s; for (var i = 0; i <= desiredRescontrol.length - 1; i++) {
            var hs = desiredRescontrol[i];
            var lsval = Orefuncs.GetValue(hs, activestate)
            hs = "$" + hs + "$";
            lstosubject = lstosubject.replace(hs, lsval);
          }
        }
	  return lstosubject;
  }

  //To get value from either control or from variable
  function changevalue(message) {

    if (isforloop == "N" && message.indexOf("=") != -1) {
      message = message.replace("#=", "");
      message = 'gractivepage.state.' + message;
      message = eval(message);


    }

    else if (message.indexOf("=") != -1) {

      message = message.replace("#=", "");
      var lsindex = eval(index);
      var lsresult = message.replace('index', lsindex);
      message = lsresult;

    }
    else if (message.indexOf("#") != -1) {
      message = message.replace("#", "");
      message = gractivepage.state[message];

    }
    else if (message.indexOf("$") != -1) {
      message = message.replace("$", "");
      message = Orefuncs.GetValue(message, activestate);
    }
    return message;
  }

  //Purpose      :to set Particular Control Text
  function SetValue(controlName, stateValue, editingvalue) {
    try {

      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }
      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var lspropertyStyle = _controlStyle['Property'];
          var editingvalue;
          switch (_controlStyle.type) {
            case OreControlType.OreTextBox:
              editingvalue = { 'value': editingvalue };
              break;
            case OreControlType.OreCheckBox:
              editingvalue = { 'Value': editingvalue };
              break;
            case OreControlType.OreRadioButton:
              editingvalue = { 'selected': editingvalue };
              break;
            case OreControlType.OreSwitch:
              editingvalue = { 'Value': editingvalue };
              break;
            case OreControlType.OreDatePicker:
              editingvalue = { 'defaultValue': editingvalue };
              break;
            case OreControlType.OrePicker:
              editingvalue = { 'selected': editingvalue };
              break;

          }
          var _updatedStyle;

          _updatedStyle = Object.assign({}, lspropertyStyle, editingvalue)
          _controlStyle['Property'] = _updatedStyle

          SetScreenStyle(stateValue.pagename, _screenStyle)
        }
        else {
          alert("Control Name " + controlName + " not Found")
        }
      }
    }
    catch (e) {
      alert(e + "in Method:SetText ControlName:" + controlName + "");
    }
  }
  //Validte Particular screen object available or not. 
  function SetScreenStyle(ScreenName, ScreenStyle) {
    try {
      //Validte Particular screen object available or not. 

      window[ScreenName].setState({ StyleJSON: ScreenStyle });
    } catch (e) {
      alert(e + "in Method:SetStyle ControlName:" + controlName + "");
    }
  }

  //To Disable particular control at runtime
  function SetDisable(controlName, stateValue) {
    try {

      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }

      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlpropertystyle = _controlStyle['Property'];
          var _updatedStyle = Object.assign({}, _controlpropertystyle, { "disabled": true });
          _controlStyle['Property'] = _updatedStyle;
          SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          alert("Control Name " + controlName + " not Found")
        }
      }
    }
    catch (e) {
      alert(e + "in Method:SetDisable ControlName:" + controlName + "");
    }
  }
  //#endregion

  //#region 
  //Purpose      :to set Particular Control Enable
  function SetEnable(controlName, stateValue) {
    try {

      if (stateValue == "" || stateValue == undefined || stateValue == "undefined") {
        stateValue = window["Page_01"].state;
      }

      if (controlName && controlName != "") {
        var _screenStyle = stateValue.StyleJSON;
        var _controlStyle = _screenStyle[controlName];
        if (_controlStyle) {
          var _controlpropertystyle = _controlStyle['Property'];
          var _updatedStyle = Object.assign({}, _controlpropertystyle, { "disabled": false });
          _controlStyle['Property'] = _updatedStyle;
          SetScreenStyle(stateValue.pagename, _screenStyle);
        }
        else {
          alert("Control Name " + controlName + " not Found");
        }
      }
    }
    catch (e) {
      alert(e + " in Method:SetEnable ControlName:" + controlName);
    }
  }
  if (typeof module !== "undefined") {
    module.exports = initengine;
    delete global.RuleEngine;
  }
})();