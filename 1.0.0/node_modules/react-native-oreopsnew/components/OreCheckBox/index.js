// IOP control code for CheckBox is CNT_MC_944
import React, { Component } from 'react';
import { StyleSheet, View, Text, Platform } from 'react-native';
import CheckBox from '@react-native-community/checkbox';
import { TouchableOpacity } from 'react-native-gesture-handler';
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()

// CheckBox control Template
export default class OreCheckBox extends Component {
  constructor(props) {
    super(props)
    this.state = {
      dataSource: []
    }
  }

  componentDidMount() {
    const rows = this.getRowData(this.props)
    this.setState({ dataSource: rows })
  }

  componentWillReceiveProps(nextProps) {
    const rows = this.getRowData(nextProps)
    this.setState({ dataSource: rows })
  }

  getRowData({ dataSource, selectedItems }) {
    if (!selectedItems || selectedItems == 'undefined' || selectedItems == {} || selectedItems == " " || selectedItems == "null")
      selectedItems = [];
    if (dataSource) {
      dataSource.forEach((item) => {
        item.selected = selectedItems.some((i) => i === item[this.props.valueField])
      })
      return dataSource
    } else {
      return []
    }
  }

  onItemSelected = (item) => {
    let selectedItems = this.props.selectedItems;
    if (!selectedItems || selectedItems == 'undefined' || selectedItems == {} || selectedItems == " " || selectedItems == "null") {
      selectedItems = [];
    }
    const index = selectedItems.findIndex((selectedItem) => selectedItem === item[this.props.valueField])
    if (index > -1) {
      selectedItems = selectedItems.filter((selectedItem) => selectedItem !== item[this.props.valueField])
    } else {
      if(this.props.maxCount === 0)
      return
      if (this.props.maxCount == undefined || this.props.maxCount == '')
        selectedItems = selectedItems.concat(item[this.props.valueField])
      else if ((selectedItems.length < this.props.maxCount))
        selectedItems = selectedItems.concat(item[this.props.valueField])
    }
    this.props.onValueChange(selectedItems, item)
  }

  render() {
    return (
      <View pointerEvents={this.props.disabled === true ? 'none' : 'auto'} style={[OreStyle.OreCheckboxRoot, this.props.style]}>
        <View style={{ flexDirection: this.props.flexDirection ? this.props.flexDirection : GlobalCSS.checkBoxProps.flexDirection }}>
          {
            this.props.dataSource ?
              this.props.dataSource.map((item, index) => {
                return <TouchableOpacity onPress={() => this.onItemSelected(item)}>
                  <View opacity={this.props.disabled === true ? 0.5 : 1 } style={{ flexDirection: 'row', padding: 3 }}>
                    <CheckBox
                      value={item.selected}
                      disabled={this.props.disabled}
                      tintColors={this.props.tintColors && this.props.tintColors['true'] ? this.props.tintColors : {
                        true: GlobalCSS.color.primaryColor,
                        false: GlobalCSS.color.inactiveColor
                      }}
                      tintColor={this.props.tintColors && this.props.tintColors['true'] ? this.props.tintColors['false'] : GlobalCSS.color.inactiveColor}
                      onCheckColor={this.props.tintColors && this.props.tintColors['true'] ? this.props.tintColors['true'] : GlobalCSS.color.primaryColor}
                      onTintColor={this.props.tintColors && this.props.tintColors['true'] ? this.props.tintColors['true'] : GlobalCSS.color.primaryColor}
                      style={[{ alignSelf: "center", }, this.props.checkboxstyle,
                      {
                        transform: Platform.OS === 'android' ? [
                          { scaleX: this.props.textstyle.fontSize == undefined ? OreStyle.OreCheckboxText.fontSize / 14 : this.props.textstyle.fontSize / 14 },
                          { scaleY: this.props.textstyle.fontSize == undefined ? OreStyle.OreCheckboxText.fontSize / 14 : this.props.textstyle.fontSize / 14 }] : undefined
                      },
                      this.props.textstyle.fontSize == undefined ?
                        { marginRight: Platform.OS === 'android' ? 18 : 12 } :
                        { marginRight: Platform.OS === 'android' ? this.props.textstyle.fontSize : this.props.textstyle.fontSize / 1.5 },
                      this.props.textstyle.fontSize == undefined ?
                        { width: Platform.OS === 'android' ? OreStyle.OreCheckboxText.fontSize * 1 : OreStyle.OreCheckboxText.fontSize * 1.4 } :
                        { width: Platform.OS === 'android' ? this.props.textstyle.fontSize * 1 : this.props.textstyle.fontSize * 1.4 },
                      this.props.textstyle.fontSize == undefined ?
                        { height: Platform.OS === 'android' ? OreStyle.OreCheckboxText.fontSize * 1 : OreStyle.OreCheckboxText.fontSize * 1.4 } :
                        { height: Platform.OS === 'android' ? this.props.textstyle.fontSize * 1 : this.props.textstyle.fontSize * 1.4 }]}
                    />
                    <Text style={[OreStyle.OreCheckboxText, this.props.textstyle]} numberOfLines={3}>{item[this.props.nameField]}</Text>
                  </View>
                </TouchableOpacity>
              })
              :
              [].map((item, index) => {
                return <TouchableOpacity onPress={() => this.onItemSelected(item)}>
                  <View style={{ flexDirection: 'row', padding: 3 }}>
                    <CheckBox
                      value={item.selected}
                      disabled={this.props.disabled}
                      tintColors={this.props.tintColors ? this.props.tintColors : {
                        true: GlobalCSS.color.primaryColor,
                        false: GlobalCSS.color.inactiveColor
                      }}
                      tintColor={this.props.tintColors ? this.props.tintColors['false'] : GlobalCSS.color.inactiveColor}
                      onCheckColor={this.props.tintColors ? this.props.tintColors['true'] : GlobalCSS.color.primaryColor}
                      onTintColor={this.props.tintColors ? this.props.tintColors['true'] : GlobalCSS.color.primaryColor}
                      style={[{ alignSelf: "center" }, this.props.checkboxstyle,
                      {
                        transform: Platform.OS === 'android' ? [
                          { scaleX: this.props.textstyle.fontSize == undefined ? OreStyle.OreCheckboxText.fontSize / 14 : this.props.textstyle.fontSize / 14 },
                          { scaleY: this.props.textstyle.fontSize == undefined ? OreStyle.OreCheckboxText.fontSize / 14 : this.props.textstyle.fontSize / 14 }] : undefined
                      },
                      this.props.textstyle.fontSize == undefined ?
                        { marginRight: Platform.OS === 'android' ? 18 : 12 } :
                        { marginRight: Platform.OS === 'android' ? this.props.textstyle.fontSize : this.props.textstyle.fontSize / 1.5 },
                      this.props.textstyle.fontSize == undefined ?
                        { width: Platform.OS === 'android' ? OreStyle.OreCheckboxText.fontSize * 1 : OreStyle.OreCheckboxText.fontSize * 1.4 } :
                        { width: Platform.OS === 'android' ? this.props.textstyle.fontSize * 1 : this.props.textstyle.fontSize * 1.4 },
                      this.props.textstyle.fontSize == undefined ?
                        { height: Platform.OS === 'android' ? OreStyle.OreCheckboxText.fontSize * 1 : OreStyle.OreCheckboxText.fontSize * 1.4 } :
                        { height: Platform.OS === 'android' ? this.props.textstyle.fontSize * 1 : this.props.textstyle.fontSize * 1.4 }]}
                    />
                    <Text style={[OreStyle.OreCheckboxText, this.props.textstyle]} numberOfLines={3}>{item[this.props.nameField]}</Text>
                  </View>
                </TouchableOpacity>
              })}
        </View>
      </View>
    );
  }
}
