// IOP Code for Date Picker control is CNT_MC_957
import React, { Component } from 'react'
import {StyleSheet,View,Text} from 'react-native'
import DatePicker from 'react-native-datepicker'
import OreIcon from '../OreIcon'
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()

// Date Picker Control Template
export default class OreDatePicker extends Component {
 render(){
   // DatePicker with Label Template
  if(this.props.title != '' && this.props.title != undefined){ 
    return ( 
     <View style={[(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""), this.props.style]}>
        <Text style={[OreStyle.OreDatePickerTitleStyle,this.props.textStyle,(this.props.dateInput.borderWidth != undefined && this.props.dateInput.borderWidth != 0) ? {marginBottom: 5} : {marginBottom: 0}]}>{this.props.title}</Text>
        <DatePicker
        style={[this.props.viewStyle,{width : '100%'}]}
        date={this.props.date == "new Date()" || '' ? new Date() : this.props.date}
        mode={this.props.mode ? this.props.mode : GlobalCSS.datePickerProps.mode}
        placeholder={this.props.placeholder}
        format={this.props.format ? this.props.format : GlobalCSS.datePickerProps.format}
        minDate={this.props.minDate == "new Date()" ? new Date() : this.props.minDate}
        maxDate={this.props.maxDate == "new Date()" ? new Date() : this.props.maxDate}
        showIcon={this.props.showIcon}
        is24Hour={this.props.is24Hour}
        disabled={this.props.disabled}
        allowFontScaling = {this.props.fontScaling}
        androidMode={this.props.androidMode}
        onOpenModal = {this.props.onOpenModal}
        onCloseModal = {this.props.onCloseModal}
        ref={(ref)=>this.datePickerRef=ref}
        iconComponent={<OreIcon icon={this.props.iconname ? this.props.iconname : GlobalCSS.datePickerProps.iconname} 
        iconSize={this.props.iconsize ? this.props.iconsize : GlobalCSS.datePickerProps.iconsize}
        iconColor={this.props.iconcolor ? this.props.iconcolor : GlobalCSS.datePickerProps.iconcolor} 
        onPress = {() => this.datePickerRef.onPressDate()}
        style={this.props.iconstyle == "left" ? styles.Leftstyle : styles.rightstyle}/>}
        customStyles={{dateInput: this.props.iconstyle == 'left' ? [{marginLeft :36,alignItems:"flex-start",marginRight:10,height:'100%',},this.props.dateInput ? this.props.dateInput : OreStyle.OreDatePickerDateView,(this.props.dateInput.borderWidth != undefined && this.props.dateInput.borderWidth != 0) ? {paddingLeft: 10} : { paddingLeft: 0} ] : [{alignItems:"flex-start",marginRight:10,height: "100%",},this.props.dateInput ? this.props.dateInput : OreStyle.OreDatePickerDateView,(this.props.dateInput.borderWidth != undefined && this.props.dateInput.borderWidth != 0) ? {paddingLeft: 10} : { paddingLeft: 5}],dateText:[this.props.dateText ? this.props.dateText : OreStyle.OreDatePickerDateStyle,{textAlignVertical : 'center'}]}}
        onDateChange={this.props.onDateChange}/>
        </View>
    )
  }
  // DatePicker without label template
  else{
    return (
      <DatePicker
        style={[(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""),this.props.style]}
        date={this.props.date == "new Date()" || '' ? new Date() : this.props.date}
        mode={this.props.mode ? this.props.mode : GlobalCSS.datePickerProps.mode}
        placeholder={this.props.placeholder}
        format={this.props.format ? this.props.format : GlobalCSS.datePickerProps.format}
        minDate={this.props.minDate == "new Date()" ? new Date() : this.props.minDate}
        maxDate={this.props.maxDate == "new Date()" ? new Date() : this.props.maxDate}
        showIcon={this.props.showIcon}
        is24Hour={this.props.is24Hour}
        disabled={this.props.disabled}
        allowFontScaling = {this.props.fontScaling}
        androidMode={this.props.androidMode}
        onOpenModal = {this.props.onOpenModal}
        onCloseModal = {this.props.onCloseModal}
        iconComponent={<OreIcon icon={this.props.iconname ? this.props.iconname : GlobalCSS.datePickerProps.iconname} 
        iconSize={this.props.iconsize ? this.props.iconsize : GlobalCSS.datePickerProps.iconsize}
        iconColor={this.props.iconcolor ? this.props.iconcolor : GlobalCSS.datePickerProps.iconcolor} 
        ref={(ref)=>this.datePickerRef=ref}
        onPress = {() => this.datePickerRef.onPressDate()}
        style={this.props.iconstyle == "left" ? styles.Leftstyle : styles.rightstyle}/>}
        customStyles={{dateInput: this.props.iconstyle == 'left' ? [{marginLeft :36,alignItems:"flex-start",marginRight:10,height:'100%',},this.props.dateInput ? this.props.dateInput : OreStyle.OreDatePickerDateView,(this.props.dateInput.borderWidth != undefined && this.props.dateInput.borderWidth != 0) ? {paddingLeft: 10} : { paddingLeft: 0} ] : [{alignItems:"flex-start",marginRight:10,height: "100%",},this.props.dateInput ? this.props.dateInput : OreStyle.OreDatePickerDateView,(this.props.dateInput.borderWidth != undefined && this.props.dateInput.borderWidth != 0) ? {paddingLeft: 10} : { paddingLeft: 0}],dateText:[this.props.dateText ? this.props.dateText : OreStyle.OreDatePickerDateStyle,{textAlignVertical : 'center'}]}}
        onDateChange={this.props.onDateChange}
      />
    )
  }
  }
}

// Default CSS for Date Picker
const styles=StyleSheet.create({
Leftstyle:{
  position: 'absolute',left: 0,top: 0,marginLeft: 0
},
rightstyle:{

},
});

