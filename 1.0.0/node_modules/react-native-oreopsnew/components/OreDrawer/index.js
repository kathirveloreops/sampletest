// IOP Control Code for Drawer is CNT_MC_956
import React, { Component } from "react";
import { Image, View, FlatList, TouchableOpacity, Text, StyleSheet, ImageBackground } from "react-native";
import Icon from "react-native-fontawesome-pro";
import Oreframework from "react-native-oreopscore/components/OreOPS/general/Ore_Framework";
import {Avatar} from 'react-native-elements';
import themebuilder from '../../../../themebuilder'
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()
// Drawer Control Template
export default class OreDrawer extends Component {
  constructor(props) {
    super(props);
    this.state = {
      shadowOffsetWidth: 1,
      shadowRadius: 4,
      pressStatus: false,
      selectedItem: 0,
      
    };
  }
   
  // List Item Press in Drawer
  _onPressItem = async (item, index) => {
    this.setState({ pressStatus: true, selectedItem: index });
    this.props.onPress(item)
  }

  // Drawer style templates handled below
  render() {
     // Style3 template handle here
    if (this.props.drawerStyle == 'style3') {
      return (
        <View style={styles.Viewstyle} onLoad={this.props.onLoad}>
          {this.props.isHeader != false ?  <ImageBackground source={this.props.headerBackgroundImage} style={[styles.HeaderRow, this.props.headerStyle]}>
            <View style={styles.HeaderImageColumnView}>
            {
             (this.props.headerImage != '' && this.props.headerImage != undefined) ? <Image resizeMode={this.props.resizeMode ? this.props.resizeMode : "cover"} style={[styles.HeaderImageColumn,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} source={this.props.headerImage } /> : <Avatar titleStyle={{ fontSize: 28, textTransform:"uppercase",}} overlayContainerStyle={{ backgroundColor: this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor }} style={[styles.HeaderImageColumn,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} size="large" rounded  title={this.props.headerHeading[0]} />
            }
              
            </View>
            <View style={styles.HeaderTextColumn}>
              <Text numberOfLines={1} style={[styles.HeaderTextHeading, this.props.headingStyle]}>{this.props.headerHeading}</Text>
              <Text numberOfLines={1} style={[styles.HeaderTextContent, this.props.contentStyle]}>{this.props.headerContent}</Text>
            </View>
          </ImageBackground> 
          :
          null
         }
         <ImageBackground style={{flex:1}} source={this.props.listBackgroundImage} >
         <FlatList style={[styles.FlatListStyle, this.props.listViewStyle,{marginTop: this.props.isHeader != false ? "2%" : "1%"}]}
            data={this.props.dataSource}
            renderItem={({ item, index }) =>
              <TouchableOpacity onPress={() => this._onPressItem(item, index)}>
                <View style={[styles.ListRowStyle, this.props.listStyle, { backgroundColor: this.state.selectedItem === index ? this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor : "transparent" }]}>
                  <View style={styles.ListColumn1Style}>
                  <Icon style={styles.ListColumnIconStyle} name={item[this.props.iconField]} size={this.props.listTextStyle.fontSize != undefined ? 1.7 * this.props.listTextStyle.fontSize : 24} type={this.props.iconType} color={this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.iconColor ? this.props.iconColor : GlobalCSS.color.inactiveColor } />
                  </View>
                  <View style={styles.ListColumn2Style}>
                    <Text numberOfLines={1} style={[styles.ListColumn2TextStyle, this.props.listTextStyle, { color: this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.textColor ? this.props.textColor : GlobalCSS.color.inactiveColor }]}>{item[this.props.nameField]}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            }
          />
          </ImageBackground>
        </View>
      )
    }
     // Style4 template handled here
    else if (this.props.drawerStyle == 'style4') {
      return (
        <View style={styles.Viewstyle} onLoad={this.props.onLoad}>
           {this.props.isHeader != false ? <ImageBackground source={this.props.headerBackgroundImage} style={[styles.HeaderRow, this.props.headerStyle]}>
            <View style={styles.HeaderImageColumnView}>
            {
             (this.props.headerImage != '' && this.props.headerImage != undefined) ? <Image resizeMode={this.props.resizeMode ? this.props.resizeMode : "cover"} style={[styles.HeaderImageColumn,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} source={this.props.headerImage }  /> : <Avatar titleStyle={{ fontSize: 28, textTransform:"uppercase",}} overlayContainerStyle={{ backgroundColor: this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor}} style={[styles.HeaderImageColumn,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} size="large" rounded  title={this.props.headerHeading[0]} />
            }
            </View>
            <View style={styles.HeaderTextColumn}>
              <Text numberOfLines={1} style={[styles.HeaderTextHeading, this.props.headingStyle]}>{this.props.headerHeading}</Text>
              <Text numberOfLines={1} style={[styles.HeaderTextContent, this.props.contentStyle]}>{this.props.headerContent}</Text>
            </View>
          </ImageBackground> : null}
          <ImageBackground style={{flex:1}} source={this.props.listBackgroundImage} >
          <FlatList style={[styles.FlatListStyle, this.props.listViewStyle,{marginTop: this.props.isHeader != false ? "2%" : "1%"}]}
            data={this.props.dataSource}
            renderItem={({ item, index }) =>
              <TouchableOpacity onPress={() => this._onPressItem(item, index)}>
                <View style={[styles.ListRowStyle, this.props.listStyle, { backgroundColor: this.state.selectedItem === index ? this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor : "transparent" }]}>
                  {/* <View style={styles.ListColumn1Style}>
              <Icon style={styles.ListColumnIconStyle} name={item[this.props.iconField]} size={25} color={this.props.iconColorField}  />
              </View> */}
                  <View style={[styles.ListColumn2Style]}>
                    <Text numberOfLines={1} style={[styles.ListColumn2TextStyle, this.props.listTextStyle, { color: this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.textColor ? this.props.textColor : GlobalCSS.color.inactiveColor }]}>{item[this.props.nameField]}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            }
          />
          </ImageBackground>
        </View>
      )
    }
    // style 1 template handled here
    else if (this.props.drawerStyle == 'style1') {
      return (
        <View style={styles.Viewstyle1} onLoad={this.props.onLoad}>
           {this.props.isHeader != false ?  <ImageBackground source={this.props.headerBackgroundImage} style={[styles.HeaderRow1, this.props.headerStyle,]}>
            <View style={styles.HeaderImageColumnView1}>
            {
             (this.props.headerImage != '' && this.props.headerImage != undefined) ? <Image resizeMode={this.props.resizeMode ? this.props.resizeMode : "cover"} style={[styles.HeaderImageColumn1,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} source={this.props.headerImage }  /> : <Avatar titleStyle={{ fontSize: 28, textTransform:"uppercase",}} overlayContainerStyle={{ backgroundColor: this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor }} style={[styles.HeaderImageColumn1,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} size="large" rounded  title={this.props.headerHeading[0]} />
            }
              <View style={styles.HeaderTextColumn1}>
                <Text numberOfLines={1} style={[styles.HeaderTextHeading1, this.props.headingStyle]}>{this.props.headerHeading}</Text>
                <Text numberOfLines={1} style={[styles.HeaderTextContent1, this.props.contentStyle]}>{this.props.headerContent}</Text>
              </View>
            </View>
          </ImageBackground> : null }
          <ImageBackground style={{flex:1}} source={this.props.listBackgroundImage} >
          <FlatList style={[styles.FlatListStyle, this.props.listViewStyle,{marginTop: this.props.isHeader != false ? "2%" : "1%"}]}
            data={this.props.dataSource}
            renderItem={({ item, index }) =>
              <TouchableOpacity onPress={() => this._onPressItem(item, index)}>
                <View style={[styles.ListRowStyle, this.props.listStyle, { backgroundColor: this.state.selectedItem === index ? this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor : "transparent" }]}>
                  <View style={styles.ListColumn1Style}>
                    <Icon name={item[this.props.iconField]} size={24} type={this.props.iconType} color={this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.iconColor ? this.props.iconColor : GlobalCSS.color.inactiveColor } />
                  </View>
                  <View style={styles.ListColumn2Style}>
                    <Text numberOfLines={1} style={[styles.ListColumn2TextStyle, this.props.listTextStyle, { color: this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.textColor ? this.props.textColor : GlobalCSS.color.inactiveColor }]}>{item[this.props.nameField]}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            }
          />
          </ImageBackground>
        </View>
      )
    }
    // Style2 template handled here
    else if (this.props.drawerStyle == 'style2') {
      return (
        <View style={styles.Viewstyle1} onLoad={this.props.onLoad}>
           {this.props.isHeader != false ? <ImageBackground source={this.props.headerBackgroundImage} style={[styles.HeaderRow1, this.props.headerStyle,]}>
            <View style={styles.HeaderImageColumnView1}>
            {
             (this.props.headerImage != '' && this.props.headerImage != undefined) ? <Image resizeMode={this.props.resizeMode ? this.props.resizeMode : "cover"} style={[styles.HeaderImageColumn1,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} source={this.props.headerImage }  /> : <Avatar titleStyle={{ fontSize: 28, textTransform:"uppercase",}} overlayContainerStyle={{ backgroundColor: this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor }} style={[styles.HeaderImageColumn1,this.props.imageSize ? {width: this.props.imageSize,height:this.props.imageSize} : null]} size="large" rounded  title={this.props.headerHeading[0]} />
            }
              <View style={styles.HeaderTextColumn1}>
                <Text numberOfLines={1} style={[styles.HeaderTextHeading1, this.props.headingStyle]}>{this.props.headerHeading}</Text>
                <Text numberOfLines={1} style={[styles.HeaderTextContent1, this.props.contentStyle]}>{this.props.headerContent}</Text>
              </View>
            </View>
          </ImageBackground> : null}
          <ImageBackground style={{flex:1}} source={this.props.listBackgroundImage} >
          <FlatList style={[styles.FlatListStyle, this.props.listViewStyle,{marginTop: this.props.isHeader != false ? "2%" : "1%"}]}
            data={this.props.dataSource}
            renderItem={({ item, index }) =>
              <TouchableOpacity onPress={() => this._onPressItem(item, index)}>
                <View style={[styles.ListRowStyle, this.props.listStyle, { backgroundColor: this.state.selectedItem === index ? this.props.activeBackgroundColor ? this.props.activeBackgroundColor : GlobalCSS.color.activeBackgroundColor : "transparent" }]}>
                  {/* <View style={styles.ListColumn1Style}>
              <Icon style={styles.ListColumnIconStyle} name={item[this.props.iconField]} size={25} color={this.props.iconColorField}  />
              </View> */}
                  <View style={[styles.ListColumn2Style]}>
                    <Text numberOfLines={1} style={[styles.ListColumn2TextStyle, this.props.listTextStyle, { color: this.state.selectedItem === index ? this.props.activeColor ? this.props.activeColor : GlobalCSS.color.activeColor : this.props.textColor ? this.props.textColor : GlobalCSS.color.inactiveColor }]}>{item[this.props.nameField]}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            }
          />
          </ImageBackground>
        </View>
      )
    }
  }
}


//Default CSS for Drawer Control
const styles = StyleSheet.create({
  Viewstyle: { flex: 1,backgroundColor:GlobalCSS.color.primaryColorDrawer },
  HeaderRow: { flexDirection: "row", height: 80, padding: 10, alignItems: 'center', justifyContent: 'flex-start', borderBottomColor: GlobalCSS.color.actionControlFontColor  },
  HeaderImageColumnView: { marginRight: "5%" },
  HeaderImageColumn: { width: 60, height: 60, borderRadius: 50, },
  HeaderTextColumn: { flexDirection: "column" , width:"80%"},
  HeaderTextHeading: { fontSize: GlobalCSS.font.drawerTextSize, fontFamily: GlobalCSS.font.fontFamily, fontWeight: "bold", color: GlobalCSS.color.actionControlFontColor,width:"80%", textTransform: 'capitalize'},
  HeaderTextContent: { marginTop: "1%", fontSize: GlobalCSS.font.drawerTextSize,fontFamily: GlobalCSS.font.fontFamily, color: GlobalCSS.color.inactiveColor,width:"80%" },
  FlatListStyle: { marginTop: 0, paddingBottom: 8 },
  ListRowStyle: { flexDirection: "row", padding: 8, paddingLeft: 10, alignItems: 'center', },
  ListColumn1Style: { flexDirection: "row", width: "13%"},
  ListColumnIconStyle: {},
  ListColumn2Style: { paddingLeft: 8,width:"100%" },
  ListColumn2TextStyle: { fontSize: GlobalCSS.font.drawerTextSize,fontFamily: GlobalCSS.font.fontFamily, marginTop: "0%", color: GlobalCSS.color.inactiveColor ,width:"90%",textTransform: 'capitalize'},
  Viewstyle1: { flex: 1,backgroundColor:GlobalCSS.color.primaryColorDrawer },
  HeaderRow1: { flexDirection: "row", height: 150, padding: 10, alignItems: 'center', justifyContent: 'center',borderBottomColor: GlobalCSS.color.actionControlFontColor},
  HeaderImageColumnView1: { flexDirection: "column", width: "100%", alignItems: "center", marginTop: "5%" },
  HeaderImageColumn1: { width: 60, height: 60, borderRadius: 50, },
  HeaderTextColumn1: { flexDirection: "column", width: "100%", marginTop: "2%", },
  HeaderTextHeading1: { fontSize: GlobalCSS.font.drawerTextSize,fontFamily: GlobalCSS.font.fontFamily, fontWeight: "bold", color: GlobalCSS.color.actionControlFontColor, textAlign: "center", textTransform: 'capitalize'},
  HeaderTextContent1: { marginTop: "1%", fontSize: GlobalCSS.font.drawerTextSize,fontFamily: GlobalCSS.font.fontFamily, color: GlobalCSS.color.inactiveColor, textAlign: "center", },
});
