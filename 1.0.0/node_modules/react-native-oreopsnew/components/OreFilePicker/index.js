// IOP Control code for FilePicker is CNT_MC_955
import React from 'react';
import OreIcon from '../OreIcon'
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
const OreDeviceWidth = Dimensions.get('screen').width;
const OreDeviceHeight = Dimensions.get('screen').height;
const scaleLandscape = OreDeviceHeight / 288;
const isLandscape = Dimensions.get('screen').width >= Dimensions.get('screen').height
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  TextInput,
  PixelRatio,
  Dimensions,
  Image
} from 'react-native';
import DocumentPicker from 'react-native-document-picker';
import ImagePicker from 'react-native-image-picker';
import RBSheet from "react-native-raw-bottom-sheet";
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath();
let GlobalCSS = themebuilder.getPropertyPath();

// normalize function is use to change size according to the pixel ratio of the devie
function normalize(size) {
  const OreDeviceWidth = Dimensions.get('screen').width;
  const scale = OreDeviceWidth / 288;
  const newSize = size * (isLandscape ? scaleLandscape : scale)
  if (Platform.OS === 'ios') {
    return Math.round(PixelRatio.roundToNearestPixel(newSize))
  } else {
    return Math.round(PixelRatio.roundToNearestPixel(newSize))
  }
}

// File Picker Control Template
export default class OreFilePicker extends React.Component {
  //Opening Document Picker for selection of one file
  async selectOneFile() {
    try {
      const res = await DocumentPicker.pick({
        type: this.getFileType()
      });
      if (this.props.maxfilesize != undefined && this.props.maxfilesize != "") {
        if ((res.size / 1024) <= this.props.maxfilesize) {
          console.log(res)
          this.props.onSuccess(res, true)
        } else {
          alert("Please select less than " + this.props.maxfilesize + " KB file")
        }
      } else {
        console.log(res)
        this.props.onSuccess(res, true)
      }
    } catch (err) {
      this.props.onCancelled(err)
      if (DocumentPicker.isCancel(err)) {
      }
      else {
        throw err;
      }
    }
  }

  //Opening Document Picker for selection of multiple file
  async selectMultipleFile() {
    try {
      const results = await DocumentPicker.pickMultiple({
        type: this.getFileType(),
        //There can me more options as well find above
      });
      var totalFileSize = 0;
      for (const res of results) {
        totalFileSize = totalFileSize + res.size;
      }
      if (this.props.minselectcount != undefined && this.props.minselectcount != "" && this.props.minselectcount != 0) {
        if (results.length >= this.props.minselectcount) {
          if (this.props.maxselectcount != undefined && this.props.maxselectcount != "" && this.props.maxselectcount != 0) {
            if (results.length > this.props.maxselectcount) {
              alert("Please select maximum of " + this.props.maxselectcount + " files")
              return
            }
          }
        } else {
          alert("Please select minimum of " + this.props.minselectcount + " files")
          return
        }
      }
      //Setting the state to show multiple file attributes
      if (this.props.maxfilesize != undefined && this.props.maxfilesize != '') {
        if ((totalFileSize / 1024) <= this.props.maxfilesize) {
          this.props.onSuccess(results, false)
        } else {
          alert("Please select less than " + this.props.maxfilesize + " KB file")
        }
      } else {
        this.props.onSuccess(results, false)
      }
    } catch (err) {
      this.props.onCancelled(err)
      //Handling any exception (If any)
      if (DocumentPicker.isCancel(err)) {
        //If user canceled the document selection
        //alert('Canceled from multiple doc picker');
      } else {
        //For Unknown Error
        throw err;
      }
    }
  }

  // Get file type of the upload file from device
  getFileType = () => {
    if (this.props.fileTypes == null || this.props.fileTypes == "" || this.props.fileTypes == [])
      return [DocumentPicker.types.allFiles]
    else {
      var typeArray = []
      switch (this.props.fileTypes) {
        case 'All':
          typeArray.push(DocumentPicker.types.allFiles)
          break;

        case 'Images':
          typeArray.push(DocumentPicker.types.images)
          break;

        case 'Text':
          typeArray.push(DocumentPicker.types.plainText)
          break;

        case 'Audio':
          typeArray.push(DocumentPicker.types.audio)
          break;

        case 'Video':
          typeArray.push(DocumentPicker.types.video)
          break;

        case 'Pdf':
          typeArray.push(DocumentPicker.types.pdf)
          break;
      }
      return typeArray;
    }
  }

  // Choosing either single or mutiple upload
  chooseFunction = () => {
    this.RBSheet.close()
    if (this.props.mode == 'single') {
      this.selectOneFile()
    } else {
      this.selectMultipleFile()
    }
  }
  // Choosing either single or mutiple upload
  chooseFunction1 = () => {
    if (this.props.displayType == 'style4' || this.props.fileTypes == "Images") {
      if (this.props.mode == 'single') {
        this.RBSheet.open()
      }
      else {
        this.chooseFunction()
      }
    } else {
      this.chooseFunction()
    }
  }

  // Resetting selected files
  resetSelection = () => {
    this.props.onReset()
  }

  // Image from camera capture
  selectPhotoTapped = () => {
    console.log('camera')
    const options = {
      quality: 1.0,
      maxWidth: 720,
      maxHeight: 1200,
      storageOptions: {
        skipBackup: true,
      },
    };

    // Image picker from camera
    ImagePicker.launchCamera(options, response => {
      this.RBSheet.close()
      if (response.didCancel) {
        this.props.onCancelled('User cancelled photo picker')
        //console.log('User cancelled photo picker');
      } else if (response.error) {
        this.props.onCancelled(response.error)
        //console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        this.props.onCancelled('User tapped custom button: ', response.customButton)
        //console.log('User tapped custom button: ', response.customButton);
      } else {
        this.props.onSuccess(response, true)
      }
    });
  }

  // File Picker Control Template
  render() {
    // Profile Image upload with attachment icon
    if (this.props.displayType == 'style4') {
      return (
        <TouchableOpacity
          style={[this.props.viewStyle, this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""]}
          disabled={this.props.disabled}
          activeOpacity={this.props.activeOpacity}
          onPress={this.chooseFunction1}>
          <View style={{ position: 'relative', display: 'flex', flexDirection: 'row', alignItems: 'flex-end' }}>
            <Image
              source={this.props.imagePlaceholder}
              style={[OreStyle.OreFilePickerImageStyle_4, this.props.imageStyle, {borderRadius : this.props.property.imagePlaceholderradious ? this.props.property.imagePlaceholderradious : OreStyle.OreFilePickerImageStyle_4.borderRadius}]} />
            <OreIcon
              style={[styles.profileIconStyle, OreStyle.OreFilePickerIconStyle_4, this.props.iconStyle]}
              icon={this.props.iconName}
              iconType={this.props.iconType} 
              iconColor={this.props.iconColor ? this.props.iconColor : GlobalCSS.color.pickerPlaceHolderColor}
              iconSize={this.props.iconSize ? this.props.iconSize : GlobalCSS.icon.small} />
          </View>
          <RBSheet
            ref={ref => {
              this.RBSheet = ref;
            }}
            height={GlobalCSS.filePickerProps.cameraPickerHight}
            width={'100%'}
            openDuration={GlobalCSS.filePickerProps.cameraPickerAnimDuration}
            customStyles={{
              container: [styles.cameraPickerContainerStyle, OreStyle.CameraPickerRootStyle ]
            }}>
            <View style={styles.cameraPickerRootViewStyle}>
            <Text style={OreStyle.CameraPickerLabelStyle}>{this.props.property.labelTxt ? this.props.property.labelTxt : GlobalCSS.filePickerProps.cameraPickerLabel}</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.selectPhotoTapped}>{this.props.property.cameraTxt ? this.props.property.cameraTxt : GlobalCSS.filePickerProps.cameraPickerCameraTxt}</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.chooseFunction}>{this.props.property.galleryTxt ? this.props.property.galleryTxt : GlobalCSS.filePickerProps.cameraPickerGallaryTxt}</Text>
            </View>
          </RBSheet>
        </TouchableOpacity>
      );
    }

    // image upload only with attachment icon style
    if (this.props.displayType == 'style3') {
      return (
        <TouchableOpacity
          disabled={[this.props.disabled]}
          activeOpacity={this.props.activeOpacity}
          style={[styles.roundButtonStyle, OreStyle.OreFilePickerButtonStyle_3 ,this.props.viewStyle, this.props.buttonStyle, this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""]}
          onPress={this.chooseFunction1}>
          <OreIcon
            style={styles.iconStyle}
            icon={this.props.iconName}
            iconType={this.props.iconType}
            iconColor={this.props.iconColor ? this.props.iconColor : GlobalCSS.color.actionControlFontColor}
            iconSize={this.props.iconSize ? this.props.iconSize : GlobalCSS.icon.small} />

          <RBSheet
            ref={ref => {
              this.RBSheet = ref;
            }}
            height={GlobalCSS.filePickerProps.cameraPickerHight}
            width={'100%'}
            openDuration={GlobalCSS.filePickerProps.cameraPickerAnimDuration}
            customStyles={{
              container: [styles.cameraPickerContainerStyle, OreStyle.CameraPickerRootStyle ]
            }}>
            <View style={styles.cameraPickerRootViewStyle}>
            <Text style={OreStyle.CameraPickerLabelStyle}>GlobalCSS.filePickerProps.cameraPickerLabel</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.selectPhotoTapped}>GlobalCSS.filePickerProps.cameraPickerCameraTxt</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.chooseFunction}>GlobalCSS.filePickerProps.cameraPickerGallaryTxt</Text>
            </View>
          </RBSheet>
        </TouchableOpacity>
      );
    }

    // TextBox with attachment icon
    if (this.props.displayType == 'style2') {
      return (

        <View style={[this.props.viewStyle, styles.parentDirection]}>
          <View style={[OreStyle.OreFilePickerSubViewStyle_2, this.props.subviewStyle, styles.labelStyle, (this.props.subviewStyle.borderWidth != undefined && this.props.subviewStyle.borderWidth != 0) ? { paddingLeft: 5, paddingRight: 5, borderBottomWidth : this.props.subviewStyle.borderWidth } : { paddingLeft: 0, paddingRight: 0 }]}>
            <TextInput
              multiline={false}
              placeholder={this.props.labelName}
              placeholderTextColor={this.props.placeholderColor ? this.props.placeholderColor : GlobalCSS.filePickerProps.placeholderTextColor}
              value={this.props.labelValue}
              editable={false}
              style={[styles.labelStyle, OreStyle.OreFilePickerLabelStyle_2, { color: this.props.placeholderColor ? this.props.placeholderColor : GlobalCSS.filePickerProps.placeholderTextColor }, { flex: 1 }]} />
            <OreIcon
              onPress={this.resetSelection}
              style={[styles.closeIconStyle, OreStyle.OreFilePickerCloseIconStyle,
              this.props.labelValue == '' || this.props.labelValue == undefined ? { display: 'none' } : { display: 'flex' }]}
              icon={GlobalCSS.filePickerProps.closeIconName}
              iconColor={GlobalCSS.filePickerProps.closeIconColor}
              iconSize={GlobalCSS.filePickerProps.closeIconSize} />

          </View>

          <TouchableOpacity
            disabled={this.props.disabled}
            activeOpacity={this.props.activeOpacity}
            style={[styles.buttonStyle, OreStyle.OreFilePickerButtonStyle_2, this.props.buttonStyle, this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""]}
            onPress={this.chooseFunction1}>
            <View style={styles.parentDirection}>
              <OreIcon
                icon={this.props.iconName}
                iconType={this.props.iconType}
                iconColor={this.props.iconColor ? this.props.iconColor : GlobalCSS.color.actionControlFontColor}
                iconSize={this.props.iconSize ? this.props.iconSize : GlobalCSS.icon.small} />
            </View>
          </TouchableOpacity>

          <RBSheet
            ref={ref => {
              this.RBSheet = ref;
            }}
            height={GlobalCSS.filePickerProps.cameraPickerHight}
            width={'100%'}
            openDuration={GlobalCSS.filePickerProps.cameraPickerAnimDuration}
            customStyles={{
              container: [styles.cameraPickerContainerStyle, OreStyle.CameraPickerRootStyle ]
            }}>
            <View style={styles.cameraPickerRootViewStyle}>
            <Text style={OreStyle.CameraPickerLabelStyle}>GlobalCSS.filePickerProps.cameraPickerLabel</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.selectPhotoTapped}>GlobalCSS.filePickerProps.cameraPickerCameraTxt</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.chooseFunction}>GlobalCSS.filePickerProps.cameraPickerGallaryTxt</Text>
            </View>
          </RBSheet>
        </View>
      );
    }
    //Text Box with Text and attachment icon
    if (this.props.displayType == 'style1') {
      return (

        <View style={[this.props.viewStyle, styles.parentDirection]}>
          <View style={[ styles.labelStyle, OreStyle.OreFilePickerSubViewStyle_1,this.props.subviewStyle,
            (this.props.subviewStyle.borderWidth != undefined && this.props.subviewStyle.borderWidth != 0) ? 
            { paddingLeft: 5, paddingRight: 5 , borderBottomWidth : this.props.subviewStyle.borderWidth } : { paddingLeft: 0, paddingRight: 0 }]}>
            <TextInput
              multiline={false}
              placeholder={this.props.labelName}
              placeholderTextColor={this.props.placeholderColor ? this.props.placeholderColor : GlobalCSS.filePickerProps.placeholderTextColor}
              value={this.props.labelValue}
              editable={false}
              style={[styles.labelStyle, OreStyle.OreFilePickerLabelStyle_1, { color: this.props.placeholderColor ? this.props.placeholderColor : GlobalCSS.filePickerProps.placeholderTextColor }, { flex: 1 }]} />
            <OreIcon
              onPress={this.resetSelection}
              style={[styles.closeIconStyle, OreStyle.OreFilePickerCloseIconStyle,
              this.props.labelValue == ''  || this.props.labelValue == undefined ? { display: 'none' } : { display: 'flex' }]}
              icon={GlobalCSS.filePickerProps.closeIconName}
              iconColor={GlobalCSS.filePickerProps.closeIconColor}
              iconSize={GlobalCSS.filePickerProps.closeIconSize} />

          </View>

          <TouchableOpacity
            disabled={this.props.disabled}
            activeOpacity={this.props.activeOpacity}
            style={[styles.buttonStyle, OreStyle.OreFilePickerButtonStyle_1, this.props.buttonStyle, this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""]}
            onPress={this.chooseFunction1}>
            <View style={styles.parentDirection}>
              <Text style={[styles.txtStyle, OreStyle.OreFilePickerTextStyle_1, this.props.textStyle]}>
                {this.props.title}
              </Text>
              <OreIcon
                style={{marginLeft : 5}}
                icon={this.props.iconName}
                iconType={this.props.iconType}
                iconColor={this.props.iconColor ? this.props.iconColor : GlobalCSS.color.actionControlFontColor}
                iconSize={this.props.iconSize ? this.props.iconSize : GlobalCSS.icon.small} />
            </View>
          </TouchableOpacity>

          <RBSheet
            ref={ref => {
              this.RBSheet = ref;
            }}
            height={GlobalCSS.filePickerProps.cameraPickerHight}
            width={'100%'}
            openDuration={GlobalCSS.filePickerProps.cameraPickerAnimDuration}
            customStyles={{
              container: [styles.cameraPickerContainerStyle, OreStyle.CameraPickerRootStyle ]
            }}>
            <View style={styles.cameraPickerRootViewStyle}>
              <Text style={OreStyle.CameraPickerLabelStyle}>{GlobalCSS.filePickerProps.cameraPickerLabel}</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.selectPhotoTapped}>{GlobalCSS.filePickerProps.cameraPickerCameraTxt}</Text>
              <Text style={OreStyle.CameraPickerTextStyle} onPress={this.chooseFunction}>{GlobalCSS.filePickerProps.cameraPickerGallaryTxt}</Text>
            </View>
          </RBSheet>
        </View>
      );
    }
  }
}

//Default Css property for FilePicker
const styles = StyleSheet.create({
  parentDirection: {
    flexDirection: 'row',
    alignItems: 'flex-end'
  },
  roundButtonStyle: {
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonStyle: {
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    height: '100%',
    paddingLeft: 10,
    paddingRight: 10
  },
  txtStyle: {
    alignSelf: 'center',
  },
  iconStyle: {
    alignSelf: 'center',
  },
  labelStyle: {
    flex: 1,
    flexDirection: 'row',
    height: "100%",
  },
  closeIconStyle: {
    borderRadius: 25,
    alignSelf: 'center',
    marginRight: 5,
    marginLeft: 5
  },
  profileIconStyle: {
    right: "15%",
    padding: 5,
    borderRadius: 50
  },
  profileImageStyle: {
  },
  cameraPickerContainerStyle: {
    width: '100%',
    justifyContent: "flex-start",
    alignItems: "flex-start",
    padding: 16,
  },
  cameraPickerRootViewStyle: {
    flexDirection: 'column', 
    alignItems: 'flex-start', 
    justifyContent: 'flex-start', 
    width: '100%', 
    alignSelf: 'flex-start',
  }
});