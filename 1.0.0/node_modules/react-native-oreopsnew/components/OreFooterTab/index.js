import React, { Component } from 'react';
import { TouchableOpacity, Text, StyleSheet, View } from 'react-native';
import OreIcon from '../OreIcon'
import Oreframework from 'react-native-oreopscore/components/OreOPS/general/Ore_Framework';
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath();
let GlobalCSS = themebuilder.getPropertyPath();

export default class OreFooterTab extends Component {

  render() {
    if (this.props.property.displayType == 'style1') {
      return (
        <View style={[{ flexDirection: "row", position: 'absolute', left: 0, right: 0, bottom: 0, flex: 1, alignItems: "center" }, {backgroundColor: GlobalCSS.color.primaryColor}, {borderTopColor: GlobalCSS.color.borderColor}, {borderTopWidth:GlobalCSS.bottomTabStrip.borderTopWidth}, {borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor},this.props.style.viewStyle]}>
          {this.props.dataSource.map((item, index, array) => {
            return <TouchableOpacity style={[styles.OreFooterStyle,{borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor}, this.props.style, { backgroundColor: item['backgroundColor']?item['backgroundColor']:this.props.style.backgroundColor ? this.props.style.backgroundColor : GlobalCSS.color.primaryColor, borderRightWidth: index+1 == this.props.dataSource.length ? 0 : this.props.style.borderRightWidth?this.props.style.borderRightWidth : 0}]} onPress={() => this.props.onItemClick(item)} >
              <OreIcon icon={item['IconName']} iconType={this.props.property.iconType} iconSize={this.props.property.iconsize ? this.props.property.iconsize : GlobalCSS.icon.small} iconColor={item['iconColor'] ? item['iconColor'] : this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor} />
              <Text style={[OreStyle.bottomButtonStripStyle, {color : this.props.property.foregroundColor},{color: item['labelColor']?item['labelColor']:this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor}, this.props.style.textStyle]}>{item['tabBarLabel']}</Text>
            </TouchableOpacity>
          })
          }
        </View>
      );
    } else if (this.props.property.displayType == 'style2') {
      return (
        <View style={[{ flexDirection: "row", position: 'absolute', left: 0, right: 0, bottom: 0, flex: 1, alignItems: "center" }, {backgroundColor: GlobalCSS.color.primaryColor}, {borderTopColor: GlobalCSS.color.borderColor}, {borderTopWidth:GlobalCSS.bottomTabStrip.borderTopWidth}, {borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor},this.props.style.viewStyle]}>
          {this.props.dataSource.map((item, index, array) => {
            return <TouchableOpacity style={[styles.OreFooterStyle,{borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor}, this.props.style, { backgroundColor: item['backgroundColor']?item['backgroundColor']:this.props.style.backgroundColor ? this.props.style.backgroundColor : GlobalCSS.color.primaryColor, borderRightWidth: index+1 == this.props.dataSource.length ? 0 : this.props.style.borderRightWidth?this.props.style.borderRightWidth : 0}]} onPress={() => this.props.onItemClick(item)} >
              <OreIcon icon={item['IconName']} iconType={this.props.property.iconType} iconSize={this.props.property.iconsize ? this.props.property.iconsize : GlobalCSS.icon.small} iconColor={item['iconColor'] ? item['iconColor'] : this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor} />
            </TouchableOpacity>
          })
          }
        </View>
      );
    } else if (this.props.property.displayType == 'style3') {
      return (
        <View style={[{ flexDirection: "row", position: 'absolute', left: 0, right: 0, bottom: 0, flex: 1, alignItems: "center" }, {backgroundColor: GlobalCSS.color.primaryColor}, {borderTopColor: GlobalCSS.color.borderColor}, {borderTopWidth:GlobalCSS.bottomTabStrip.borderTopWidth}, {borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor},this.props.style.viewStyle]}>
          {this.props.dataSource.map((item, index, array) => {
            return <TouchableOpacity style={[styles.OreFooterStyle,{borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor}, this.props.style, { backgroundColor: item['backgroundColor']?item['backgroundColor']:this.props.style.backgroundColor ? this.props.style.backgroundColor : GlobalCSS.color.primaryColor, borderRightWidth: index+1 == this.props.dataSource.length ? 0 : this.props.style.borderRightWidth?this.props.style.borderRightWidth : 0}]} onPress={() => this.props.onItemClick(item)} >
              <Text style={[OreStyle.bottomButtonStripStyle, {color : this.props.property.foregroundColor},{color: item['labelColor']?item['labelColor']:this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor}, this.props.style.textStyle]}>{item['tabBarLabel']}</Text>
            </TouchableOpacity>
          })
          }
        </View>
      );
    } else {
      return (
        <View style={[{ flexDirection: "row", position: 'absolute', left: 0, right: 0, bottom: 0, flex: 1, alignItems: "center" }, {backgroundColor: GlobalCSS.color.primaryColor}, {borderTopColor: GlobalCSS.color.borderColor}, {borderTopWidth:GlobalCSS.bottomTabStrip.borderTopWidth}, {borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor},this.props.style.viewStyle]}>
          {this.props.dataSource.map((item, index, array) => {
            return <TouchableOpacity style={[styles.OreFooterStyle,{borderRightWidth:GlobalCSS.bottomTabStrip.borderRightWidth}, {borderRightColor :  GlobalCSS.color.activeColor}, this.props.style, { backgroundColor: item['backgroundColor']?item['backgroundColor']:this.props.style.backgroundColor ? this.props.style.backgroundColor : GlobalCSS.color.primaryColor, borderRightWidth: index+1 == this.props.dataSource.length ? 0 : this.props.style.borderRightWidth?this.props.style.borderRightWidth : 0}]} onPress={() => this.props.onItemClick(item)} >
              <OreIcon icon={item['IconName']} iconType={this.props.property.iconType} iconSize={this.props.property.iconsize ? this.props.property.iconsize : GlobalCSS.icon.small} iconColor={item['iconColor'] ? item['iconColor'] : this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor} />
              <Text style={[OreStyle.bottomButtonStripStyle, {color : this.props.property.foregroundColor},{color: item['labelColor']?item['labelColor']:this.props.property.foregroundColor ? this.props.property.foregroundColor : GlobalCSS.color.actionControlFontColor}, this.props.style.textStyle]}>{item['tabBarLabel']}</Text>
            </TouchableOpacity>
          })
          }
        </View>
      );
    }
  }

}

const styles = StyleSheet.create({
  OreFooterStyle: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-start',
    paddingTop: 8,
    paddingBottom: 8,
  }

})