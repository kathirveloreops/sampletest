// IOP code for Header Control CNT_MC_940
import React, { Component } from 'react';
import { View, StatusBar, Platform } from 'react-native'
import { StyleSheet } from 'react-native';
import { Header, Text } from 'react-native-elements'
import OreStyle from '../OreStyle';
import OreIcon from '../OreIcon';
import themebuilder from '../../../../themebuilder';
let GlobalCSS = themebuilder.getPropertyPath()

// Header Control Template
export default class OreHeader extends Component {
  render() {
    // If platform is android header control will render this template
    if (Platform.OS !== "ios") {
      return (
        <View pointerEvents={this.props.disabled === true ? 'none' : 'auto'} >
          <Header placement={this.props.placement ? this.props.placement : "left"} containerStyle={[styles.OreHeaderContainer, this.props.style,(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : "")]}
            backgroundImage={this.props.backgroundImage}
            leftComponent={
              <View style={styles.iconContainer}>
                <OreIcon style={(this.props.lefticon == undefined || this.props.lefticon == '') ? { display: "none" } : {}} iconType={this.props.lefticontype} icon={this.props.lefticon} iconColor={this.props.lefticoncolor === undefined || this.props.lefticoncolor === '' ? GlobalCSS.color.actionControlFontColor : this.props.lefticoncolor } iconSize={this.props.lefticonsize} onPress={this.props.lefticonpress} />
              </View>
            }
            centerComponent={
              <View>
                <Text numberOfLines={1} ellipsizeMode="tail" style={[styles.OreHeaderText, this.props.textstyle]}>{this.props.title === "" ? "Header" : this.props.title}</Text>
              </View>
            }
            rightComponent={
              <View style={styles.iconContainer}>
                <OreIcon style={[styles.iconlist, (this.props.righticon1 == undefined || this.props.righticon1 == '') ? { display: "none" } : {}]} icon={this.props.righticon1}
                  iconColor={this.props.righticon1color === undefined || this.props.righticon1color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon1color}
                  iconSize={this.props.righticon1size}
                  iconType={this.props.righticon1type}
                  onPress={this.props.righticon1press} />
                <OreIcon 
                style={[styles.iconlist, (this.props.righticon2 == undefined || this.props.righticon2 == '') ? { display: "none" } : {}]} 
                icon={this.props.righticon2} 
                iconColor={this.props.righticon2color === undefined || this.props.righticon2color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon2color} 
                iconSize={this.props.righticon2size} 
                iconType={this.props.righticon2type} 
                onPress={this.props.righticon2press} />
                <OreIcon 
                style={[styles.iconlist, (this.props.righticon3 == undefined || this.props.righticon3 == '') ? { display: "none" } : {}]} 
                icon={this.props.righticon3} 
                iconColor={this.props.righticon3color === undefined || this.props.righticon3color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon3color} 
                iconSize={this.props.righticon3size} 
                iconType={this.props.righticon3type} 
                onPress={this.props.righticon3press} />
              </View>
            }
          />
        </View>
      );
    }

    // If platform is IOS header control will render this template
    else {
      return (
        <View pointerEvents={this.props.disabled === true ? 'none' : 'auto'} >
        <Header placement={this.props.placement ? this.props.placement : "left"} containerStyle={[styles.OreHeaderContainer, this.props.style,(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : "")]}
          backgroundImage={this.props.backgroundImage}
          leftComponent={
            <View style={styles.iconContainer}>
               <OreIcon style={(this.props.lefticon == undefined || this.props.lefticon == '') ? { display: "none" } : {}} iconType={this.props.lefticontype} icon={this.props.lefticon} iconColor={this.props.lefticoncolor === undefined || this.props.lefticoncolor === '' ? GlobalCSS.color.actionControlFontColor : this.props.lefticoncolor } iconSize={this.props.lefticonsize} onPress={this.props.lefticonpress} />
            </View>
          }
          centerComponent={
            <View>
              <Text numberOfLines={1} ellipsizeMode="tail" style={[styles.OreHeaderText, this.props.textstyle]}>{this.props.title === "" ? "Header" : this.props.title}</Text>
            </View>
          }
          rightComponent={
            <View style={styles.iconContainer}>
              <OreIcon style={[styles.iconlist, (this.props.righticon1 == undefined || this.props.righticon1 == '') ? { display: "none" } : {}]} icon={this.props.righticon1}
                iconColor={this.props.righticon1color === undefined || this.props.righticon1color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon1color}
                iconSize={this.props.righticon1size}
                iconType={this.props.righticon1type}
                onPress={this.props.righticon1press} />
              <OreIcon 
              style={[styles.iconlist, (this.props.righticon2 == undefined || this.props.righticon2 == '') ? { display: "none" } : {}]} 
              icon={this.props.righticon2} 
              iconColor={this.props.righticon2color === undefined || this.props.righticon2color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon2color} 
              iconSize={this.props.righticon2size} 
              iconType={this.props.righticon2type} 
              onPress={this.props.righticon2press} />
              <OreIcon 
              style={[styles.iconlist, (this.props.righticon3 == undefined || this.props.righticon3 == '') ? { display: "none" } : {}]} 
              icon={this.props.righticon3} 
              iconColor={this.props.righticon3color === undefined || this.props.righticon3color === '' ? GlobalCSS.color.actionControlFontColor : this.props.righticon3color} 
              iconSize={this.props.righticon3size} 
              iconType={this.props.righticon3type} 
              onPress={this.props.righticon3press} />
            </View>
          }
        />
      </View>
      );
    }

  }
}


// Default css properties for header control
const styles = StyleSheet.create({
  OreHeaderContainer: {
    marginTop: Platform.OS === 'ios' ? 0 : -28,
    backgroundColor: GlobalCSS.color.primaryColor,
    borderBottomColor: GlobalCSS.color.primaryColor,
    borderBottomWidth: 1,
    alignItems: "center",
    justifyContent: "space-evenly",
    flexDirection: "row",
    paddingLeft: 13,
    paddingRight: 0,
    shadowColor: '#000000', 
    shadowOffset: { width: 0, height: 3 }, 
    shadowOpacity: 0.8, 
    shadowRadius: 2, 
    elevation: 30,
  },
  OreHeaderText: {
    color: GlobalCSS.color.actionControlFontColor,
    fontSize: GlobalCSS.font.headingFontSize,
    fontFamily: GlobalCSS.font.fontFamily,
    textAlign: "left",
    alignItems: "flex-start",
    fontWeight:"bold"
  },
  OreHeaderBackView: {
    flexDirection: 'row',
    alignItems: "center",
  },
  OreHeaderView: {
    flexDirection: 'row',
    alignItems: "center",
  },
  iconContainer: {
    flexDirection: "row",
    justifyContent:"flex-end",
    
  },
  iconlist: {
    width: 45,
    textAlign: 'right',
    

  }
});