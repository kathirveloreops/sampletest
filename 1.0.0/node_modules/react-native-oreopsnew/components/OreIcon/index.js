// IOP Code for icon control is CNT_MC_943
import React, { Component } from 'react';
import { StyleSheet, TouchableOpacity } from "react-native"
import Icon from "react-native-fontawesome-pro";
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()

// Icon Control Template
export default class OreIcon extends Component {
   render() {
      if (this.props.type == 'style1') {
         return (
            <TouchableOpacity activeOpacity={this.props.activeOpacity == undefined || this.props.activeOpacity == '' ? GlobalCSS.opacity.activeOpacity : this.props.activeOpacity}  onPress={this.props.onPress} onLongPress={this.props.onLongPress} disabled={this.props.disabled} style={[OreStyle.OreIcon,(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""), this.props.style]}>
               <Icon type={this.props.iconType == undefined || this.props.iconType == '' ? GlobalCSS.iconProps.iconType : this.props.iconType } 
                  name={this.props.icon}
                  color={this.props.iconColor == undefined || this.props.iconColor == '' ? GlobalCSS.iconProps.iconColor : this.props.iconColor}
                  size={this.props.iconSize == undefined || this.props.iconSize == '' ? GlobalCSS.iconProps.iconSize : this.props.iconSize}
               />
            </TouchableOpacity>
         )
      } else if (this.props.type == 'style2') {
         return (
            <TouchableOpacity activeOpacity={this.props.activeOpacity == undefined || this.props.activeOpacity == '' ? GlobalCSS.opacity.activeOpacity  : this.props.activeOpacity} onPress={this.props.onPress} onLongPress={this.props.onLongPress} disabled={this.props.disabled} style={[OreStyle.OreIconRounded,(this.props.backgroundSize != undefined || this.props.backgroundSize != null ?  {width: this.props.backgroundSize,height:this.props.backgroundSize}:''),(this.props.disabled === true ? {opacity:GlobalCSS.opacity.disabledOpacity}  : ""), this.props.style, ]}>
               <Icon type={this.props.iconType == undefined || this.props.iconType == '' ? GlobalCSS.iconProps.iconType : this.props.iconType}
                  name={this.props.icon}
                  color={this.props.iconColor == undefined || this.props.iconColor == '' ? GlobalCSS.iconProps.iconColorRounded : this.props.iconColor}
                  size={this.props.iconSize == undefined || this.props.iconSize == '' ? GlobalCSS.iconProps.iconSize : this.props.iconSize}
               />
            </TouchableOpacity>
         )
      } else {
         return (
            <TouchableOpacity activeOpacity={this.props.activeOpacity == undefined || this.props.activeOpacity == '' ? GlobalCSS.opacity.activeOpacity : this.props.activeOpacity}  onPress={this.props.onPress} onLongPress={this.props.onLongPress} disabled={this.props.disabled} style={[(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""), this.props.style]}>
               <Icon type={this.props.iconType == undefined || this.props.iconType == '' ? GlobalCSS.iconProps.iconType : this.props.iconType} 
                  name={this.props.icon}
                  color={this.props.iconColor == undefined || this.props.iconColor == '' ? GlobalCSS.iconProps.iconColor : this.props.iconColor}
                  size={this.props.iconSize == undefined || this.props.iconSize == '' ? GlobalCSS.iconProps.iconSize : this.props.iconSize}
               />
            </TouchableOpacity>
         )
      }
   }
}

