// IOP Control code for Listview is CNT_MC_947
import React, { Component } from 'react';
import { Text, View, Alert, TouchableOpacity, Image ,FlatList,StyleSheet,TextInput,Dimensions} from 'react-native';
import {Avatar} from 'react-native-elements';
import OreIcon from 'react-native-oreopsnew/components/OreIcon';
import themebuilder from '../../../../themebuilder';
import Oreframework from 'react-native-oreopscore/components/OreOPS/general/Ore_Framework';
import Orefuncs from 'react-native-oreopscore/components/OreOPS/general/Ore_GlobalMethods';
let GlobalCSS = themebuilder.getPropertyPath()

// Listview control template
export default class OreListView extends Component {
    static navigationOptions = {
        header: null
      };
      constructor(props) {
        super(props);
        this.state = {
        bgColor: [
            '#5065d1',
            '#00a259',
            '#303e62',
            '#1B5E20',
            '#DD2C00',
            '#E65100'
       ],
       }
        
      }
render() {
  // Listview template with image loading from asset
  if (this.props.property.listStyle == "style1") {
      return (
   <View style={this.props.style}> 
   { this.props.property.isSearch == true ?
      <View style={styles.searchViewStyle}>
      <View style={[styles.searchSection,this.props.searchStyle]}>  
    <TextInput numberOfLines={1}
     style={[styles.input,this.props.searchTextStyle]} 
     onChangeText={this.props.onChangeTextSearch}
     value={this.props.searchValue}
     placeholder={this.props.property.placeholder}
     placeholderTextColor={this.props.property.placeholderTextColor == undefined && this.props.property.placeholderTextColor == '' ? GlobalCSS.color.labelFontColor : this.props.property.placeholderTextColor}
     editable={true} 
    />
     <OreIcon style={styles.searchIcon} icon={(this.props.searchValue !== '' && this.props.searchValue !== undefined) ? "times" : "search"} iconSize={20} iconColor={this.props.property.searchIconColor ? this.props.property.searchIconColor : GlobalCSS.color.labelFontColor} onPress={this.props.searchIconClose} />
     </View></View> : null
    }   
  <FlatList  
    data={this.props.dataSource}
    renderItem={({ item,index}) =>
     <View style={[styles.viewstyle,this.props.viewStyle]}> 
      <TouchableOpacity disabled={this.props.disabled} onPress={() => this.props.onPress(item,index)} onLongPress={() => this.props.onLongPress(item,index)}>
      <View style={styles.ListRow}>
      <View style={styles.ListColumn1ViewStyle}>
      {
        (item[this.props.property.imageField] != '' && item[this.props.property.imageField] != undefined) ? <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "contain"} style={styles.ListColumn1ImageStyle} source={{ uri: item[this.props.property.imageField]}} /> : <Avatar titleStyle={{ fontSize: 28 }} overlayContainerStyle={{ backgroundColor: this.state.bgColor[Math.floor(Math.random() * this.state.bgColor.length)] }} style={styles.ListColumn1ImageStyle} size="large" rounded  title={item[this.props.property.titleField][0]} />
      }
                
      </View>
      <View style={styles.ListColumn2ViewStyle}> 
      {item[this.props.property.titleField] != "" && item[this.props.property.titleField] != undefined 
       ?  
       <Text numberOfLines={1} style={[styles.ListColumn2HeadingStyle,this.props.headingStyle]}>{item[this.props.property.titleField]}</Text>   
       : null
      }
     {item[this.props.property.descField] != "" && item[this.props.property.descField] != undefined 
       ?  
       <Text numberOfLines={1} style={[styles.ListColumn2ContentStyle,this.props.contentStyle]}>{item[this.props.property.descField]}</Text>       
       : null
      }
      
      </View>
      {item[this.props.property.dateField] != "" && item[this.props.property.dateField] != undefined 
       ?  
       <View style={styles.ListColumn3ViewStyle}>    
       <Text numberOfLines={1} style={[styles.ListColumn3HeadingStyle,this.props.rightHeadingStyle]}>{ ((item[this.props.property.dateField]).length > 12) ? 
      (((item[this.props.property.dateField]).substring(0,12-3)) + '...') : 
      item[this.props.property.dateField] }</Text>
       </View>
       : null
      }
   
     </View>
     </TouchableOpacity>
     </View>               
    }
    />
    </View>
  )
    } 
  else if (this.props.property.listStyle == "style2") {
    return (
      <View style={this.props.viewStyle}>
        { this.props.property.isSearch == true ?
      <View style={styles.searchViewStyle}>
      <View style={[styles.searchSection,this.props.searchStyle]}>  
    <TextInput numberOfLines={1}
     style={[styles.input,this.props.searchTextStyle]} 
     onChangeText={this.props.onChangeTextSearch}
     value={this.props.searchValue}
     placeholder={this.props.property.placeholder}
     placeholderTextColor={this.props.property.placeholderTextColor == undefined || this.props.property.placeholderTextColor == '' ? GlobalCSS.color.labelFontColor : this.props.property.placeholderTextColor}
     editable={true} 
    />
     <OreIcon style={styles.searchIcon} icon={(this.props.searchValue !== '' && this.props.searchValue !== undefined) ? "times" : "search"} iconSize={20} iconColor={this.props.property.searchIconColor ? this.props.property.searchIconColor : GlobalCSS.color.labelFontColor} onPress={this.props.searchIconClose} />
     </View></View> : null
    }   

        <FlatList 
          numColumns={2} data={this.props.dataSource}
          renderItem={({ item, index }) =>
            <TouchableOpacity disabled={this.props.disabled}
              onPress={() => this.props.onPress(item,index)}
              onLongPress={() => this.props.onLongPress(item,index)}
              style={[styles.normalstyle2,this.props.listStyle,]}>

              {
                (item[this.props.property.imageField] != '' && item[this.props.property.imageField] != undefined) ? <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.imagestyle2,this.props.imagestyle2]} source={{ uri: item[this.props.property.imageField] }} /> : <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.imagestyle2,this.props.imagestyle2]} source={{uri:'https://www.pngfind.com/pngs/m/621-6217352_download-and-blank-effect-transparent-clipart-png-photo.png'}} /> 
              }
              <View style={[styles.style2viewstyle]}>
                {item[this.props.property.titleField] != "" && item[this.props.property.titleField] != undefined 
                 ? 
                 <Text numberOfLines={1} style={[styles.liststyleheadingstyle,this.props.titleStyle]}>{item[this.props.property.titleField]}</Text>
                 : null
                }
                  {item[this.props.property.descField] != "" && item[this.props.property.descField] != undefined 
                 ? 
                 <Text numberOfLines={1} style={[styles.liststylecontentstyle, this.props.descStyle]}>{item[this.props.property.descField]}</Text>
                 : null
                }      
                       
                <View style={styles.ListRow}>
                {item[this.props.property.priceField] != "" && item[this.props.property.priceField] != undefined 
                 ? 
                 <Text  style={[styles.liststylesubstyle, this.props.priceStyle]}>{this.props.currencyType ? Orefuncs.OreGetCurrencyType(this.props.currencyType) + " " + item[this.props.property.priceField] : "\u20B9 "  + item[this.props.property.priceField]} { item[this.props.property.offerField] != undefined && item[this.props.property.offerField] != "" ? <Text style={[styles.offerStyle,this.props.offerStyle,]}>{""+item[this.props.property.offerField] + "%OFF"}</Text> : null } </Text>
                 : null
                }   
                      
                    {this.props.property.isAddCart === true 
                    
                    ? <TouchableOpacity style={[styles.addViewStyle,this.props.addViewStyle]} onPress={() => this.props._addToCart(item, index)}>
                    {
                        item[this.props.property.cartValueField] != undefined && item[this.props.property.cartValueField] != "" && item[this.props.property.cartValueField] != 0 ?
                        <View style={[styles.cartSpaceStyle]}>
                        <OreIcon icon={this.props.plusIcon ? this.props.plusIcon : "plus"} iconSize={this.props.plusIconSize ? this.props.plusIconSize : 15} iconColor={this.props.cartPlusIconColor ? this.props.cartPlusIconColor : GlobalCSS.color.primaryColor} onPress={() => this.props._handlePlus(item, index)} />
                        <Text style={[styles.cartTextStyle,this.props.cartTextStyle]}>{"" + item.cartvalue}</Text>
                        <OreIcon  icon={this.props.minusIcon ? this.props.minusIcon : "minus"} iconSize={this.props.plusIconSize ? this.props.plusIconSize : 15} iconColor={this.props.cartMinusIconColor ? this.props.cartMinusIconColor : GlobalCSS.color.primaryColor} onPress={() => this.props._handleMinus(item, index)} /> 
                       </View>
                       : 
                       <View style={[styles.cartSpaceStyle]}>
                       <Text style={[styles.liststylecartstyle, this.props.addTextStyle]}>{this.props.cartName ? this.props.cartName : "ADD"}</Text>
                       </View>
                    }
                      </TouchableOpacity> 
                      
                    : null  
                  
                    }
                    
                     
                   </View>
                   </View>
             </TouchableOpacity>
          } />
      </View>
    )
  }
  else if (this.props.property.listStyle == "style3") {
    return (
      <View style={this.props.viewStyle}>
        { this.props.property.isSearch == true ?
      <View style={styles.searchViewStyle}>
      <View style={[styles.searchSection,this.props.searchStyle]}>  
    <TextInput numberOfLines={1}
     style={[styles.input,this.props.searchTextStyle]} 
     onChangeText={this.props.onChangeTextSearch}
     value={this.props.searchValue}
     placeholder={this.props.property.placeholder}
     placeholderTextColor={this.props.property.placeholderTextColor == undefined || this.props.property.placeholderTextColor == '' ? GlobalCSS.color.labelFontColor : this.props.property.placeholderTextColor}
     editable={true} 
    />
     <OreIcon style={styles.searchIcon} icon={(this.props.searchValue !== '' && this.props.searchValue !== undefined) ? "times" : "search"} iconSize={20} iconColor={this.props.property.searchIconColor ? this.props.property.searchIconColor : GlobalCSS.color.labelFontColor} onPress={this.props.searchIconClose} />
     </View></View> : null
    }   

        <FlatList 
          numColumns={1} data={this.props.dataSource}
          renderItem={({ item, index }) =>
            <TouchableOpacity disabled={this.props.disabled}
              onPress={() => this.props.onPress(item,index)}
              onLongPress={() => this.props.onLongPress(item,index)}
              style={[styles.normalstyle3,this.props.listStyle]}>

              {
                (item[this.props.property.imageField] != '' && item[this.props.property.imageField] != undefined) ? <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.imagestyle2,this.props.imagestyle]} source={{ uri: item[this.props.property.imageField] }} /> : <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "stretch"} style={[styles.imagestyle2,this.props.imagestyle]} source={{uri:'https://www.pngfind.com/pngs/m/621-6217352_download-and-blank-effect-transparent-clipart-png-photo.png'}} /> 
              }
              <View style={[styles.style3viewstyle]}>
                {item[this.props.property.titleField] !="" && item[this.props.property.titleField] != undefined 
                 ? 
                 <Text numberOfLines={1} style={[styles.liststyleheadingstyle,this.props.titleStyle]}>{item[this.props.property.titleField]}</Text>
                 :
                 null
                }
                  {item[this.props.property.descField] !="" && item[this.props.property.descField] != undefined 
                 ? 
                 <Text numberOfLines={1} style={[styles.liststylecontentstyle, this.props.descStyle]}>{item[this.props.property.descField]}</Text>
                 :
                 null
                }    
                <View style={styles.ListRow}>
                {item[this.props.property.priceField] !="" && item[this.props.property.priceField] != undefined 
                 ? 
                 <Text  style={[styles.liststylesubstyle3, this.props.priceStyle]}>{this.props.currencyType ? Orefuncs.OreGetCurrencyType(this.props.currencyType) + " " + item[this.props.property.priceField] : "\u20B9 "  + item[this.props.property.priceField]} { item[this.props.property.offerField] != undefined && item[this.props.property.offerField] != "" ? <Text style={[styles.offerStyle,this.props.offerStyle,]}>{""+item[this.props.property.offerField] + "%OFF"}</Text> : null } </Text>
                 :
                 null
                }    
                
               {this.props.property.isAddCart === true 
                    
                    ? <TouchableOpacity style={[styles.addViewStyle3,this.props.addViewStyle]} onPress={() => this.props._addToCart(item, index)}>
                    {
                        item[this.props.property.cartValueField] != undefined && item[this.props.property.cartValueField] != "" && item[this.props.property.cartValueField] != 0 ?
                        <View style={[styles.cartSpaceStyle]}>
                        <OreIcon icon={this.props.plusIcon ? this.props.plusIcon : "plus"} iconSize={this.props.plusIconSize ? this.props.plusIconSize : 15} iconColor={this.props.cartPlusIconColor ? this.props.cartPlusIconColor : GlobalCSS.color.primaryColor} onPress={() => this.props._handlePlus(item, index)} />
                        <Text style={[styles.cartTextStyle,this.props.cartTextStyle]}>{"" + item.cartvalue}</Text>
                        <OreIcon  icon={this.props.minusIcon ? this.props.minusIcon : "minus"} iconSize={this.props.plusIconSize ? this.props.plusIconSize : 15} iconColor={this.props.cartMinusIconColor ? this.props.cartMinusIconColor : GlobalCSS.color.primaryColor} onPress={() => this.props._handleMinus(item, index)} /> 
                       </View>
                       : 
                       <View style={[styles.cartSpaceStyle]}>
                       <Text style={[styles.liststylecartstyle, this.props.addTextStyle]}>{this.props.cartName ? this.props.cartName : "ADD"}</Text>
                       </View>
                    }
                      </TouchableOpacity> 
                      
                    : null  
                  
                    }
                    
                     
                   </View>
                   </View>
             </TouchableOpacity>
          } />
      </View>
    )
  }
  else if (this.props.property.listStyle == "style4") {
   return (
    <View style={[styles.style4viewstyle,this.props.viewStyle]}>
     {this.props.property.isSearch == true ?
      <View style={styles.searchViewStyle}>
      <View style={[styles.searchSection,this.props.searchStyle]}>  
    <TextInput numberOfLines={1}
     style={[styles.input,this.props.searchTextStyle]} 
     onChangeText={this.props.onChangeTextSearch}
     value={this.props.searchValue}
     placeholder={this.props.property.placeholder}
     placeholderTextColor={this.props.property.placeholderTextColor == undefined || this.props.property.placeholderTextColor == '' ? GlobalCSS.color.labelFontColor : this.props.property.placeholderTextColor}
     editable={true} 
    />
     <OreIcon style={styles.searchIcon} icon={(this.props.searchValue !== '' && this.props.searchValue !== undefined) ? "times" : "search"} iconSize={20} iconColor={this.props.property.searchIconColor ? this.props.property.searchIconColor : GlobalCSS.color.labelFontColor} onPress={this.props.searchIconClose} />
     </View></View> : null
    } 
    <FlatList   
       data={this.props.dataSource}
       renderItem={({ item }) =>
       <View style={[styles.style4listviewstyle,this.props.listViewStyle]}>
        {item[this.props.property.headingField] != "" && item[this.props.property.headingField] != undefined 
         ?   
         <View style={styles.style4headingviewstyle}>
         <Text numberOfLines={1} style={[styles.style4headingstyle,this.props.headingStyle]}>{item[this.props.property.headingField]}</Text>
         </View>
         : null
        }
     
       <FlatList numColumns={4} data={item[this.props.property.listDataField]} 
          renderItem={({ item: innerData, index }) =>
         <TouchableOpacity 
            style={[styles.style4liststyle,this.props.listStyle]}    
            onPress={() => this.props.onPress(item,index)}
            onLongPress={() => this.props.onLongPress(item,index)}>
          {
            (innerData[this.props.property.imageField] != '' && innerData[this.props.property.imageField] != undefined) 
             ? 
            <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.style4imagestyle,this.props.imageStyle]} 
              source={{uri: innerData[this.props.property.imageField]}}
            />
            : 
            <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.style4imagestyle,this.props.imageStyle]} source={{uri:'https://www.pngfind.com/pngs/m/621-6217352_download-and-blank-effect-transparent-clipart-png-photo.png'}} /> 
         }
         {innerData[this.props.property.nameField] != "" && innerData[this.props.property.nameField] != undefined 
         ?
         <Text numberOfLines={1} style={[styles.style4textstyle,this.props.textStyle]}>{innerData[this.props.property.nameField]}</Text>
         : null
        }  
       
       </TouchableOpacity>
        }/>
     </View>
  } />
  </View>
    )
  }
  else if (this.props.property.listStyle == "style5") {
    return (
      <View style={[styles.style4viewstyle,this.props.viewStyle]}>
     {this.props.property.isSearch == true ?
      <View style={styles.searchViewStyle}>
      <View style={[styles.searchSection,this.props.searchStyle]}>  
    <TextInput numberOfLines={1}
     style={[styles.input,this.props.searchTextStyle]} 
     onChangeText={this.props.onChangeTextSearch}
     value={this.props.searchValue}
     placeholder={this.props.property.placeholder}
     placeholderTextColor={this.props.property.placeholderTextColor == undefined || this.props.property.placeholderTextColor == '' ? GlobalCSS.color.labelFontColor : this.props.property.placeholderTextColor}
     editable={true} 
    />
     <OreIcon style={styles.searchIcon} icon={(this.props.searchValue !== '' && this.props.searchValue !== undefined) ? "times" : "search"} iconSize={20} iconColor={this.props.property.searchIconColor ? this.props.property.searchIconColor : GlobalCSS.color.labelFontColor} onPress={this.props.searchIconClose} />
     </View></View> : null
    } 
    <FlatList   
       data={this.props.dataSource}
       renderItem={({ item }) =>
       <View style={[styles.style4listviewstyle,this.props.listViewStyle]}>
        {item[this.props.property.headingField] != "" && item[this.props.property.headingField] != undefined 
         ?   
         <View style={styles.style4headingviewstyle}>
         <Text numberOfLines={1} style={[styles.style4headingstyle,this.props.headingStyle]}>{item[this.props.property.headingField]}</Text>
         </View>
         : null
        }
     
       <FlatList horizontal={true} data={item[this.props.property.listDataField]} 
          renderItem={({ item: innerData, index }) =>
         <TouchableOpacity 
            style={[styles.style5liststyle,this.props.listStyle]}    
            onPress={() => this.props.onPress(item,index)}
            onLongPress={() => this.props.onLongPress(item,index)}>
          {
            (innerData[this.props.property.imageField] != '' && innerData[this.props.property.imageField] != undefined) 
             ? 
            <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.style5imagestyle,this.props.imageStyle]} 
              source={{uri: innerData[this.props.property.imageField]}}
            />
            : 
            <Image resizeMode={(this.props.resizeMode != "" && this.props.resizeMode != undefined) ? this.props.resizeMode : "cover"} style={[styles.style5imagestyle,this.props.imageStyle]} source={{uri:'https://www.pngfind.com/pngs/m/621-6217352_download-and-blank-effect-transparent-clipart-png-photo.png'}} /> 
         }
         {innerData[this.props.property.nameField] != "" && innerData[this.props.property.nameField] != undefined 
         ?
         <Text numberOfLines={1} style={[styles.style4textstyle,this.props.textStyle]}>{innerData[this.props.property.nameField]}</Text>
         : null
        }  
       
       </TouchableOpacity>
        }/>
     </View>
  } />
  </View>
     )
   }
 }
 
}

// Default CSS for ListView Template
const styles = StyleSheet.create({
    searchSection: {
        flexDirection: 'row',
        //borderBottomWidth:1,
        borderColor: GlobalCSS.color.borderColor,
        width:"100%",
        height:50,
       
    },
    searchViewStyle: {
     //padding:10
     
    },
    searchIcon: {
      justifyContent:"center",
    },
    input: {
       width:"90%",
       fontSize: GlobalCSS.listViewProps.listHeadingSize,
       fontFamily: GlobalCSS.font.fontFamily,
       marginLeft:"2%",
       color:GlobalCSS.color.formControlFontColor
    },
   viewstyle:{
    flex:1,
    paddingTop:"1%"
   },
   ListRow:{
    flexDirection:"row"
   },
  ListColumn1ViewStyle: { 
    flexDirection: "column",
     width: "15.5%", 
     marginLeft: "2%", 
     marginTop: "1%" 
    },
  ListColumn1ImageStyle: { 
    width: 50, 
    height: 50, 
    borderRadius: 50, 
    resizeMode: "cover", 
    alignSelf: "center" 
  },
  ListColumn2ViewStyle: { 
    flexDirection: "column", 
    marginLeft: "5%", 
    width: "55%", 
    marginBottom: "2%" 
  },
  ListColumn2HeadingStyle: { 
    fontSize: GlobalCSS.listViewProps.listHeadingSize,
    fontFamily: GlobalCSS.font.fontFamily, 
    marginLeft: "3%", 
    marginTop: "4%", 
    marginBottom: "4%", 
    fontWeight: "bold", 
    color: GlobalCSS.color.formControlFontColor, 
    width: "95%",
    textTransform:"capitalize"
  },
  ListColumn2ContentStyle: { 
    marginTop: "-2%", 
    marginLeft: "3%", 
    fontSize: GlobalCSS.listViewProps.listContentSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: GlobalCSS.color.labelFontColor, 
    textTransform:"capitalize"
  },
  ListColumn3ContentStyle: { 
    marginTop: "1%", 
    marginLeft: "3%", 
    fontSize: GlobalCSS.listViewProps.listContentSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: GlobalCSS.color.labelFontColor 
  },
  ListColumn3ViewStyle: { 
    flexDirection: "column", 
    marginTop: "3%", 
    width: "30%" , 
    marginLeft:"5%"
  },
  ListColumn3HeadingStyle: { 
    color: "#757575", 
    fontSize: GlobalCSS.listViewProps.listSmallSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: GlobalCSS.color.labelFontColor ,
    textTransform:"capitalize" 
  },
  ListColumn4ViewStyle: { 
    flexDirection: "column",
     marginTop: "4%", 
     width: "5%" 
    },
  
  // Listview Style2 style 
  normalstyle2:{
    width: "47%", 
    marginLeft: "2%", 
    marginTop: "2%",
    marginBottom: "1%",
    backgroundColor:GlobalCSS.color.pageBackgroundColor,
    borderRadius:5,
    borderColor:GlobalCSS.listViewProps.listCartBorderColor,
    borderWidth:1,
    overflow:"hidden"
   },
   imagestyle2:{ 
    width:"100%", 
    height: 180,
   },
  liststyleheadingstyle:{ 
    fontSize: GlobalCSS.listViewProps.listHeadingSize, 
    fontFamily: GlobalCSS.font.fontFamily, 
    color: GlobalCSS.listViewProps.listCartHeadingColor, 
    textTransform:"capitalize",
    fontWeight:"bold"
  },
  liststylecontentstyle:{ 
    fontSize: GlobalCSS.listViewProps.listContentSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: GlobalCSS.listViewProps.listCartContentColor, 
    textTransform:"capitalize"
  },
  liststylesubstyle:{ 
    fontSize: GlobalCSS.listViewProps.listContentSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: GlobalCSS.listViewProps.listCartPriceColor,
    flexDirection:"column",
    width:"70%",
    textTransform:"uppercase",
    textAlignVertical:"center",
    fontWeight:"bold"
  },
  liststylecartstyle:{ 
    fontSize: GlobalCSS.listViewProps.listContentSize, 
    fontFamily: GlobalCSS.font.fontFamily,
    color: "green",
    textAlign:"center",
    fontWeight:"bold",
    textTransform:"uppercase",
    color:GlobalCSS.color.primaryColor
  },
  style2viewstyle:{padding:"5%"},
  addViewStyle:{
    width:"30%",
    backgroundColor:GlobalCSS.color.pageBackgroundColor,
    borderWidth:1,
    borderColor:GlobalCSS.listViewProps.listCartBorderColor,
    borderRadius:5,
    paddingTop:"2%",
    paddingBottom:"2%",
    marginTop:"3%"
    },
  offerStyle:{
    color:GlobalCSS.listViewProps.listCartOfferColor,
    fontSize:GlobalCSS.listViewProps.listSmallSize,
    fontFamily: GlobalCSS.font.fontFamily,
    fontWeight:"500"
  },
  cartSpaceStyle:{
    flexDirection:"row",
    display:"flex",
    alignItems:"center",
    justifyContent:"space-evenly"
  },
  cartTextStyle:{
    fontSize:GlobalCSS.listViewProps.listContentSize,
    fontFamily: GlobalCSS.font.fontFamily,
    color:GlobalCSS.color.primaryColor
  },

   // Listview Style3 style 
   normalstyle3:{
    width: "95%", 
    marginLeft: "2%", 
    marginTop: "2%",
    marginBottom: "1%",
    backgroundColor:GlobalCSS.color.pageBackgroundColor,
    borderRadius:5,
    borderColor:GlobalCSS.listViewProps.listCartBorderColor,
    borderWidth:1,
    overflow:"hidden"
   },
   addViewStyle3:{
    width:"20%",
    backgroundColor:GlobalCSS.color.pageBackgroundColor,
    borderWidth:1,
    borderColor:GlobalCSS.listViewProps.listCartBorderColor,
    borderRadius:5,
    paddingTop:"2%",
    paddingBottom:"2%",
    marginTop:"2%"
    },
    liststylesubstyle3:{ 
      fontSize: GlobalCSS.listViewProps.listContentSize, 
      fontFamily: GlobalCSS.font.fontFamily,
      color: GlobalCSS.listViewProps.listCartPriceColor,
      flexDirection:"column",
      width:"80%",
      textTransform:"uppercase",
      textAlignVertical:"center",
      fontWeight:"bold"
    },
    style3viewstyle:{padding:"2%"},

    // ListStyle 4
    style4viewstyle:{
      flex:1
    },
    style4headingviewstyle: {
    
    },
    style4headingstyle:{
      fontSize: GlobalCSS.listViewProps.listStyle4HeadingSize,
      fontFamily: GlobalCSS.font.fontFamily,
      fontWeight:"bold",
      color:GlobalCSS.listViewProps.listStyle4headingColor,
    },
    style4liststyle:{
      width: Oreframework.getW(65), 
      marginRight:"3%",
      marginTop:"1.5%",
      marginBottom:"1.5%",
      borderRadius:3,
      overflow:"hidden",
    },
    style4imagestyle:{
      width: '100%', 
      height: 85, 
     
    },
    style4textstyle:{
      fontSize: GlobalCSS.listViewProps.listStyle4TextSize,
      fontFamily: GlobalCSS.font.fontFamily,
      color: GlobalCSS.listViewProps.listStyle4TextColor,
      textAlign:"center",
      textAlignVertical:"center",
      padding:"5%",
      backgroundColor:GlobalCSS.listViewProps.listStyle4backgroundColor,
    },
    style4listviewstyle:{
      margin:"2%"
    },

    //Listview Style 5 
   
    style5liststyle:{
      width: Dimensions.get('screen').width / 4, 
      marginRight:10,
      marginTop: 10,
      marginBottom:10,
      borderRadius:3,
      overflow:"hidden",
      display:"flex"
    },

    style5imagestyle:{
      width: '100%', 
      height: 85, 
   },
    

    
    
});

