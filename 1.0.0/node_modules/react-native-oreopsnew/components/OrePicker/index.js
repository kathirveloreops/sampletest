// IOP Code for Picker control is CNT_MC_951
import React, { Component } from 'react';
import {Picker,View,Text,StyleSheet, Platform} from 'react-native';
import themebuilder from '../../../../themebuilder';
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()
// Picker Control Template
export default class OrePicker extends Component {
render(){
    // Picker with Label Template
    if(this.props.title != '' && this.props.title != undefined){ 
        
        return ( 
            <View style={[(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""),this.props.style]}>
            <Text ellipsizeMode={"tail"} numberOfLines={1} style={[OreStyle.OrePickerLabelStyle,this.props.textStyle,(this.props.viewStyle.borderWidth != undefined && this.props.viewStyle.borderWidth != 0) ?
                 {marginBottom: 5} : null]}>{this.props.title}</Text>
            <View style={Platform.OS === 'android' ? [OreStyle.OrePicker,this.props.viewStyle,{justifyContent : 'center'}] : [this.props.viewStyle,{justifyContent : 'center'}, {borderWidth : 0, borderBottomWidth : 0}]}>  
            <Picker 
            style={[OreStyle.OrePickerTextStyle,this.props.pickerStyle]}
            selectedValue={this.props.selectedValue}        
            onValueChange={this.props.onValueChange} 
            enabled={this.props.disabled === true ? false : true}> 
            {this.props.dataSource.map((item, i)=>{
                   return  <Picker.Item key={i} label={item[this.props.nameField]} value={item[this.props.valueField]} color={this.props.pickerColor} /> 
                            })
                        }  
        
            </Picker></View></View>
        );
    } 
   
    // Picker without Label template
    else{
        return ( 
            <View style={[OreStyle.OrePicker,(this.props.disabled === true ? {opacity: GlobalCSS.opacity.disabledOpacity} : ""),this.props.style,Platform.OS === 'android' ? [{justifyContent : 'center'}] : [{justifyContent : 'center'}, {borderWidth : 0, borderBottomWidth : 0}]]}>
            <Picker 
            style={[OreStyle.OrePickerTextStyle,this.props.pickerStyle]}
            selectedValue={this.props.selectedValue}        
            onValueChange={this.props.onValueChange} 
            enabled={this.props.disabled === true ? false : true}> 
            {this.props.dataSource.map((item, i)=>{
                   return  <Picker.Item key={i} label={item[this.props.nameField]} value={item[this.props.valueField]} color={this.props.pickerColor} /> 
                            })
                        }  
        
            </Picker></View>
       );
    }
}
}

