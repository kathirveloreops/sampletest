// IOP Code for TextBox CNT_MC_938
import React, { Component } from 'react';
import { TextInput, View, Text } from 'react-native';
import { StyleSheet } from 'react-native';
import themebuilder from '../../../../themebuilder';
import Oreframework from 'react-native-oreopscore/components/OreOPS/general/Ore_Framework';
let OreStyle = themebuilder.getStylePath()
let GlobalCSS = themebuilder.getPropertyPath()

// TextBox Control Template
export default class OreTextBox extends Component {
  render() {
    // TextBox with Label template
    if (this.props.title != '' && this.props.title != undefined) {
      return (
        <View style={[(this.props.disabled === true ? {opacity:GlobalCSS.opacity.disabledOpacity} : ""),this.props.viewstyle, OreStyle.OreTextBoxViewStyle]}>
          <Text ellipsizeMode={"tail"} numberOfLines={1} style={[OreStyle.OreTextBoxLabelStyle, this.props.textstyle, (this.props.style.borderWidth != undefined && this.props.style.borderWidth != 0) ? { marginBottom: 5 } : null]}>{this.props.title}</Text>
          <TextInput
            // style={[OreStyle.OreTextBox,this.props.style,(this.props.style.borderWidth != undefined && this.props.style.borderWidth != 0) ? {paddingLeft:10,paddingRight: 10} : {paddingLeft:0,paddingRight:0}]}
            style={[OreStyle.OreTextBox,(this.props.type === 'Text Area' ? { textAlignVertical: 'top' } : { textAlignVertical: 'center', }),  this.props.style, (this.props.style.borderWidth != undefined && this.props.style.borderWidth != 0) ? { paddingLeft: 10, paddingRight: 10 } : null]}
            onChangeText={this.props.onChangeText}
            value={this.props.value}
            numberOfLines={this.props.numberOfLines}
            secureTextEntry={this.props.secureTextEntry}
            keyboardType={this.props.keyboardType}
            placeholder={this.props.placeholder}
            placeholderTextColor={this.props.placeholderTextColor === undefined || this.props.placeholderTextColor === '' ? GlobalCSS.color.labelFontColor : this.props.placeholderTextColor}
            multiline={this.props.multiline}
            maxLength={this.props.maxLength}
            editable={this.props.disabled === true ? false : true}
            onBlur={this.props.onBlur}
            onFocus={this.props.onFocus}
            ref={(input) => this.props.inputRef && this.props.inputRef(input)}
          />
        </View>
      );
    }
    else {
      return (
        // TextBox without Label template
        <TextInput
          style={[(this.props.disabled === true ? {opacity:GlobalCSS.opacity.disabledOpacity} : ""),OreStyle.OreTextBox, this.props.style, (this.props.style.borderWidth != undefined && this.props.style.borderWidth != 0) ? { paddingLeft: 10, paddingRight: 10 } : null]}
          onChangeText={this.props.onChangeText}
          value={this.props.value}
          numberOfLines={this.props.numberOfLines}
          secureTextEntry={this.props.secureTextEntry}
          keyboardType={this.props.keyboardType}
          placeholder={this.props.placeholder}
          placeholderTextColor={this.props.placeholderTextColor === undefined || this.props.placeholderTextColor === '' ? GlobalCSS.color.labelFontColor : this.props.placeholderTextColor}
          multiline={this.props.multiline}
          maxLength={this.props.maxLength}
          editable={this.props.disabled === true ? false : true}
          onBlur={this.props.onBlur}
          onFocus={this.props.onFocus}
          ref={(input) => this.props.inputRef && this.props.inputRef(input)}
        />
      );
    }
  }
}


