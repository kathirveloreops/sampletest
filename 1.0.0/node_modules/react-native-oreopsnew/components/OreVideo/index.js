// IOP Code for Video Control is CNT_MC_949
import React, { Component } from 'react';
import Video from 'react-native-video';
import { StyleSheet, Dimensions, View, StatusBar } from 'react-native';
import { hideNavigationBar, showNavigationBar } from 'react-native-navigation-bar-color';

// Video Control Template
export default class OreVideo extends Component {

  constructor(props) {
    super(props);
    this.state = {
      orientation: 'portrait'
    }
  }

  componentDidMount = () => {
    // Screen orientation for portrait and landscape for video handled here
    Dimensions.addEventListener('change', () => {
      if (Dimensions.get('screen').height >= Dimensions.get('screen').width) {
        this.setState({ orientation: 'portrait' });
      } else {
        this.setState({ orientation: 'landscape' });
      }
    });
  }

  // Status Bar Hide while Landscape 
  hidenavigation = () => {
    if (this.props.videostyle == 'style2' && this.state.orientation == 'landscape') {
      hideNavigationBar()
    } else {
      showNavigationBar()
    }
  }

  render() {
    // Fullscreen Video Template
    if (this.props.fullscreen == true) {
      return (
        <Video style={styles.Video}
          muted={this.props.muted}
          poster={this.props.poster}
          controls={this.props.controls}
          paused={this.props.paused == true ? false : true}
          source={this.props.data[this.props.position] ?
            this.props.data[this.props.position].url.startsWith("http") ? { uri: this.props.data[this.props.position].url } : require(this.props.data[this.props.position].url) : { uri: this.state.source }}
          ref={(ref) => {
            this.player = ref
          }}
          onBuffer={this.props.onBuffer}
          onError={this.props.onError}
          onEnd={this.props.onEnd}
          onVideoEnd={this.props.onVideoEnd}
          audioOnly={this.props.audioOnly}
          resizeMode={this.props.resizeMode}
          posterResizeMode={this.props.posterResizeMode}
          repeat={this.props.repeat}
          onEnd={this.props.onEnd}
          onLoad={this.props.onLoad}
          onLoadStart={this.props.onLoadStart}
          onReadyForDisplay={this.props.onReadyForDisplay}
          onProgress={this.props.onProgress}
          onSeek={this.props.onSeek}
        />
      );
    }
    // Style1 Template handled here
    else if (this.props.fullscreen != true && this.props.videostyle == 'style1') {
      return (
        <Video style={[styles.backgroundVideo, this.props.style]}
          muted={this.props.muted}
          poster={this.props.poster}
          controls={this.props.controls}
          paused={this.props.paused == true ? false : true}
          source={this.props.data[this.props.position] ?
            this.props.data[this.props.position].url.startsWith("http") ? { uri: this.props.data[this.props.position].url } : require(this.props.data[this.props.position].url) : { uri: this.state.source }}
          ref={(ref) => {
            this.player = ref
          }}
          onBuffer={this.props.onBuffer}
          onError={this.props.onError}
          onEnd={this.props.onEnd}
          onVideoEnd={this.props.onVideoEnd}
          audioOnly={this.props.audioOnly}
          resizeMode={this.props.resizeMode}
          posterResizeMode={this.props.posterResizeMode}
          repeat={this.props.repeat}
          onEnd={this.props.onEnd}
          onLoad={this.props.onLoad}
          onLoadStart={this.props.onLoadStart}
          onReadyForDisplay={this.props.onReadyForDisplay}
          onProgress={this.props.onProgress}
          onSeek={this.props.onSeek}
        />
      );
    }
    // style2 template handled here
    else if (this.props.fullscreen != true && this.props.videostyle == 'style2') {
      return (
        <View>
          {this.hidenavigation()}
          <StatusBar
            hidden={this.state.orientation == 'portrait' ? false : true} />
          <Video style={[this.state.orientation == 'portrait' ? [styles.backgroundVideo, this.props.style] : [styles.Video]]}
            muted={this.props.muted}
            poster={this.props.poster}
            controls={this.props.controls}
            paused={this.props.paused == true ? false : true}
            source={this.props.data[this.props.position] ?
              this.props.data[this.props.position].url.startsWith("http") ? { uri: this.props.data[this.props.position].url } : require(this.props.data[this.props.position].url) : { uri: this.state.source }}
            ref={(ref) => {
              this.player = ref
            }}
            onBuffer={this.props.onBuffer}
            onError={this.props.onError}
            onEnd={this.props.onEnd}
            onVideoEnd={this.props.onVideoEnd}
            audioOnly={this.props.audioOnly}
            resizeMode={this.props.resizeMode}
            posterResizeMode={this.props.posterResizeMode}
            repeat={this.props.repeat}
            onEnd={this.props.onEnd}
            onLoad={this.props.onLoad}
            onLoadStart={this.props.onLoadStart}
            onReadyForDisplay={this.props.onReadyForDisplay}
            onProgress={this.props.onProgress}
            onSeek={this.props.onSeek}
          /></View>
      );

    }
  }
}

// Default CSS property for Video Control
var styles = StyleSheet.create({
  backgroundVideo: {
    height: 300,
    width: "100%",
  },
  Video: {
    width: '100%',
    height: '100%'
  }
});